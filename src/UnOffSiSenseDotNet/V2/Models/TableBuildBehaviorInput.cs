// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace UnOffSiSenseDotNet.V2_0.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class TableBuildBehaviorInput
    {
        /// <summary>
        /// Initializes a new instance of the TableBuildBehaviorInput class.
        /// </summary>
        public TableBuildBehaviorInput()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the TableBuildBehaviorInput class.
        /// </summary>
        /// <param name="type">Possible values include: 'sync',
        /// 'accumulativeSync', 'ignoreIfExists'</param>
        public TableBuildBehaviorInput(string type, TableBuildBehaviorInputAccumulativeConfig accumulativeConfig = default(TableBuildBehaviorInputAccumulativeConfig))
        {
            Type = type;
            AccumulativeConfig = accumulativeConfig;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets possible values include: 'sync', 'accumulativeSync',
        /// 'ignoreIfExists'
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "accumulativeConfig")]
        public TableBuildBehaviorInputAccumulativeConfig AccumulativeConfig { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Type == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Type");
            }
            if (AccumulativeConfig != null)
            {
                AccumulativeConfig.Validate();
            }
        }
    }
}
