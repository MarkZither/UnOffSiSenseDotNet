// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace UnOffSiSenseDotNet.V2_0.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class TableInput
    {
        /// <summary>
        /// Initializes a new instance of the TableInput class.
        /// </summary>
        public TableInput()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the TableInput class.
        /// </summary>
        /// <param name="id">Original Table name/identifier from the
        /// datasource</param>
        /// <param name="columns">Table columns</param>
        /// <param name="name">Table name - this name will identify the table
        /// in queries</param>
        /// <param name="hidden">Hide the table - if `true` the table will be
        /// visible only in Datamodel schema editor and cannot be
        /// queried</param>
        /// <param name="buildBehavior">Configuration for how the Table should
        /// be built
        /// Only applies to `extract` type Datasets</param>
        /// <param name="configOptions">Table configuration</param>
        /// <param name="description">Textual description for the Table</param>
        /// <param name="tags">An array of labels for the Table</param>
        /// <param name="expression">**Only applicable to `custom` type
        /// tables:** SQL expression</param>
        /// <param name="type">Table type: `base` for regular tables, `custom`
        /// for SQL expression-based tables. Possible values include: 'base',
        /// 'custom'</param>
        public TableInput(string id, IList<ColumnInput> columns, string name = default(string), bool? hidden = default(bool?), TableBuildBehaviorInput buildBehavior = default(TableBuildBehaviorInput), object configOptions = default(object), string description = default(string), IList<string> tags = default(IList<string>), string expression = default(string), string type = default(string))
        {
            Id = id;
            Name = name;
            Columns = columns;
            Hidden = hidden;
            BuildBehavior = buildBehavior;
            ConfigOptions = configOptions;
            Description = description;
            Tags = tags;
            Expression = expression;
            Type = type;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets original Table name/identifier from the datasource
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or sets table name - this name will identify the table in
        /// queries
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets table columns
        /// </summary>
        [JsonProperty(PropertyName = "columns")]
        public IList<ColumnInput> Columns { get; set; }

        /// <summary>
        /// Gets or sets hide the table - if `true` the table will be visible
        /// only in Datamodel schema editor and cannot be queried
        /// </summary>
        [JsonProperty(PropertyName = "hidden")]
        public bool? Hidden { get; set; }

        /// <summary>
        /// Gets or sets configuration for how the Table should be built
        /// Only applies to `extract` type Datasets
        /// </summary>
        [JsonProperty(PropertyName = "buildBehavior")]
        public TableBuildBehaviorInput BuildBehavior { get; set; }

        /// <summary>
        /// Gets or sets table configuration
        /// </summary>
        [JsonProperty(PropertyName = "configOptions")]
        public object ConfigOptions { get; set; }

        /// <summary>
        /// Gets or sets textual description for the Table
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets an array of labels for the Table
        /// </summary>
        [JsonProperty(PropertyName = "tags")]
        public IList<string> Tags { get; set; }

        /// <summary>
        /// Gets or sets **Only applicable to `custom` type tables:** SQL
        /// expression
        /// </summary>
        [JsonProperty(PropertyName = "expression")]
        public string Expression { get; set; }

        /// <summary>
        /// Gets or sets table type: `base` for regular tables, `custom` for
        /// SQL expression-based tables. Possible values include: 'base',
        /// 'custom'
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Id == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Id");
            }
            if (Columns == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Columns");
            }
            if (Columns != null)
            {
                foreach (var element in Columns)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (BuildBehavior != null)
            {
                BuildBehavior.Validate();
            }
        }
    }
}
