// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace UnOffSiSenseDotNet.V2_0.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class ConnectionImportModelInput
    {
        /// <summary>
        /// Initializes a new instance of the ConnectionImportModelInput class.
        /// </summary>
        public ConnectionImportModelInput()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ConnectionImportModelInput class.
        /// </summary>
        /// <param name="provider">Connector type identifier
        /// See [Available connectors](http://about:blank)</param>
        /// <param name="parameters">Connector-specific parameters
        /// See [Available connectors](http://about:blank)</param>
        /// <param name="id">Connection Id</param>
        /// <param name="schema">Name of the database schema to connect to
        ///
        /// With RDBMS this is usually the database name such as `Northwind`,
        /// with files (csv/excel) it is the file name</param>
        /// <param name="fileName">Filename for file-based connectors</param>
        /// <param name="timeout">Query timeout in Milliseconds
        /// **applicable only to Live connections**</param>
        /// <param name="refreshRate">Query refresh rate in Milliseconds
        /// **applicable only to Live connections**</param>
        /// <param name="resultLimit">Maximum number of rows to retrieve in
        /// each query
        /// **applicable only to Live connections**</param>
        /// <param name="globalTableConfigOptions">Connector-specific
        /// configuration applicable to all Tables in this Dataset
        /// See [Available connectors](http://about:blank)</param>
        public ConnectionImportModelInput(string provider, object parameters, string id = default(string), string schema = default(string), string fileName = default(string), int? timeout = default(int?), int? refreshRate = default(int?), int? resultLimit = default(int?), object uiParams = default(object), object globalTableConfigOptions = default(object))
        {
            Id = id;
            Provider = provider;
            Parameters = parameters;
            Schema = schema;
            FileName = fileName;
            Timeout = timeout;
            RefreshRate = refreshRate;
            ResultLimit = resultLimit;
            UiParams = uiParams;
            GlobalTableConfigOptions = globalTableConfigOptions;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets connection Id
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or sets connector type identifier
        /// See [Available connectors](http://about:blank)
        /// </summary>
        [JsonProperty(PropertyName = "provider")]
        public string Provider { get; set; }

        /// <summary>
        /// Gets or sets connector-specific parameters
        /// See [Available connectors](http://about:blank)
        /// </summary>
        [JsonProperty(PropertyName = "parameters")]
        public object Parameters { get; set; }

        /// <summary>
        /// Gets or sets name of the database schema to connect to
        ///
        /// With RDBMS this is usually the database name such as `Northwind`,
        /// with files (csv/excel) it is the file name
        /// </summary>
        [JsonProperty(PropertyName = "schema")]
        public string Schema { get; set; }

        /// <summary>
        /// Gets or sets filename for file-based connectors
        /// </summary>
        [JsonProperty(PropertyName = "fileName")]
        public string FileName { get; set; }

        /// <summary>
        /// Gets or sets query timeout in Milliseconds
        /// **applicable only to Live connections**
        /// </summary>
        [JsonProperty(PropertyName = "timeout")]
        public int? Timeout { get; set; }

        /// <summary>
        /// Gets or sets query refresh rate in Milliseconds
        /// **applicable only to Live connections**
        /// </summary>
        [JsonProperty(PropertyName = "refreshRate")]
        public int? RefreshRate { get; set; }

        /// <summary>
        /// Gets or sets maximum number of rows to retrieve in each query
        /// **applicable only to Live connections**
        /// </summary>
        [JsonProperty(PropertyName = "resultLimit")]
        public int? ResultLimit { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "uiParams")]
        public object UiParams { get; set; }

        /// <summary>
        /// Gets or sets connector-specific configuration applicable to all
        /// Tables in this Dataset
        /// See [Available connectors](http://about:blank)
        /// </summary>
        [JsonProperty(PropertyName = "globalTableConfigOptions")]
        public object GlobalTableConfigOptions { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Provider == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Provider");
            }
            if (Parameters == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Parameters");
            }
        }
    }
}
