// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace UnOffSiSenseDotNet.V2_0.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class NodeResourceAllocation
    {
        /// <summary>
        /// Initializes a new instance of the NodeResourceAllocation class.
        /// </summary>
        public NodeResourceAllocation()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the NodeResourceAllocation class.
        /// </summary>
        /// <param name="coresUsagePercentage">Limit threads per Datamodel as
        /// percentage of CPU capacity</param>
        /// <param name="limitCpuCores">Limit CPU core utilization per
        /// Datamodel
        /// `-1` for system default</param>
        /// <param name="limitRamSizeInMB">Limit MBs of RAM utilization per
        /// Datamodel
        /// `-1` for system default</param>
        /// <param name="requiredCpuCores">Minimum available PU cores required
        /// per Datamodel
        /// `-1` for system default</param>
        /// <param name="requiredRamSizeInMB">Minimum available MBs of RAM
        /// required per Datamodel
        /// `-1` for system default</param>
        public NodeResourceAllocation(int? coresUsagePercentage = default(int?), int? limitCpuCores = default(int?), int? limitRamSizeInMB = default(int?), int? requiredCpuCores = default(int?), int? requiredRamSizeInMB = default(int?))
        {
            CoresUsagePercentage = coresUsagePercentage;
            LimitCpuCores = limitCpuCores;
            LimitRamSizeInMB = limitRamSizeInMB;
            RequiredCpuCores = requiredCpuCores;
            RequiredRamSizeInMB = requiredRamSizeInMB;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets limit threads per Datamodel as percentage of CPU
        /// capacity
        /// </summary>
        [JsonProperty(PropertyName = "coresUsagePercentage")]
        public int? CoresUsagePercentage { get; set; }

        /// <summary>
        /// Gets or sets limit CPU core utilization per Datamodel
        /// `-1` for system default
        /// </summary>
        [JsonProperty(PropertyName = "limitCpuCores")]
        public int? LimitCpuCores { get; set; }

        /// <summary>
        /// Gets or sets limit MBs of RAM utilization per Datamodel
        /// `-1` for system default
        /// </summary>
        [JsonProperty(PropertyName = "limitRamSizeInMB")]
        public int? LimitRamSizeInMB { get; set; }

        /// <summary>
        /// Gets or sets minimum available PU cores required per Datamodel
        /// `-1` for system default
        /// </summary>
        [JsonProperty(PropertyName = "requiredCpuCores")]
        public int? RequiredCpuCores { get; set; }

        /// <summary>
        /// Gets or sets minimum available MBs of RAM required per Datamodel
        /// `-1` for system default
        /// </summary>
        [JsonProperty(PropertyName = "requiredRamSizeInMB")]
        public int? RequiredRamSizeInMB { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (CoresUsagePercentage != null)
            {
                if (CoresUsagePercentage > 100)
                {
                    throw new ValidationException(ValidationRules.InclusiveMaximum, "CoresUsagePercentage", 100);
                }
                if (CoresUsagePercentage < 0)
                {
                    throw new ValidationException(ValidationRules.InclusiveMinimum, "CoresUsagePercentage", 0);
                }
            }
        }
    }
}
