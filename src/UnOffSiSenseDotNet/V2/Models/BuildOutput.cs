// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace UnOffSiSenseDotNet.V2_0.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class BuildOutput
    {
        /// <summary>
        /// Initializes a new instance of the BuildOutput class.
        /// </summary>
        public BuildOutput()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the BuildOutput class.
        /// </summary>
        /// <param name="oid">Unique ID assigned to the Build Task</param>
        /// <param name="datamodelId">Datamodel unique ID</param>
        /// <param name="buildType">Type of build performed. Possible values
        /// include: 'schema-changes', 'by-table', 'full', 'publish'</param>
        /// <param name="status">Current status of the task. Possible values
        /// include: 'pending', 'building', 'done', 'cancelled',
        /// 'failed'</param>
        /// <param name="datamodelTitle">Title (name) of the Datamodel being
        /// built</param>
        /// <param name="datamodelType">Datamodel type. Possible values
        /// include: 'extract', 'live'</param>
        /// <param name="indexSize">Built Datamodel index size type (only
        /// applicable to `extract` type Datamodels). Possible values include:
        /// 'short', 'long'</param>
        /// <param name="instanceId">Unique ID of physical instance performing
        /// the build task</param>
        /// <param name="schemaLastUpdate">Datetime of last schema update being
        /// built</param>
        /// <param name="created">Datetime of the task being created</param>
        /// <param name="started">Datetime of the task being started</param>
        /// <param name="completed">Datetime of the task
        /// completing/stopping/failing</param>
        /// <param name="rowLimit">For `extract` type Datamodels, the maximum
        /// number of rows to import per table, if set.</param>
        /// <param name="source">What triggered the build task. Possible values
        /// include: 'rest', 'nextecm', 'scheduler', 'cli'</param>
        public BuildOutput(System.Guid? oid = default(System.Guid?), System.Guid? datamodelId = default(System.Guid?), string buildType = default(string), string status = default(string), string datamodelTitle = default(string), string datamodelType = default(string), string indexSize = default(string), string instanceId = default(string), System.DateTime? schemaLastUpdate = default(System.DateTime?), System.DateTime? created = default(System.DateTime?), System.DateTime? started = default(System.DateTime?), System.DateTime? completed = default(System.DateTime?), long? rowLimit = default(long?), string source = default(string))
        {
            Oid = oid;
            DatamodelId = datamodelId;
            BuildType = buildType;
            Status = status;
            DatamodelTitle = datamodelTitle;
            DatamodelType = datamodelType;
            IndexSize = indexSize;
            InstanceId = instanceId;
            SchemaLastUpdate = schemaLastUpdate;
            Created = created;
            Started = started;
            Completed = completed;
            RowLimit = rowLimit;
            Source = source;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets unique ID assigned to the Build Task
        /// </summary>
        [JsonProperty(PropertyName = "oid")]
        public System.Guid? Oid { get; set; }

        /// <summary>
        /// Gets or sets datamodel unique ID
        /// </summary>
        [JsonProperty(PropertyName = "datamodelId")]
        public System.Guid? DatamodelId { get; set; }

        /// <summary>
        /// Gets or sets type of build performed. Possible values include:
        /// 'schema-changes', 'by-table', 'full', 'publish'
        /// </summary>
        [JsonProperty(PropertyName = "buildType")]
        public string BuildType { get; set; }

        /// <summary>
        /// Gets or sets current status of the task. Possible values include:
        /// 'pending', 'building', 'done', 'cancelled', 'failed'
        /// </summary>
        [JsonProperty(PropertyName = "status")]
        public string Status { get; set; }

        /// <summary>
        /// Gets or sets title (name) of the Datamodel being built
        /// </summary>
        [JsonProperty(PropertyName = "datamodelTitle")]
        public string DatamodelTitle { get; set; }

        /// <summary>
        /// Gets or sets datamodel type. Possible values include: 'extract',
        /// 'live'
        /// </summary>
        [JsonProperty(PropertyName = "datamodelType")]
        public string DatamodelType { get; set; }

        /// <summary>
        /// Gets or sets built Datamodel index size type (only applicable to
        /// `extract` type Datamodels). Possible values include: 'short',
        /// 'long'
        /// </summary>
        [JsonProperty(PropertyName = "indexSize")]
        public string IndexSize { get; set; }

        /// <summary>
        /// Gets or sets unique ID of physical instance performing the build
        /// task
        /// </summary>
        [JsonProperty(PropertyName = "instanceId")]
        public string InstanceId { get; set; }

        /// <summary>
        /// Gets or sets datetime of last schema update being built
        /// </summary>
        [JsonProperty(PropertyName = "schemaLastUpdate")]
        public System.DateTime? SchemaLastUpdate { get; set; }

        /// <summary>
        /// Gets or sets datetime of the task being created
        /// </summary>
        [JsonProperty(PropertyName = "created")]
        public System.DateTime? Created { get; set; }

        /// <summary>
        /// Gets or sets datetime of the task being started
        /// </summary>
        [JsonProperty(PropertyName = "started")]
        public System.DateTime? Started { get; set; }

        /// <summary>
        /// Gets or sets datetime of the task completing/stopping/failing
        /// </summary>
        [JsonProperty(PropertyName = "completed")]
        public System.DateTime? Completed { get; set; }

        /// <summary>
        /// Gets or sets for `extract` type Datamodels, the maximum number of
        /// rows to import per table, if set.
        /// </summary>
        [JsonProperty(PropertyName = "rowLimit")]
        public long? RowLimit { get; set; }

        /// <summary>
        /// Gets or sets what triggered the build task. Possible values
        /// include: 'rest', 'nextecm', 'scheduler', 'cli'
        /// </summary>
        [JsonProperty(PropertyName = "source")]
        public string Source { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Oid != null)
            {
                if (!System.Text.RegularExpressions.Regex.IsMatch(Oid.ToString(), "^[0-9a-f]{8}(-?[0-9a-f]{4}){3}-?[0-9a-f]{4,12}$"))
                {
                    throw new ValidationException(ValidationRules.Pattern, "Oid", "^[0-9a-f]{8}(-?[0-9a-f]{4}){3}-?[0-9a-f]{4,12}$");
                }
            }
            if (DatamodelId != null)
            {
                if (!System.Text.RegularExpressions.Regex.IsMatch(DatamodelId.ToString(), "^[0-9a-f]{8}(-?[0-9a-f]{4}){3}-?[0-9a-f]{4,12}$"))
                {
                    throw new ValidationException(ValidationRules.Pattern, "DatamodelId", "^[0-9a-f]{8}(-?[0-9a-f]{4}){3}-?[0-9a-f]{4,12}$");
                }
            }
        }
    }
}
