// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace UnOffSiSenseDotNet.V2_0.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class DatamodelSchemaOutput
    {
        /// <summary>
        /// Initializes a new instance of the DatamodelSchemaOutput class.
        /// </summary>
        public DatamodelSchemaOutput()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DatamodelSchemaOutput class.
        /// </summary>
        /// <param name="oid">Unique ID assigned to the Datamodel</param>
        /// <param name="title">Datamodel title (name)</param>
        /// <param name="server">*Legacy*: Hostname of server on which the
        /// Datamodel is created.
        /// **Only applies to Windows versions.**
        /// Defaults to `LocalHost`.</param>
        /// <param name="serverId">*Legacy*: Unique ID of server on which the
        /// Datamodel is created.
        /// **Only applies to Windows versions.**</param>
        /// <param name="shares">Array of Users/Groups with access to the
        /// Datamodel</param>
        /// <param name="lastUpdated">Datetime of most recent schema
        /// update</param>
        /// <param name="lastBuildTime">Datetime of most recent schema build
        /// attempt (for `extract` type Datamodels)</param>
        /// <param name="lastSuccessfulBuildTime">Datetime of most recent
        /// schema build success (for `extract` type Datamodels)</param>
        /// <param name="lastPublishTime">Datetime of most recent schema
        /// publish (for `live` type Datamodels)</param>
        /// <param name="type">Datamodel type; `extract` type Datamodels are
        /// formerly known as Elasticube. Possible values include: 'extract',
        /// 'custom'</param>
        /// <param name="creator">User that created the Datamodel
        /// Schema</param>
        /// <param name="datasets">Datasets defined in the Datamodel
        /// Schema</param>
        /// <param name="relations">Relations defined in the Datamodel
        /// Schema</param>
        /// <param name="relationType">Default relation type for the Datamodel.
        ///
        /// - `extract` type Datamodels have `regular` relations by default.
        ///
        /// - `live` type Datamodels have `direct` relations by default.
        /// Possible values include: 'direct', 'regular'</param>
        public DatamodelSchemaOutput(System.Guid? oid = default(System.Guid?), string title = default(string), string server = default(string), System.Guid? serverId = default(System.Guid?), IList<Party> shares = default(IList<Party>), System.DateTime? lastUpdated = default(System.DateTime?), System.DateTime? lastBuildTime = default(System.DateTime?), System.DateTime? lastSuccessfulBuildTime = default(System.DateTime?), System.DateTime? lastPublishTime = default(System.DateTime?), string type = default(string), Party creator = default(Party), IList<DatasetOutput> datasets = default(IList<DatasetOutput>), IList<RelationOutput> relations = default(IList<RelationOutput>), string relationType = default(string))
        {
            Oid = oid;
            Title = title;
            Server = server;
            ServerId = serverId;
            Shares = shares;
            LastUpdated = lastUpdated;
            LastBuildTime = lastBuildTime;
            LastSuccessfulBuildTime = lastSuccessfulBuildTime;
            LastPublishTime = lastPublishTime;
            Type = type;
            Creator = creator;
            Datasets = datasets;
            Relations = relations;
            RelationType = relationType;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets unique ID assigned to the Datamodel
        /// </summary>
        [JsonProperty(PropertyName = "oid")]
        public System.Guid? Oid { get; set; }

        /// <summary>
        /// Gets or sets datamodel title (name)
        /// </summary>
        [JsonProperty(PropertyName = "title")]
        public string Title { get; set; }

        /// <summary>
        /// Gets or sets *Legacy*: Hostname of server on which the Datamodel is
        /// created.
        /// **Only applies to Windows versions.**
        /// Defaults to `LocalHost`.
        /// </summary>
        [JsonProperty(PropertyName = "server")]
        public string Server { get; set; }

        /// <summary>
        /// Gets or sets *Legacy*: Unique ID of server on which the Datamodel
        /// is created.
        /// **Only applies to Windows versions.**
        /// </summary>
        [JsonProperty(PropertyName = "serverId")]
        public System.Guid? ServerId { get; set; }

        /// <summary>
        /// Gets or sets array of Users/Groups with access to the Datamodel
        /// </summary>
        [JsonProperty(PropertyName = "shares")]
        public IList<Party> Shares { get; set; }

        /// <summary>
        /// Gets or sets datetime of most recent schema update
        /// </summary>
        [JsonProperty(PropertyName = "lastUpdated")]
        public System.DateTime? LastUpdated { get; set; }

        /// <summary>
        /// Gets or sets datetime of most recent schema build attempt (for
        /// `extract` type Datamodels)
        /// </summary>
        [JsonProperty(PropertyName = "lastBuildTime")]
        public System.DateTime? LastBuildTime { get; set; }

        /// <summary>
        /// Gets or sets datetime of most recent schema build success (for
        /// `extract` type Datamodels)
        /// </summary>
        [JsonProperty(PropertyName = "lastSuccessfulBuildTime")]
        public System.DateTime? LastSuccessfulBuildTime { get; set; }

        /// <summary>
        /// Gets or sets datetime of most recent schema publish (for `live`
        /// type Datamodels)
        /// </summary>
        [JsonProperty(PropertyName = "lastPublishTime")]
        public System.DateTime? LastPublishTime { get; set; }

        /// <summary>
        /// Gets or sets datamodel type; `extract` type Datamodels are formerly
        /// known as Elasticube. Possible values include: 'extract', 'custom'
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; set; }

        /// <summary>
        /// Gets or sets user that created the Datamodel Schema
        /// </summary>
        [JsonProperty(PropertyName = "creator")]
        public Party Creator { get; set; }

        /// <summary>
        /// Gets or sets datasets defined in the Datamodel Schema
        /// </summary>
        [JsonProperty(PropertyName = "datasets")]
        public IList<DatasetOutput> Datasets { get; set; }

        /// <summary>
        /// Gets or sets relations defined in the Datamodel Schema
        /// </summary>
        [JsonProperty(PropertyName = "relations")]
        public IList<RelationOutput> Relations { get; set; }

        /// <summary>
        /// Gets or sets default relation type for the Datamodel.
        ///
        /// - `extract` type Datamodels have `regular` relations by default.
        ///
        /// - `live` type Datamodels have `direct` relations by default.
        /// Possible values include: 'direct', 'regular'
        /// </summary>
        [JsonProperty(PropertyName = "relationType")]
        public string RelationType { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Oid != null)
            {
                if (!System.Text.RegularExpressions.Regex.IsMatch(Oid.ToString(), "^[0-9a-f]{8}(-?[0-9a-f]{4}){3}-?[0-9a-f]{4,12}$"))
                {
                    throw new ValidationException(ValidationRules.Pattern, "Oid", "^[0-9a-f]{8}(-?[0-9a-f]{4}){3}-?[0-9a-f]{4,12}$");
                }
            }
            if (ServerId != null)
            {
                if (!System.Text.RegularExpressions.Regex.IsMatch(ServerId.ToString(), "^[0-9a-f]{8}(-?[0-9a-f]{4}){3}-?[0-9a-f]{4,12}$"))
                {
                    throw new ValidationException(ValidationRules.Pattern, "ServerId", "^[0-9a-f]{8}(-?[0-9a-f]{4}){3}-?[0-9a-f]{4,12}$");
                }
            }
            if (Shares != null)
            {
                foreach (var element in Shares)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (Creator != null)
            {
                Creator.Validate();
            }
            if (Datasets != null)
            {
                foreach (var element1 in Datasets)
                {
                    if (element1 != null)
                    {
                        element1.Validate();
                    }
                }
            }
            if (Relations != null)
            {
                foreach (var element2 in Relations)
                {
                    if (element2 != null)
                    {
                        element2.Validate();
                    }
                }
            }
        }
    }
}
