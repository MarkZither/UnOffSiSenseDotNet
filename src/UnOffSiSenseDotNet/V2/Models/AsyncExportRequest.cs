// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace UnOffSiSenseDotNet.V2_0.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// AsyncExportRequest
    /// </summary>
    public partial class AsyncExportRequest
    {
        /// <summary>
        /// Initializes a new instance of the AsyncExportRequest class.
        /// </summary>
        public AsyncExportRequest()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AsyncExportRequest class.
        /// </summary>
        /// <param name="local">If this property is present, export will be to
        /// a local file</param>
        /// <param name="oid">Unique ID assigned to the Export task</param>
        /// <param name="datamodelId">Unique ID of Datamodel to export</param>
        /// <param name="type">What should be exported. Possible values
        /// include: 'schema-latest', 'schema-running', 'full'</param>
        /// <param name="status">Status of export process. Possible values
        /// include: 'exporting', 'done', 'failed'</param>
        public AsyncExportRequest(string dataSourceId = default(string), LocalExportConfig local = default(LocalExportConfig), System.Guid? oid = default(System.Guid?), System.Guid? datamodelId = default(System.Guid?), string type = default(string), string status = default(string))
        {
            DataSourceId = dataSourceId;
            Local = local;
            Oid = oid;
            DatamodelId = datamodelId;
            Type = type;
            Status = status;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "dataSourceId")]
        public string DataSourceId { get; set; }

        /// <summary>
        /// Gets or sets if this property is present, export will be to a local
        /// file
        /// </summary>
        [JsonProperty(PropertyName = "local")]
        public LocalExportConfig Local { get; set; }

        /// <summary>
        /// Gets or sets unique ID assigned to the Export task
        /// </summary>
        [JsonProperty(PropertyName = "oid")]
        public System.Guid? Oid { get; set; }

        /// <summary>
        /// Gets or sets unique ID of Datamodel to export
        /// </summary>
        [JsonProperty(PropertyName = "datamodelId")]
        public System.Guid? DatamodelId { get; set; }

        /// <summary>
        /// Gets or sets what should be exported. Possible values include:
        /// 'schema-latest', 'schema-running', 'full'
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; set; }

        /// <summary>
        /// Gets or sets status of export process. Possible values include:
        /// 'exporting', 'done', 'failed'
        /// </summary>
        [JsonProperty(PropertyName = "status")]
        public string Status { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Oid != null)
            {
                if (!System.Text.RegularExpressions.Regex.IsMatch(Oid.ToString(), "^[0-9a-f]{8}(-?[0-9a-f]{4}){3}-?[0-9a-f]{4,12}$"))
                {
                    throw new ValidationException(ValidationRules.Pattern, "Oid", "^[0-9a-f]{8}(-?[0-9a-f]{4}){3}-?[0-9a-f]{4,12}$");
                }
            }
            if (DatamodelId != null)
            {
                if (!System.Text.RegularExpressions.Regex.IsMatch(DatamodelId.ToString(), "^[0-9a-f]{8}(-?[0-9a-f]{4}){3}-?[0-9a-f]{4,12}$"))
                {
                    throw new ValidationException(ValidationRules.Pattern, "DatamodelId", "^[0-9a-f]{8}(-?[0-9a-f]{4}){3}-?[0-9a-f]{4,12}$");
                }
            }
        }
    }
}
