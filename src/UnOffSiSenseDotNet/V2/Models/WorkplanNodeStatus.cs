// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace UnOffSiSenseDotNet.V2_0.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// WorkplanNodeStatus
    /// </summary>
    public partial class WorkplanNodeStatus
    {
        /// <summary>
        /// Initializes a new instance of the WorkplanNodeStatus class.
        /// </summary>
        public WorkplanNodeStatus()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the WorkplanNodeStatus class.
        /// </summary>
        /// <param name="nodeId">Task node ID</param>
        /// <param name="nodeState">Task node's status. Possible values
        /// include: 'INIT', 'READY', 'RUNNING', 'COMPLETED', 'FAILED',
        /// 'CANCELLED'</param>
        /// <param name="startTime">Task start time (set only if task already
        /// started)</param>
        /// <param name="endTime">Task end time (set only if task already
        /// ended)</param>
        /// <param name="errorMessage">Error message (set only in case of
        /// failure)</param>
        /// <param name="nodeCustomAttributes">Custom attributes per workplan
        /// type. Notice the attributes can be different according to the
        /// specific workplan</param>
        public WorkplanNodeStatus(string nodeId, string nodeState, string startTime, string endTime, string errorMessage, IDictionary<string, string> nodeCustomAttributes = default(IDictionary<string, string>))
        {
            NodeId = nodeId;
            NodeState = nodeState;
            StartTime = startTime;
            EndTime = endTime;
            ErrorMessage = errorMessage;
            NodeCustomAttributes = nodeCustomAttributes;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets task node ID
        /// </summary>
        [JsonProperty(PropertyName = "nodeId")]
        public string NodeId { get; set; }

        /// <summary>
        /// Gets or sets task node's status. Possible values include: 'INIT',
        /// 'READY', 'RUNNING', 'COMPLETED', 'FAILED', 'CANCELLED'
        /// </summary>
        [JsonProperty(PropertyName = "nodeState")]
        public string NodeState { get; set; }

        /// <summary>
        /// Gets or sets task start time (set only if task already started)
        /// </summary>
        [JsonProperty(PropertyName = "startTime")]
        public string StartTime { get; set; }

        /// <summary>
        /// Gets or sets task end time (set only if task already ended)
        /// </summary>
        [JsonProperty(PropertyName = "endTime")]
        public string EndTime { get; set; }

        /// <summary>
        /// Gets or sets error message (set only in case of failure)
        /// </summary>
        [JsonProperty(PropertyName = "errorMessage")]
        public string ErrorMessage { get; set; }

        /// <summary>
        /// Gets or sets custom attributes per workplan type. Notice the
        /// attributes can be different according to the specific workplan
        /// </summary>
        [JsonProperty(PropertyName = "nodeCustomAttributes")]
        public IDictionary<string, string> NodeCustomAttributes { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (NodeId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "NodeId");
            }
            if (NodeState == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "NodeState");
            }
            if (StartTime == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "StartTime");
            }
            if (EndTime == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "EndTime");
            }
            if (ErrorMessage == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ErrorMessage");
            }
        }
    }
}
