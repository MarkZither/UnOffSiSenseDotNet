// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace UnOffSiSenseDotNet.V2_0.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class ColumnInput
    {
        /// <summary>
        /// Initializes a new instance of the ColumnInput class.
        /// </summary>
        public ColumnInput()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ColumnInput class.
        /// </summary>
        /// <param name="id">Original Column name/ID in the data source</param>
        /// <param name="name">Column name - this name will be used by
        /// queries</param>
        /// <param name="type">Column datatype, according to the following
        /// list:
        ///
        /// - BigInt : 0,
        ///
        /// - Binary : 1,
        ///
        /// - Bit : 2,
        ///
        /// - Char : 3,
        ///
        /// - DateTime : 4,
        ///
        /// - Decimal : 5,
        ///
        /// - Float : 6,
        ///
        /// - Image : 7,
        ///
        /// - Int : 8,
        ///
        /// - Money : 9,
        ///
        /// - NChar : 10,
        ///
        /// - NText : 11,
        ///
        /// - NVarChar : 12,
        ///
        /// - Real : 13,
        ///
        /// - UniqueIdentifier : 14,
        ///
        /// - SmallDateTime : 15,
        ///
        /// - SmallInt : 16,
        ///
        /// - SmallMoney : 17,
        ///
        /// - Text : 18,
        ///
        /// - Timestamp : 19,
        ///
        /// - TinyInt : 20,
        ///
        /// - VarBinary : 21,
        ///
        /// - VarChar : 22,
        ///
        /// - Variant : 23,
        ///
        /// - Xml : 25,
        ///
        /// - Udt : 29,
        ///
        /// - Structured : 30,
        ///
        /// - Date : 31,
        ///
        /// - Time : 32,
        ///
        /// - DateTime2 : 33,
        ///
        /// - DateTimeOffset : 34</param>
        /// <param name="size">Field size - applicalbe for field types such as
        /// `nvarchar` with predetermined field sizes</param>
        /// <param name="precision">Decimal point percision - applicable for
        /// `decimal`, `float` etc. field types</param>
        /// <param name="hidden">Hide the column - if `true` the column will be
        /// visible only in Datamodel schema editor and cannot be
        /// queried</param>
        /// <param name="indexed">Indexed columns are stored as codes, linked
        /// to a decode table.
        /// Usually used for text fields with repeating values</param>
        /// <param name="description">Column description</param>
        /// <param name="import">When set to `false` the column will be skipped
        /// when building.
        /// Only applies to `extract` type tables</param>
        /// <param name="isCustom">`true` for SQL expression-based custom
        /// Columns</param>
        /// <param name="expression">**Only applicable to `custom` type
        /// columns:** SQL expression</param>
        public ColumnInput(string id, string name = default(string), int? type = default(int?), int? size = default(int?), int? precision = default(int?), int? scale = default(int?), bool? hidden = default(bool?), bool? indexed = default(bool?), string description = default(string), bool? import = default(bool?), bool? isCustom = default(bool?), string expression = default(string))
        {
            Id = id;
            Name = name;
            Type = type;
            Size = size;
            Precision = precision;
            Scale = scale;
            Hidden = hidden;
            Indexed = indexed;
            Description = description;
            Import = import;
            IsCustom = isCustom;
            Expression = expression;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets original Column name/ID in the data source
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or sets column name - this name will be used by queries
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets column datatype, according to the following list:
        ///
        /// - BigInt : 0,
        ///
        /// - Binary : 1,
        ///
        /// - Bit : 2,
        ///
        /// - Char : 3,
        ///
        /// - DateTime : 4,
        ///
        /// - Decimal : 5,
        ///
        /// - Float : 6,
        ///
        /// - Image : 7,
        ///
        /// - Int : 8,
        ///
        /// - Money : 9,
        ///
        /// - NChar : 10,
        ///
        /// - NText : 11,
        ///
        /// - NVarChar : 12,
        ///
        /// - Real : 13,
        ///
        /// - UniqueIdentifier : 14,
        ///
        /// - SmallDateTime : 15,
        ///
        /// - SmallInt : 16,
        ///
        /// - SmallMoney : 17,
        ///
        /// - Text : 18,
        ///
        /// - Timestamp : 19,
        ///
        /// - TinyInt : 20,
        ///
        /// - VarBinary : 21,
        ///
        /// - VarChar : 22,
        ///
        /// - Variant : 23,
        ///
        /// - Xml : 25,
        ///
        /// - Udt : 29,
        ///
        /// - Structured : 30,
        ///
        /// - Date : 31,
        ///
        /// - Time : 32,
        ///
        /// - DateTime2 : 33,
        ///
        /// - DateTimeOffset : 34
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public int? Type { get; set; }

        /// <summary>
        /// Gets or sets field size - applicalbe for field types such as
        /// `nvarchar` with predetermined field sizes
        /// </summary>
        [JsonProperty(PropertyName = "size")]
        public int? Size { get; set; }

        /// <summary>
        /// Gets or sets decimal point percision - applicable for `decimal`,
        /// `float` etc. field types
        /// </summary>
        [JsonProperty(PropertyName = "precision")]
        public int? Precision { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "scale")]
        public int? Scale { get; set; }

        /// <summary>
        /// Gets or sets hide the column - if `true` the column will be visible
        /// only in Datamodel schema editor and cannot be queried
        /// </summary>
        [JsonProperty(PropertyName = "hidden")]
        public bool? Hidden { get; set; }

        /// <summary>
        /// Gets or sets indexed columns are stored as codes, linked to a
        /// decode table.
        /// Usually used for text fields with repeating values
        /// </summary>
        [JsonProperty(PropertyName = "indexed")]
        public bool? Indexed { get; set; }

        /// <summary>
        /// Gets or sets column description
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets when set to `false` the column will be skipped when
        /// building.
        /// Only applies to `extract` type tables
        /// </summary>
        [JsonProperty(PropertyName = "import")]
        public bool? Import { get; set; }

        /// <summary>
        /// Gets or sets `true` for SQL expression-based custom Columns
        /// </summary>
        [JsonProperty(PropertyName = "isCustom")]
        public bool? IsCustom { get; set; }

        /// <summary>
        /// Gets or sets **Only applicable to `custom` type columns:** SQL
        /// expression
        /// </summary>
        [JsonProperty(PropertyName = "expression")]
        public string Expression { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Id == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Id");
            }
        }
    }
}
