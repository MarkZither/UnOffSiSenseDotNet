// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace UnOffSiSenseDotNet.V2_0.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Node
    /// </summary>
    public partial class Node
    {
        /// <summary>
        /// Initializes a new instance of the Node class.
        /// </summary>
        public Node()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Node class.
        /// </summary>
        /// <param name="hostName">Node hostname or DNS address.</param>
        /// <param name="nodeRoles">An array of roles associated with the
        /// Node</param>
        /// <param name="oid">Unique ID allocated to the Node</param>
        /// <param name="name">Name of the node</param>
        /// <param name="active">Indicates whether the Node is an active Node
        /// within the Cluster</param>
        /// <param name="amountOfCpu">Total number of CPU cores on the
        /// Node</param>
        /// <param name="amountOfRamInMb">Total MBs of RAM on the Node</param>
        /// <param name="architecture">Node's CPU architecture. Possible values
        /// include: 'amd64'</param>
        /// <param name="containerRuntimeVersion">Container Runtime version
        /// installed on the Node</param>
        /// <param name="hostIp">Node IPv4 Address</param>
        /// <param name="kernelVersion">OS kernel version installed on the
        /// Node</param>
        /// <param name="kubeProxyVersion">Kubernetes Proxy version installed
        /// on the Node</param>
        /// <param name="kubeletVersion">Kubernetes Kubelet version installed
        /// on the Node</param>
        /// <param name="operatingSystem">OS type installed on the Node.
        /// Possible values include: 'linux'</param>
        /// <param name="osImage">OS version installed on the Node</param>
        public Node(string hostName = default(string), IList<string> nodeRoles = default(IList<string>), System.Guid? oid = default(System.Guid?), string name = default(string), bool? active = default(bool?), int? amountOfCpu = default(int?), int? amountOfRamInMb = default(int?), string architecture = default(string), string containerRuntimeVersion = default(string), string hostIp = default(string), string kernelVersion = default(string), string kubeProxyVersion = default(string), string kubeletVersion = default(string), string operatingSystem = default(string), string osImage = default(string))
        {
            HostName = hostName;
            NodeRoles = nodeRoles;
            Oid = oid;
            Name = name;
            Active = active;
            AmountOfCpu = amountOfCpu;
            AmountOfRamInMb = amountOfRamInMb;
            Architecture = architecture;
            ContainerRuntimeVersion = containerRuntimeVersion;
            HostIp = hostIp;
            KernelVersion = kernelVersion;
            KubeProxyVersion = kubeProxyVersion;
            KubeletVersion = kubeletVersion;
            OperatingSystem = operatingSystem;
            OsImage = osImage;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets node hostname or DNS address.
        /// </summary>
        [JsonProperty(PropertyName = "hostName")]
        public string HostName { get; set; }

        /// <summary>
        /// Gets or sets an array of roles associated with the Node
        /// </summary>
        [JsonProperty(PropertyName = "nodeRoles")]
        public IList<string> NodeRoles { get; set; }

        /// <summary>
        /// Gets or sets unique ID allocated to the Node
        /// </summary>
        [JsonProperty(PropertyName = "oid")]
        public System.Guid? Oid { get; set; }

        /// <summary>
        /// Gets or sets name of the node
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets indicates whether the Node is an active Node within
        /// the Cluster
        /// </summary>
        [JsonProperty(PropertyName = "active")]
        public bool? Active { get; set; }

        /// <summary>
        /// Gets or sets total number of CPU cores on the Node
        /// </summary>
        [JsonProperty(PropertyName = "amountOfCpu")]
        public int? AmountOfCpu { get; set; }

        /// <summary>
        /// Gets or sets total MBs of RAM on the Node
        /// </summary>
        [JsonProperty(PropertyName = "amountOfRamInMb")]
        public int? AmountOfRamInMb { get; set; }

        /// <summary>
        /// Gets or sets node's CPU architecture. Possible values include:
        /// 'amd64'
        /// </summary>
        [JsonProperty(PropertyName = "architecture")]
        public string Architecture { get; set; }

        /// <summary>
        /// Gets or sets container Runtime version installed on the Node
        /// </summary>
        [JsonProperty(PropertyName = "containerRuntimeVersion")]
        public string ContainerRuntimeVersion { get; set; }

        /// <summary>
        /// Gets or sets node IPv4 Address
        /// </summary>
        [JsonProperty(PropertyName = "hostIp")]
        public string HostIp { get; set; }

        /// <summary>
        /// Gets or sets OS kernel version installed on the Node
        /// </summary>
        [JsonProperty(PropertyName = "kernelVersion")]
        public string KernelVersion { get; set; }

        /// <summary>
        /// Gets or sets kubernetes Proxy version installed on the Node
        /// </summary>
        [JsonProperty(PropertyName = "kubeProxyVersion")]
        public string KubeProxyVersion { get; set; }

        /// <summary>
        /// Gets or sets kubernetes Kubelet version installed on the Node
        /// </summary>
        [JsonProperty(PropertyName = "kubeletVersion")]
        public string KubeletVersion { get; set; }

        /// <summary>
        /// Gets or sets OS type installed on the Node. Possible values
        /// include: 'linux'
        /// </summary>
        [JsonProperty(PropertyName = "operatingSystem")]
        public string OperatingSystem { get; set; }

        /// <summary>
        /// Gets or sets OS version installed on the Node
        /// </summary>
        [JsonProperty(PropertyName = "osImage")]
        public string OsImage { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Oid != null)
            {
                if (!System.Text.RegularExpressions.Regex.IsMatch(Oid.ToString(), "^[0-9a-f]{8}(-?[0-9a-f]{4}){3}-?[0-9a-f]{4,12}$"))
                {
                    throw new ValidationException(ValidationRules.Pattern, "Oid", "^[0-9a-f]{8}(-?[0-9a-f]{4}){3}-?[0-9a-f]{4,12}$");
                }
            }
            if (HostIp != null)
            {
                if (!System.Text.RegularExpressions.Regex.IsMatch(HostIp.ToString(), "^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$"))
                {
                    throw new ValidationException(ValidationRules.Pattern, "HostIp", "^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$");
                }
            }
        }
    }
}
