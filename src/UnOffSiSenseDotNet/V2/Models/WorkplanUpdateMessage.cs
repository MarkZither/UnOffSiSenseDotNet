// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace UnOffSiSenseDotNet.V2_0.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// WorkplanUpdateMessage
    /// </summary>
    public partial class WorkplanUpdateMessage
    {
        /// <summary>
        /// Initializes a new instance of the WorkplanUpdateMessage class.
        /// </summary>
        public WorkplanUpdateMessage()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the WorkplanUpdateMessage class.
        /// </summary>
        /// <param name="workplanId">Workplan's unique ID</param>
        /// <param name="timestamp">Message timestamp</param>
        /// <param name="type">Message type. Possible values include:
        /// 'WORKPLAN_EXPLAIN_GRAPH', 'WORKPLAN_EXPLAIN_UPDATE'</param>
        /// <param name="elementType">Possible values include: 'WORKPLAN',
        /// 'NODE'</param>
        /// <param name="updateType">Possible values include: 'READY',
        /// 'PENDING', 'START', 'PROGRESS', 'END'</param>
        /// <param name="workplanStatus">Workplan status</param>
        public WorkplanUpdateMessage(string workplanId, string timestamp, string type, string elementType, string updateType, WorkplanStatus workplanStatus)
        {
            WorkplanId = workplanId;
            Timestamp = timestamp;
            Type = type;
            ElementType = elementType;
            UpdateType = updateType;
            WorkplanStatus = workplanStatus;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets workplan's unique ID
        /// </summary>
        [JsonProperty(PropertyName = "workplanId")]
        public string WorkplanId { get; set; }

        /// <summary>
        /// Gets or sets message timestamp
        /// </summary>
        [JsonProperty(PropertyName = "timestamp")]
        public string Timestamp { get; set; }

        /// <summary>
        /// Gets or sets message type. Possible values include:
        /// 'WORKPLAN_EXPLAIN_GRAPH', 'WORKPLAN_EXPLAIN_UPDATE'
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'WORKPLAN', 'NODE'
        /// </summary>
        [JsonProperty(PropertyName = "elementType")]
        public string ElementType { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'READY', 'PENDING', 'START',
        /// 'PROGRESS', 'END'
        /// </summary>
        [JsonProperty(PropertyName = "updateType")]
        public string UpdateType { get; set; }

        /// <summary>
        /// Gets or sets workplan status
        /// </summary>
        [JsonProperty(PropertyName = "workplanStatus")]
        public WorkplanStatus WorkplanStatus { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (WorkplanId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "WorkplanId");
            }
            if (Timestamp == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Timestamp");
            }
            if (Type == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Type");
            }
            if (ElementType == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ElementType");
            }
            if (UpdateType == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "UpdateType");
            }
            if (WorkplanStatus == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "WorkplanStatus");
            }
            if (WorkplanStatus != null)
            {
                WorkplanStatus.Validate();
            }
        }
    }
}
