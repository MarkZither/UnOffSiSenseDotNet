// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace UnOffSiSenseDotNet.V2_0.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class DataGroupOutput
    {
        /// <summary>
        /// Initializes a new instance of the DataGroupOutput class.
        /// </summary>
        public DataGroupOutput()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DataGroupOutput class.
        /// </summary>
        /// <param name="oid">Unique ID allocated to the Data Group</param>
        /// <param name="name">Data Group name</param>
        /// <param name="defaultProperty">`true` for the default Data Group.
        /// Only one default Data Group can exist at any given time</param>
        /// <param name="routingPolicy">Method by which queries are distributed
        /// within the Data Group. Possible values include:
        /// 'round-robin'</param>
        /// <param name="buildConnectorRunningMode">Connectors mode. Possible
        /// values include: 'system-connectors', 'internal-connectors'</param>
        /// <param name="indexSize">Short/Long Index mode. Possible values
        /// include: 'short', 'long'</param>
        /// <param name="recyclerEnabled">Is 'Sisense Recycler' caching
        /// enabled</param>
        /// <param name="datamodels">Array of Datamodel IDs associated with the
        /// Data Group</param>
        /// <param name="buildNodeResourceAllocation">Resource allocation rules
        /// for Build Nodes in the Data Group</param>
        /// <param name="queryNodeResourceAllocation">Resource allocation rules
        /// for Query Nodes in the Data Group</param>
        /// <param name="queryQualityOfService">QoS configuration for Query
        /// Nodes in the Data Group</param>
        /// <param name="queryNodes">Array of Node IDs associated with the Data
        /// Group as Query Nodes</param>
        /// <param name="buildNodes">Array of Node IDs associated with the Data
        /// Group as Build Nodes</param>
        public DataGroupOutput(System.Guid? oid = default(System.Guid?), string name = default(string), bool? defaultProperty = default(bool?), string routingPolicy = default(string), string buildConnectorRunningMode = default(string), string indexSize = default(string), bool? recyclerEnabled = default(bool?), IList<System.Guid?> datamodels = default(IList<System.Guid?>), NodeResourceAllocation buildNodeResourceAllocation = default(NodeResourceAllocation), NodeResourceAllocation queryNodeResourceAllocation = default(NodeResourceAllocation), DataGroupOutputQueryQualityOfService queryQualityOfService = default(DataGroupOutputQueryQualityOfService), IList<System.Guid?> queryNodes = default(IList<System.Guid?>), IList<System.Guid?> buildNodes = default(IList<System.Guid?>))
        {
            Oid = oid;
            Name = name;
            DefaultProperty = defaultProperty;
            RoutingPolicy = routingPolicy;
            BuildConnectorRunningMode = buildConnectorRunningMode;
            IndexSize = indexSize;
            RecyclerEnabled = recyclerEnabled;
            Datamodels = datamodels;
            BuildNodeResourceAllocation = buildNodeResourceAllocation;
            QueryNodeResourceAllocation = queryNodeResourceAllocation;
            QueryQualityOfService = queryQualityOfService;
            QueryNodes = queryNodes;
            BuildNodes = buildNodes;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets unique ID allocated to the Data Group
        /// </summary>
        [JsonProperty(PropertyName = "oid")]
        public System.Guid? Oid { get; set; }

        /// <summary>
        /// Gets or sets data Group name
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets `true` for the default Data Group.
        /// Only one default Data Group can exist at any given time
        /// </summary>
        [JsonProperty(PropertyName = "default")]
        public bool? DefaultProperty { get; set; }

        /// <summary>
        /// Gets or sets method by which queries are distributed within the
        /// Data Group. Possible values include: 'round-robin'
        /// </summary>
        [JsonProperty(PropertyName = "routingPolicy")]
        public string RoutingPolicy { get; set; }

        /// <summary>
        /// Gets or sets connectors mode. Possible values include:
        /// 'system-connectors', 'internal-connectors'
        /// </summary>
        [JsonProperty(PropertyName = "buildConnectorRunningMode")]
        public string BuildConnectorRunningMode { get; set; }

        /// <summary>
        /// Gets or sets short/Long Index mode. Possible values include:
        /// 'short', 'long'
        /// </summary>
        [JsonProperty(PropertyName = "indexSize")]
        public string IndexSize { get; set; }

        /// <summary>
        /// Gets or sets is 'Sisense Recycler' caching enabled
        /// </summary>
        [JsonProperty(PropertyName = "recyclerEnabled")]
        public bool? RecyclerEnabled { get; set; }

        /// <summary>
        /// Gets or sets array of Datamodel IDs associated with the Data Group
        /// </summary>
        [JsonProperty(PropertyName = "datamodels")]
        public IList<System.Guid?> Datamodels { get; set; }

        /// <summary>
        /// Gets or sets resource allocation rules for Build Nodes in the Data
        /// Group
        /// </summary>
        [JsonProperty(PropertyName = "buildNodeResourceAllocation")]
        public NodeResourceAllocation BuildNodeResourceAllocation { get; set; }

        /// <summary>
        /// Gets or sets resource allocation rules for Query Nodes in the Data
        /// Group
        /// </summary>
        [JsonProperty(PropertyName = "queryNodeResourceAllocation")]
        public NodeResourceAllocation QueryNodeResourceAllocation { get; set; }

        /// <summary>
        /// Gets or sets qoS configuration for Query Nodes in the Data Group
        /// </summary>
        [JsonProperty(PropertyName = "queryQualityOfService")]
        public DataGroupOutputQueryQualityOfService QueryQualityOfService { get; set; }

        /// <summary>
        /// Gets or sets array of Node IDs associated with the Data Group as
        /// Query Nodes
        /// </summary>
        [JsonProperty(PropertyName = "queryNodes")]
        public IList<System.Guid?> QueryNodes { get; set; }

        /// <summary>
        /// Gets or sets array of Node IDs associated with the Data Group as
        /// Build Nodes
        /// </summary>
        [JsonProperty(PropertyName = "buildNodes")]
        public IList<System.Guid?> BuildNodes { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Oid != null)
            {
                if (!System.Text.RegularExpressions.Regex.IsMatch(Oid.ToString(), "^[0-9a-f]{8}(-?[0-9a-f]{4}){3}-?[0-9a-f]{4,12}$"))
                {
                    throw new ValidationException(ValidationRules.Pattern, "Oid", "^[0-9a-f]{8}(-?[0-9a-f]{4}){3}-?[0-9a-f]{4,12}$");
                }
            }
            if (BuildNodeResourceAllocation != null)
            {
                BuildNodeResourceAllocation.Validate();
            }
            if (QueryNodeResourceAllocation != null)
            {
                QueryNodeResourceAllocation.Validate();
            }
        }
    }
}
