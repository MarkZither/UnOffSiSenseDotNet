// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace UnOffSiSenseDotNet.V2_0.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// WorkplanState
    /// </summary>
    public partial class WorkplanState
    {
        /// <summary>
        /// Initializes a new instance of the WorkplanState class.
        /// </summary>
        public WorkplanState()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the WorkplanState class.
        /// </summary>
        /// <param name="state">Possible values include: 'INIT', 'RUNNING',
        /// 'FINALIZING', 'COMPLETED', 'FAILED', 'CANCELED'</param>
        public WorkplanState(string cancelMessage = default(string), bool? cancelled = default(bool?), bool? completed = default(bool?), Throwable exception = default(Throwable), bool? failed = default(bool?), bool? finalizing = default(bool?), string state = default(string))
        {
            CancelMessage = cancelMessage;
            Cancelled = cancelled;
            Completed = completed;
            Exception = exception;
            Failed = failed;
            Finalizing = finalizing;
            State = state;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "cancelMessage")]
        public string CancelMessage { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "cancelled")]
        public bool? Cancelled { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "completed")]
        public bool? Completed { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "exception")]
        public Throwable Exception { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "failed")]
        public bool? Failed { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "finalizing")]
        public bool? Finalizing { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'INIT', 'RUNNING',
        /// 'FINALIZING', 'COMPLETED', 'FAILED', 'CANCELED'
        /// </summary>
        [JsonProperty(PropertyName = "state")]
        public string State { get; set; }

    }
}
