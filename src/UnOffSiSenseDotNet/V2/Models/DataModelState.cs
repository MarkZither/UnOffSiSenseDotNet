// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace UnOffSiSenseDotNet.V2_0.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Current state of the Datamodel
    /// </summary>
    public partial class DatamodelState
    {
        /// <summary>
        /// Initializes a new instance of the DatamodelState class.
        /// </summary>
        public DatamodelState()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DatamodelState class.
        /// </summary>
        /// <param name="status">Datamodel's current status. Possible values
        /// include: 'draft', 'building', 'running', 'stopping', 'stopped',
        /// 'invalid'</param>
        /// <param name="uptime">Time since Datamodel was made queriable
        /// Using 'd.hh:mm:ss' format</param>
        /// <param name="isRestarting">True when Datamodel is being
        /// restarted</param>
        /// <param name="isBuilding">True when Datamodel is building (applies
        /// only to Extract type)</param>
        /// <param name="isRunning">True when the Datamodel can be
        /// queried</param>
        /// <param name="isStopping">True when the Datamodel is being
        /// stopped</param>
        /// <param name="isInvalid">True when a build resulted in a
        /// corrupt/invalid Datamodel</param>
        /// <param name="canStart">True when the Datamodel is stopped and can
        /// be started</param>
        public DatamodelState(string status = default(string), string uptime = default(string), bool? isRestarting = default(bool?), bool? isBuilding = default(bool?), bool? isRunning = default(bool?), bool? isStopping = default(bool?), bool? isInvalid = default(bool?), bool? canStart = default(bool?))
        {
            Status = status;
            Uptime = uptime;
            IsRestarting = isRestarting;
            IsBuilding = isBuilding;
            IsRunning = isRunning;
            IsStopping = isStopping;
            IsInvalid = isInvalid;
            CanStart = canStart;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets datamodel's current status. Possible values include:
        /// 'draft', 'building', 'running', 'stopping', 'stopped', 'invalid'
        /// </summary>
        [JsonProperty(PropertyName = "status")]
        public string Status { get; set; }

        /// <summary>
        /// Gets or sets time since Datamodel was made queriable
        /// Using 'd.hh:mm:ss' format
        /// </summary>
        [JsonProperty(PropertyName = "uptime")]
        public string Uptime { get; set; }

        /// <summary>
        /// Gets or sets true when Datamodel is being restarted
        /// </summary>
        [JsonProperty(PropertyName = "isRestarting")]
        public bool? IsRestarting { get; set; }

        /// <summary>
        /// Gets or sets true when Datamodel is building (applies only to
        /// Extract type)
        /// </summary>
        [JsonProperty(PropertyName = "isBuilding")]
        public bool? IsBuilding { get; set; }

        /// <summary>
        /// Gets or sets true when the Datamodel can be queried
        /// </summary>
        [JsonProperty(PropertyName = "isRunning")]
        public bool? IsRunning { get; set; }

        /// <summary>
        /// Gets or sets true when the Datamodel is being stopped
        /// </summary>
        [JsonProperty(PropertyName = "isStopping")]
        public bool? IsStopping { get; set; }

        /// <summary>
        /// Gets or sets true when a build resulted in a corrupt/invalid
        /// Datamodel
        /// </summary>
        [JsonProperty(PropertyName = "isInvalid")]
        public bool? IsInvalid { get; set; }

        /// <summary>
        /// Gets or sets true when the Datamodel is stopped and can be started
        /// </summary>
        [JsonProperty(PropertyName = "canStart")]
        public bool? CanStart { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Uptime != null)
            {
                if (!System.Text.RegularExpressions.Regex.IsMatch(Uptime, "^\\d+\\.\\d{2}:\\d{2}:\\d{2}"))
                {
                    throw new ValidationException(ValidationRules.Pattern, "Uptime", "^\\d+\\.\\d{2}:\\d{2}:\\d{2}");
                }
            }
        }
    }
}
