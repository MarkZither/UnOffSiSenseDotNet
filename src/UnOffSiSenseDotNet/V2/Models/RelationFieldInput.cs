// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace UnOffSiSenseDotNet.V2_0.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class RelationFieldInput
    {
        /// <summary>
        /// Initializes a new instance of the RelationFieldInput class.
        /// </summary>
        public RelationFieldInput()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the RelationFieldInput class.
        /// </summary>
        /// <param name="dataset">ID of Dataset containing connected
        /// table</param>
        /// <param name="table">ID of connected Table</param>
        /// <param name="column">ID of column by which the table is
        /// connected</param>
        public RelationFieldInput(System.Guid dataset, System.Guid table, System.Guid column)
        {
            Dataset = dataset;
            Table = table;
            Column = column;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets ID of Dataset containing connected table
        /// </summary>
        [JsonProperty(PropertyName = "dataset")]
        public System.Guid Dataset { get; set; }

        /// <summary>
        /// Gets or sets ID of connected Table
        /// </summary>
        [JsonProperty(PropertyName = "table")]
        public System.Guid Table { get; set; }

        /// <summary>
        /// Gets or sets ID of column by which the table is connected
        /// </summary>
        [JsonProperty(PropertyName = "column")]
        public System.Guid Column { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (!System.Text.RegularExpressions.Regex.IsMatch(Dataset.ToString(), "^[0-9a-f]{8}(-?[0-9a-f]{4}){3}-?[0-9a-f]{4,12}$"))
            {
                throw new ValidationException(ValidationRules.Pattern, "Dataset", "^[0-9a-f]{8}(-?[0-9a-f]{4}){3}-?[0-9a-f]{4,12}$");
            }
            if (!System.Text.RegularExpressions.Regex.IsMatch(Table.ToString(), "^[0-9a-f]{8}(-?[0-9a-f]{4}){3}-?[0-9a-f]{4,12}$"))
            {
                throw new ValidationException(ValidationRules.Pattern, "Table", "^[0-9a-f]{8}(-?[0-9a-f]{4}){3}-?[0-9a-f]{4,12}$");
            }
            if (!System.Text.RegularExpressions.Regex.IsMatch(Column.ToString(), "^[0-9a-f]{8}(-?[0-9a-f]{4}){3}-?[0-9a-f]{4,12}$"))
            {
                throw new ValidationException(ValidationRules.Pattern, "Column", "^[0-9a-f]{8}(-?[0-9a-f]{4}){3}-?[0-9a-f]{4,12}$");
            }
        }
    }
}
