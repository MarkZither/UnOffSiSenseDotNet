// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace UnOffSiSenseDotNet.V2_0.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class TableBuildBehaviorInputAccumulativeConfig
    {
        /// <summary>
        /// Initializes a new instance of the
        /// TableBuildBehaviorInputAccumulativeConfig class.
        /// </summary>
        public TableBuildBehaviorInputAccumulativeConfig()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// TableBuildBehaviorInputAccumulativeConfig class.
        /// </summary>
        /// <param name="type">Possible values include: 'lastStored',
        /// 'lastDays'</param>
        public TableBuildBehaviorInputAccumulativeConfig(string column, string type, int? lastDays = default(int?), int? keepOnlyDays = default(int?))
        {
            Column = column;
            Type = type;
            LastDays = lastDays;
            KeepOnlyDays = keepOnlyDays;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "column")]
        public string Column { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'lastStored', 'lastDays'
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "lastDays")]
        public int? LastDays { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "keepOnlyDays")]
        public int? KeepOnlyDays { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Column == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Column");
            }
            if (Type == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Type");
            }
        }
    }
}
