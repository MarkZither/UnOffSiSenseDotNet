// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace UnOffSiSenseDotNet.V2_0
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.IO;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for SiSenseSDK.
    /// </summary>
    public static partial class SiSenseSDKExtensions
    {
            /// <summary>
            /// List available audit log files
            /// </summary>
            /// <remarks>
            /// This API returns an array of available Audit log files. Each file is
            /// validated for integrity - the valid property set to false indicates that
            /// the file may have been tempered with or altered.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='authorization'>
            /// The user's API token preceded by the keyword `Bearer ` (with space between
            /// it and the token). For more information, see [API
            /// tutorial](http://developer.sisense.com/display/API2/Using+the+REST+API).
            /// </param>
            /// <param name='xDeviceId'>
            /// The device id.
            /// </param>
            public static object ListAuditLogFiles(this ISiSenseSDK operations, string authorization = default(string), string xDeviceId = default(string))
            {
                return operations.ListAuditLogFilesAsync(authorization, xDeviceId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List available audit log files
            /// </summary>
            /// <remarks>
            /// This API returns an array of available Audit log files. Each file is
            /// validated for integrity - the valid property set to false indicates that
            /// the file may have been tempered with or altered.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='authorization'>
            /// The user's API token preceded by the keyword `Bearer ` (with space between
            /// it and the token). For more information, see [API
            /// tutorial](http://developer.sisense.com/display/API2/Using+the+REST+API).
            /// </param>
            /// <param name='xDeviceId'>
            /// The device id.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ListAuditLogFilesAsync(this ISiSenseSDK operations, string authorization = default(string), string xDeviceId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListAuditLogFilesWithHttpMessagesAsync(authorization, xDeviceId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List Cluster Nodes
            /// </summary>
            /// <remarks>
            /// Get an array of all Nodes in the Cluster.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetAllNodesUsingGET(this ISiSenseSDK operations)
            {
                return operations.GetAllNodesUsingGETAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// List Cluster Nodes
            /// </summary>
            /// <remarks>
            /// Get an array of all Nodes in the Cluster.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetAllNodesUsingGETAsync(this ISiSenseSDK operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllNodesUsingGETWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Cluster Node
            /// </summary>
            /// <remarks>
            /// Get a specific Node in the Cluster by ID
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nodeId'>
            /// Node Id
            /// </param>
            public static object GetNodeByIdUsingGET(this ISiSenseSDK operations, string nodeId)
            {
                return operations.GetNodeByIdUsingGETAsync(nodeId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Cluster Node
            /// </summary>
            /// <remarks>
            /// Get a specific Node in the Cluster by ID
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nodeId'>
            /// Node Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetNodeByIdUsingGETAsync(this ISiSenseSDK operations, string nodeId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetNodeByIdUsingGETWithHttpMessagesAsync(nodeId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List Data Groups
            /// </summary>
            /// <remarks>
            /// Get an array of Data Groups.
            /// Results can be filtered by using the `name` query parameter for Data Group
            /// name, or by using the `datamodel` query parameter for Datamodel ID or
            /// Title.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datamodel'>
            /// Title of Datamodel to filter results by
            /// </param>
            /// <param name='name'>
            /// Data group name to filter results by
            /// </param>
            public static object GetDataGroupsUsingGET(this ISiSenseSDK operations, string datamodel = default(string), string name = default(string))
            {
                return operations.GetDataGroupsUsingGETAsync(datamodel, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List Data Groups
            /// </summary>
            /// <remarks>
            /// Get an array of Data Groups.
            /// Results can be filtered by using the `name` query parameter for Data Group
            /// name, or by using the `datamodel` query parameter for Datamodel ID or
            /// Title.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datamodel'>
            /// Title of Datamodel to filter results by
            /// </param>
            /// <param name='name'>
            /// Data group name to filter results by
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetDataGroupsUsingGETAsync(this ISiSenseSDK operations, string datamodel = default(string), string name = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDataGroupsUsingGETWithHttpMessagesAsync(datamodel, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create Data Group
            /// </summary>
            /// <remarks>
            /// Create a new Data Group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dataGroupDto'>
            /// Data Group create params
            /// </param>
            public static object CreateDataGroupUsingPOST(this ISiSenseSDK operations, DataGroupDto dataGroupDto)
            {
                return operations.CreateDataGroupUsingPOSTAsync(dataGroupDto).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create Data Group
            /// </summary>
            /// <remarks>
            /// Create a new Data Group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dataGroupDto'>
            /// Data Group create params
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CreateDataGroupUsingPOSTAsync(this ISiSenseSDK operations, DataGroupDto dataGroupDto, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateDataGroupUsingPOSTWithHttpMessagesAsync(dataGroupDto, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Default Data Group
            /// </summary>
            /// <remarks>
            /// Get the current default Data Group. This is the Data Group to which
            /// Datamodels are assigned by default.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetDefaultDataGroupUsingGET(this ISiSenseSDK operations)
            {
                return operations.GetDefaultDataGroupUsingGETAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Default Data Group
            /// </summary>
            /// <remarks>
            /// Get the current default Data Group. This is the Data Group to which
            /// Datamodels are assigned by default.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetDefaultDataGroupUsingGETAsync(this ISiSenseSDK operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDefaultDataGroupUsingGETWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Data Group by ID
            /// </summary>
            /// <remarks>
            /// Get a specific Data Group by ID.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dataGroupId'>
            /// Data Group Id
            /// </param>
            public static object GetDataGroupByIdUsingGET(this ISiSenseSDK operations, string dataGroupId)
            {
                return operations.GetDataGroupByIdUsingGETAsync(dataGroupId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Data Group by ID
            /// </summary>
            /// <remarks>
            /// Get a specific Data Group by ID.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dataGroupId'>
            /// Data Group Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetDataGroupByIdUsingGETAsync(this ISiSenseSDK operations, string dataGroupId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDataGroupByIdUsingGETWithHttpMessagesAsync(dataGroupId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete Data Group
            /// </summary>
            /// <remarks>
            /// Delete a Data Group by its ID.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dataGroupId'>
            /// Data Group Id
            /// </param>
            public static object DeleteDataGroupUsingDELETE(this ISiSenseSDK operations, string dataGroupId)
            {
                return operations.DeleteDataGroupUsingDELETEAsync(dataGroupId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete Data Group
            /// </summary>
            /// <remarks>
            /// Delete a Data Group by its ID.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dataGroupId'>
            /// Data Group Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteDataGroupUsingDELETEAsync(this ISiSenseSDK operations, string dataGroupId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteDataGroupUsingDELETEWithHttpMessagesAsync(dataGroupId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update Data Group
            /// </summary>
            /// <remarks>
            /// Update a Data Group by it ID.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dataGroupDto'>
            /// Data Group update params
            /// </param>
            /// <param name='dataGroupId'>
            /// Data Group Id
            /// </param>
            public static object UpdateDataGroupUsingPATCH(this ISiSenseSDK operations, DataGroupDto dataGroupDto, string dataGroupId)
            {
                return operations.UpdateDataGroupUsingPATCHAsync(dataGroupDto, dataGroupId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update Data Group
            /// </summary>
            /// <remarks>
            /// Update a Data Group by it ID.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dataGroupDto'>
            /// Data Group update params
            /// </param>
            /// <param name='dataGroupId'>
            /// Data Group Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateDataGroupUsingPATCHAsync(this ISiSenseSDK operations, DataGroupDto dataGroupDto, string dataGroupId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateDataGroupUsingPATCHWithHttpMessagesAsync(dataGroupDto, dataGroupId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Assign Datamodels to Data Group
            /// </summary>
            /// <remarks>
            /// Assign one or more Datamodels to a Data Group.
            /// Datamodels can only be assigned to one Data Group at a time - assigning a
            /// Datamodel to a new Data Group will automatically remove it from its current
            /// group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dataGroupId'>
            /// Data Group Id
            /// </param>
            /// <param name='dataSourceIds'>
            /// Set of ElastiCube Ids
            /// </param>
            public static object AssignCubesUsingPOST(this ISiSenseSDK operations, string dataGroupId, IList<string> dataSourceIds)
            {
                return operations.AssignCubesUsingPOSTAsync(dataGroupId, dataSourceIds).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Assign Datamodels to Data Group
            /// </summary>
            /// <remarks>
            /// Assign one or more Datamodels to a Data Group.
            /// Datamodels can only be assigned to one Data Group at a time - assigning a
            /// Datamodel to a new Data Group will automatically remove it from its current
            /// group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dataGroupId'>
            /// Data Group Id
            /// </param>
            /// <param name='dataSourceIds'>
            /// Set of ElastiCube Ids
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> AssignCubesUsingPOSTAsync(this ISiSenseSDK operations, string dataGroupId, IList<string> dataSourceIds, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AssignCubesUsingPOSTWithHttpMessagesAsync(dataGroupId, dataSourceIds, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Export Datamodel as stream
            /// </summary>
            /// <remarks>
            /// Export a full Datamodel (Schema and Data) as a stream. This endpoint
            /// requires a Datamodel ID via the `datamodelId` query parameter - not
            /// providing the ID will result in an error.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datamodelId'>
            /// A Datamodel ID.
            /// </param>
            public static object ExportDataSourceAsStreamUsingGET(this ISiSenseSDK operations, string datamodelId = default(string))
            {
                return operations.ExportDataSourceAsStreamUsingGETAsync(datamodelId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Export Datamodel as stream
            /// </summary>
            /// <remarks>
            /// Export a full Datamodel (Schema and Data) as a stream. This endpoint
            /// requires a Datamodel ID via the `datamodelId` query parameter - not
            /// providing the ID will result in an error.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datamodelId'>
            /// A Datamodel ID.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ExportDataSourceAsStreamUsingGETAsync(this ISiSenseSDK operations, string datamodelId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ExportDataSourceAsStreamUsingGETWithHttpMessagesAsync(datamodelId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Import full Datamodel as stream
            /// </summary>
            /// <remarks>
            /// Import a full Datamodel (Schema and Data) as a stream This endpoint allows
            /// specifying a Datamodel ID via the `datamodelId` query parameter.If
            /// provided, that Datamodel's schema and data will be overriden. In this case,
            /// Datamodel title will be ignored.Otherwise, a new Datamodel will be created.
            /// The field `newTitle` can be used to explicitly name the new Datamodel.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fileToUpload'>
            /// The file stream to import
            /// </param>
            /// <param name='datamodelId'>
            /// ID of Datamodel to import into
            /// if not specified a new datamodel will be created
            /// If specified, Datamodel title will be ignored.
            /// </param>
            /// <param name='newTitle'>
            /// When a datamodelId is not provided to create a new Datamodel, this property
            /// can be used to give the new Datamodel a specific title.
            /// If datamodelId is provided together with newTitle an error will occur.
            /// </param>
            public static object ImportCubeStreamUsingPOST(this ISiSenseSDK operations, Stream fileToUpload, string datamodelId = default(string), string newTitle = default(string))
            {
                return operations.ImportCubeStreamUsingPOSTAsync(fileToUpload, datamodelId, newTitle).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Import full Datamodel as stream
            /// </summary>
            /// <remarks>
            /// Import a full Datamodel (Schema and Data) as a stream This endpoint allows
            /// specifying a Datamodel ID via the `datamodelId` query parameter.If
            /// provided, that Datamodel's schema and data will be overriden. In this case,
            /// Datamodel title will be ignored.Otherwise, a new Datamodel will be created.
            /// The field `newTitle` can be used to explicitly name the new Datamodel.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fileToUpload'>
            /// The file stream to import
            /// </param>
            /// <param name='datamodelId'>
            /// ID of Datamodel to import into
            /// if not specified a new datamodel will be created
            /// If specified, Datamodel title will be ignored.
            /// </param>
            /// <param name='newTitle'>
            /// When a datamodelId is not provided to create a new Datamodel, this property
            /// can be used to give the new Datamodel a specific title.
            /// If datamodelId is provided together with newTitle an error will occur.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ImportCubeStreamUsingPOSTAsync(this ISiSenseSDK operations, Stream fileToUpload, string datamodelId = default(string), string newTitle = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ImportCubeStreamUsingPOSTWithHttpMessagesAsync(fileToUpload, datamodelId, newTitle, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List Datamodel instances
            /// </summary>
            /// <remarks>
            /// Get an array of physical instances of the Datamodel by ID.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datamodelId'>
            /// datamodelId
            /// </param>
            public static object GetInstancesUsingGET(this ISiSenseSDK operations, string datamodelId)
            {
                return operations.GetInstancesUsingGETAsync(datamodelId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List Datamodel instances
            /// </summary>
            /// <remarks>
            /// Get an array of physical instances of the Datamodel by ID.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datamodelId'>
            /// datamodelId
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetInstancesUsingGETAsync(this ISiSenseSDK operations, string datamodelId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetInstancesUsingGETWithHttpMessagesAsync(datamodelId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Build Task by ID
            /// </summary>
            /// <remarks>
            /// Get a specific Build Process by ID.
            /// Use this to query a build task's current status.
            /// Completed tasks are eventually removed and querying them will result in a
            /// 404 response.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='buildId'>
            /// A Build Task ID.
            /// </param>
            public static object GetBuildTask(this ISiSenseSDK operations, string buildId)
            {
                return operations.GetBuildTaskAsync(buildId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Build Task by ID
            /// </summary>
            /// <remarks>
            /// Get a specific Build Process by ID.
            /// Use this to query a build task's current status.
            /// Completed tasks are eventually removed and querying them will result in a
            /// 404 response.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='buildId'>
            /// A Build Task ID.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetBuildTaskAsync(this ISiSenseSDK operations, string buildId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetBuildTaskWithHttpMessagesAsync(buildId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Cancel/Stop a Build Task
            /// </summary>
            /// <remarks>
            /// Cancel (stop) a specific Datamodel Build Process by ID.
            /// Completed, cancelled or failed builds will not be affected by this.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='buildId'>
            /// A Build Task ID.
            /// </param>
            public static object CancelBuildUsingDELETE(this ISiSenseSDK operations, string buildId)
            {
                return operations.CancelBuildUsingDELETEAsync(buildId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Cancel/Stop a Build Task
            /// </summary>
            /// <remarks>
            /// Cancel (stop) a specific Datamodel Build Process by ID.
            /// Completed, cancelled or failed builds will not be affected by this.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='buildId'>
            /// A Build Task ID.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CancelBuildUsingDELETEAsync(this ISiSenseSDK operations, string buildId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CancelBuildUsingDELETEWithHttpMessagesAsync(buildId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// get schedule build by cube id
            /// </summary>
            /// <remarks>
            /// &lt;br&gt;This API is for internal use only, and may be deprecated in
            /// future releases.&lt;/br&gt;&lt;br /&gt;get schedule
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datamodelId'>
            /// datamodelId
            /// </param>
            public static BuildScheduleDTO GetSchedule(this ISiSenseSDK operations, string datamodelId)
            {
                return operations.GetScheduleAsync(datamodelId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// get schedule build by cube id
            /// </summary>
            /// <remarks>
            /// &lt;br&gt;This API is for internal use only, and may be deprecated in
            /// future releases.&lt;/br&gt;&lt;br /&gt;get schedule
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datamodelId'>
            /// datamodelId
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BuildScheduleDTO> GetScheduleAsync(this ISiSenseSDK operations, string datamodelId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetScheduleWithHttpMessagesAsync(datamodelId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Add build schedule for cube
            /// </summary>
            /// <remarks>
            /// &lt;br&gt;This API is for internal use only, and may be deprecated in
            /// future releases.&lt;/br&gt;&lt;br /&gt;Add build schedule
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datamodelId'>
            /// datamodelId
            /// </param>
            /// <param name='buildScheduleDTO'>
            /// Item to add
            /// </param>
            public static void AddSchedule(this ISiSenseSDK operations, string datamodelId, BuildScheduleDTO buildScheduleDTO = default(BuildScheduleDTO))
            {
                operations.AddScheduleAsync(datamodelId, buildScheduleDTO).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add build schedule for cube
            /// </summary>
            /// <remarks>
            /// &lt;br&gt;This API is for internal use only, and may be deprecated in
            /// future releases.&lt;/br&gt;&lt;br /&gt;Add build schedule
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datamodelId'>
            /// datamodelId
            /// </param>
            /// <param name='buildScheduleDTO'>
            /// Item to add
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task AddScheduleAsync(this ISiSenseSDK operations, string datamodelId, BuildScheduleDTO buildScheduleDTO = default(BuildScheduleDTO), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.AddScheduleWithHttpMessagesAsync(datamodelId, buildScheduleDTO, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// delete schedule
            /// </summary>
            /// <remarks>
            /// &lt;br&gt;This API is for internal use only, and may be deprecated in
            /// future releases.&lt;/br&gt;&lt;br /&gt;delete schedule
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datamodelId'>
            /// datamodelId
            /// </param>
            public static void BuildCubeIdScheduleDelete(this ISiSenseSDK operations, string datamodelId)
            {
                operations.BuildCubeIdScheduleDeleteAsync(datamodelId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// delete schedule
            /// </summary>
            /// <remarks>
            /// &lt;br&gt;This API is for internal use only, and may be deprecated in
            /// future releases.&lt;/br&gt;&lt;br /&gt;delete schedule
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datamodelId'>
            /// datamodelId
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BuildCubeIdScheduleDeleteAsync(this ISiSenseSDK operations, string datamodelId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BuildCubeIdScheduleDeleteWithHttpMessagesAsync(datamodelId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Returns table preview stream
            /// </summary>
            /// <remarks>
            /// The &lt;strong&gt;get table preview&lt;/strong&gt; endpoint returns a
            /// preview of the data in specified table.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='connectionParameters'>
            /// The connection parameters for a specific datasource
            /// </param>
            /// <param name='provider'>
            /// The name of live connector provider.
            /// </param>
            /// <param name='authorization'>
            /// The user’s API token preceded by the keyword Bearer (with space between it
            /// and the token). For more information, see API tutorial.
            /// </param>
            public static object GetConnectorTablePreviewUsingPOST(this ISiSenseSDK operations, ConnectionParameters connectionParameters, string provider, string authorization = default(string))
            {
                return operations.GetConnectorTablePreviewUsingPOSTAsync(connectionParameters, provider, authorization).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns table preview stream
            /// </summary>
            /// <remarks>
            /// The &lt;strong&gt;get table preview&lt;/strong&gt; endpoint returns a
            /// preview of the data in specified table.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='connectionParameters'>
            /// The connection parameters for a specific datasource
            /// </param>
            /// <param name='provider'>
            /// The name of live connector provider.
            /// </param>
            /// <param name='authorization'>
            /// The user’s API token preceded by the keyword Bearer (with space between it
            /// and the token). For more information, see API tutorial.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetConnectorTablePreviewUsingPOSTAsync(this ISiSenseSDK operations, ConnectionParameters connectionParameters, string provider, string authorization = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetConnectorTablePreviewUsingPOSTWithHttpMessagesAsync(connectionParameters, provider, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Import a Datamodel Schema
            /// </summary>
            /// <remarks>
            /// Import a Datamodel Schema.
            /// This endpoint allows you to specify a Datamodel ID via the `datamodelId`
            /// query parameter. If provided, that Datamodel's schema will be overriden. In
            /// this case, the Datamodel title will be ignored.
            /// Otherwise, a new Datamodel will be created. The field `newTitle` can be
            /// used to explicitly name the new Datamodel.
            /// If both `datamodelId` and `newTitle` are provided, the `newTitle` field
            /// will be ignored.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// Datamodel schema object
            /// </param>
            /// <param name='datamodelId'>
            /// ID of the Datamodel to import.
            /// If not specified, a new datamodel will be created
            /// If specified, the Datamodel title will be ignored.
            /// </param>
            /// <param name='newTitle'>
            /// When a `datamodelId` is not provided to create a new Datamodel, this
            /// property can be used to give the new Datamodel a specific title.
            /// If `datamodelId` is provided together with `newTitle`,  the `newTitle`
            /// field will be ignored.
            /// </param>
            public static ErrorModel CreateUpdateDatamodelUsingPOST(this ISiSenseSDK operations, ElasticubeImportInput body, string datamodelId = default(string), string newTitle = default(string))
            {
                return operations.CreateUpdateDatamodelUsingPOSTAsync(body, datamodelId, newTitle).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Import a Datamodel Schema
            /// </summary>
            /// <remarks>
            /// Import a Datamodel Schema.
            /// This endpoint allows you to specify a Datamodel ID via the `datamodelId`
            /// query parameter. If provided, that Datamodel's schema will be overriden. In
            /// this case, the Datamodel title will be ignored.
            /// Otherwise, a new Datamodel will be created. The field `newTitle` can be
            /// used to explicitly name the new Datamodel.
            /// If both `datamodelId` and `newTitle` are provided, the `newTitle` field
            /// will be ignored.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// Datamodel schema object
            /// </param>
            /// <param name='datamodelId'>
            /// ID of the Datamodel to import.
            /// If not specified, a new datamodel will be created
            /// If specified, the Datamodel title will be ignored.
            /// </param>
            /// <param name='newTitle'>
            /// When a `datamodelId` is not provided to create a new Datamodel, this
            /// property can be used to give the new Datamodel a specific title.
            /// If `datamodelId` is provided together with `newTitle`,  the `newTitle`
            /// field will be ignored.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ErrorModel> CreateUpdateDatamodelUsingPOSTAsync(this ISiSenseSDK operations, ElasticubeImportInput body, string datamodelId = default(string), string newTitle = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateUpdateDatamodelUsingPOSTWithHttpMessagesAsync(body, datamodelId, newTitle, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create Datamodel
            /// </summary>
            /// <remarks>
            /// Create a new Datamodel.
            ///
            /// Datamodels are created with a blank schema in `draft` state and must be
            /// built/published before they can be used in dashboards.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// New Datamodel Schema object
            /// </param>
            public static object CreateDatamodelUsingPOST(this ISiSenseSDK operations, DatamodelSchemaInput body)
            {
                return operations.CreateDatamodelUsingPOSTAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create Datamodel
            /// </summary>
            /// <remarks>
            /// Create a new Datamodel.
            ///
            /// Datamodels are created with a blank schema in `draft` state and must be
            /// built/published before they can be used in dashboards.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// New Datamodel Schema object
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CreateDatamodelUsingPOSTAsync(this ISiSenseSDK operations, DatamodelSchemaInput body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateDatamodelUsingPOSTWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Clone Datamodel
            /// </summary>
            /// <remarks>
            /// **BETA**: this API is provided for early access, and may
            /// change.&lt;br&gt;&lt;br&gt;Duplicate Datamodel by DatamodelId
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static ErrorModel CloneDataModelUsingPost(this ISiSenseSDK operations, Body body)
            {
                return operations.CloneDataModelUsingPostAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Clone Datamodel
            /// </summary>
            /// <remarks>
            /// **BETA**: this API is provided for early access, and may
            /// change.&lt;br&gt;&lt;br&gt;Duplicate Datamodel by DatamodelId
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ErrorModel> CloneDataModelUsingPostAsync(this ISiSenseSDK operations, Body body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CloneDataModelUsingPostWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Export Datamodel Schema
            /// </summary>
            /// <remarks>
            /// Export a Datamodel Schema. This endpoint requires a Datamodel ID via the
            /// datamodelId query parameter - not providing the ID will result in an error.
            /// An export type is also required via the type query parameter, defining
            /// which version of the Datamodel Schema to export.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datamodelId'>
            /// A Datamodel ID.
            /// </param>
            public static ErrorModel ExportDataModelUsingGet(this ISiSenseSDK operations, string datamodelId)
            {
                return operations.ExportDataModelUsingGetAsync(datamodelId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Export Datamodel Schema
            /// </summary>
            /// <remarks>
            /// Export a Datamodel Schema. This endpoint requires a Datamodel ID via the
            /// datamodelId query parameter - not providing the ID will result in an error.
            /// An export type is also required via the type query parameter, defining
            /// which version of the Datamodel Schema to export.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datamodelId'>
            /// A Datamodel ID.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ErrorModel> ExportDataModelUsingGetAsync(this ISiSenseSDK operations, string datamodelId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ExportDataModelUsingGetWithHttpMessagesAsync(datamodelId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete Datamodel
            /// </summary>
            /// <remarks>
            /// Delete a specific Datamodel by its ID
            ///
            /// The Datamodel will be deleted entirely, including its Schema, running
            /// instance, and any stored data.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static ErrorModel DeleteDataModelUsingDelete(this ISiSenseSDK operations)
            {
                return operations.DeleteDataModelUsingDeleteAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete Datamodel
            /// </summary>
            /// <remarks>
            /// Delete a specific Datamodel by its ID
            ///
            /// The Datamodel will be deleted entirely, including its Schema, running
            /// instance, and any stored data.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ErrorModel> DeleteDataModelUsingDeleteAsync(this ISiSenseSDK operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteDataModelUsingDeleteWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Datamodel schema by ID
            /// </summary>
            /// <remarks>
            /// Get a single Datamodel's schema by ID.
            ///
            /// The response of this endpoint represents the **current** state of the
            /// schema as can be seen in the Data page,
            /// and may differ from the schema available to queries if changes have been
            /// made since the last build/publish.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetDataModelUsingGet(this ISiSenseSDK operations)
            {
                return operations.GetDataModelUsingGetAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Datamodel schema by ID
            /// </summary>
            /// <remarks>
            /// Get a single Datamodel's schema by ID.
            ///
            /// The response of this endpoint represents the **current** state of the
            /// schema as can be seen in the Data page,
            /// and may differ from the schema available to queries if changes have been
            /// made since the last build/publish.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetDataModelUsingGetAsync(this ISiSenseSDK operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDataModelUsingGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List Datasets
            /// </summary>
            /// <remarks>
            /// Get an array of all of a Datamodel's Datasets.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetDataModelsUsingPost(this ISiSenseSDK operations)
            {
                return operations.GetDataModelsUsingPostAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// List Datasets
            /// </summary>
            /// <remarks>
            /// Get an array of all of a Datamodel's Datasets.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetDataModelsUsingPostAsync(this ISiSenseSDK operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDataModelsUsingPostWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create Dataset
            /// </summary>
            /// <remarks>
            /// **BETA**: this API is provided for early access, and may
            /// change.&lt;br&gt;&lt;br&gt;Create a new Dataset within a Datamodel Schema.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// New Dataset object
            /// </param>
            public static object CreateDatasetUsingPost(this ISiSenseSDK operations, DatasetInput body)
            {
                return operations.CreateDatasetUsingPostAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create Dataset
            /// </summary>
            /// <remarks>
            /// **BETA**: this API is provided for early access, and may
            /// change.&lt;br&gt;&lt;br&gt;Create a new Dataset within a Datamodel Schema.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// New Dataset object
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CreateDatasetUsingPostAsync(this ISiSenseSDK operations, DatasetInput body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateDatasetUsingPostWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Dataset by ID
            /// </summary>
            /// <remarks>
            /// Get a specific Dataset from a specific Datamodel Schema by their respective
            /// IDs.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetDatasetUsingPost(this ISiSenseSDK operations)
            {
                return operations.GetDatasetUsingPostAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Dataset by ID
            /// </summary>
            /// <remarks>
            /// Get a specific Dataset from a specific Datamodel Schema by their respective
            /// IDs.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetDatasetUsingPostAsync(this ISiSenseSDK operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDatasetUsingPostWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update Dataset
            /// </summary>
            /// <remarks>
            /// **BETA**: this API is provided for early access, and may
            /// change.&lt;br&gt;&lt;br&gt;Update a Dataset by ID.
            ///
            /// Only the `connection` property can be updated.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// Dataset object with `connection` to update to
            /// </param>
            public static object UpdateDatasetUsingPatch(this ISiSenseSDK operations, DatasetUpdate body)
            {
                return operations.UpdateDatasetUsingPatchAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update Dataset
            /// </summary>
            /// <remarks>
            /// **BETA**: this API is provided for early access, and may
            /// change.&lt;br&gt;&lt;br&gt;Update a Dataset by ID.
            ///
            /// Only the `connection` property can be updated.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// Dataset object with `connection` to update to
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateDatasetUsingPatchAsync(this ISiSenseSDK operations, DatasetUpdate body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateDatasetUsingPatchWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete Dataset
            /// </summary>
            /// <remarks>
            /// **BETA**: this API is provided for early access, and may
            /// change.&lt;br&gt;&lt;br&gt;Delete a Dataset from a Datamodel Schema by ID
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static ErrorModel DeleteDatasetUsingDelete(this ISiSenseSDK operations)
            {
                return operations.DeleteDatasetUsingDeleteAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete Dataset
            /// </summary>
            /// <remarks>
            /// **BETA**: this API is provided for early access, and may
            /// change.&lt;br&gt;&lt;br&gt;Delete a Dataset from a Datamodel Schema by ID
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ErrorModel> DeleteDatasetUsingDeleteAsync(this ISiSenseSDK operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteDatasetUsingDeleteWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List Tables
            /// </summary>
            /// <remarks>
            /// Get an array of Tables from a Dataset.
            ///
            /// Results can be filtered using the optional `name` query parameter.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// Table name to filter by
            /// </param>
            public static object ListDatasetTablesUsingGet(this ISiSenseSDK operations, string name = default(string))
            {
                return operations.ListDatasetTablesUsingGetAsync(name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List Tables
            /// </summary>
            /// <remarks>
            /// Get an array of Tables from a Dataset.
            ///
            /// Results can be filtered using the optional `name` query parameter.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// Table name to filter by
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ListDatasetTablesUsingGetAsync(this ISiSenseSDK operations, string name = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListDatasetTablesUsingGetWithHttpMessagesAsync(name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create Table
            /// </summary>
            /// <remarks>
            /// Create a new Table within a Dataset.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// A new Table object
            /// </param>
            public static object CreateDatasetTableUsingPost(this ISiSenseSDK operations, TableInput body)
            {
                return operations.CreateDatasetTableUsingPostAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create Table
            /// </summary>
            /// <remarks>
            /// Create a new Table within a Dataset.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// A new Table object
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CreateDatasetTableUsingPostAsync(this ISiSenseSDK operations, TableInput body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateDatasetTableUsingPostWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Table by ID
            /// </summary>
            /// <remarks>
            /// Get a specific Table from the Dataset by ID.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetDatasetTableUsingGet(this ISiSenseSDK operations)
            {
                return operations.GetDatasetTableUsingGetAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Table by ID
            /// </summary>
            /// <remarks>
            /// Get a specific Table from the Dataset by ID.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetDatasetTableUsingGetAsync(this ISiSenseSDK operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDatasetTableUsingGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update Table
            /// </summary>
            /// <remarks>
            /// Update a Table in the Dataset by ID.
            ///
            /// This operation also updates the Table's Columns - **note** that all desired
            /// columns should be provided, including existing ones that should be kept.
            /// Any existing Columns omitted from the payload will be removed from the
            /// Table!
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// A Table object with Columns
            /// </param>
            public static object UpdateDatasetTableUsingPatch(this ISiSenseSDK operations, TableOutput body)
            {
                return operations.UpdateDatasetTableUsingPatchAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update Table
            /// </summary>
            /// <remarks>
            /// Update a Table in the Dataset by ID.
            ///
            /// This operation also updates the Table's Columns - **note** that all desired
            /// columns should be provided, including existing ones that should be kept.
            /// Any existing Columns omitted from the payload will be removed from the
            /// Table!
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// A Table object with Columns
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateDatasetTableUsingPatchAsync(this ISiSenseSDK operations, TableOutput body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateDatasetTableUsingPatchWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete Table
            /// </summary>
            /// <remarks>
            /// Delete a Table from the Dataset by ID.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static ErrorModel DeleteDatasetTableUsingDelete(this ISiSenseSDK operations)
            {
                return operations.DeleteDatasetTableUsingDeleteAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete Table
            /// </summary>
            /// <remarks>
            /// Delete a Table from the Dataset by ID.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ErrorModel> DeleteDatasetTableUsingDeleteAsync(this ISiSenseSDK operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteDatasetTableUsingDeleteWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List Relations
            /// </summary>
            /// <remarks>
            /// Get an array of Relations within the Datamodel Schema.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object ListDataModelRelationsUsingGet(this ISiSenseSDK operations)
            {
                return operations.ListDataModelRelationsUsingGetAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// List Relations
            /// </summary>
            /// <remarks>
            /// Get an array of Relations within the Datamodel Schema.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ListDataModelRelationsUsingGetAsync(this ISiSenseSDK operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListDataModelRelationsUsingGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create Relation
            /// </summary>
            /// <remarks>
            /// Create a new Relation within a Datamodel Schema.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// A new Relation object
            /// </param>
            public static object CreateDataModelRelationUsingPost(this ISiSenseSDK operations, RelationInput body)
            {
                return operations.CreateDataModelRelationUsingPostAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create Relation
            /// </summary>
            /// <remarks>
            /// Create a new Relation within a Datamodel Schema.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// A new Relation object
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CreateDataModelRelationUsingPostAsync(this ISiSenseSDK operations, RelationInput body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateDataModelRelationUsingPostWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Relation by ID
            /// </summary>
            /// <remarks>
            /// Get a specific Relation from the Datamodel Schema by ID.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetDataModelRelationUsingGet(this ISiSenseSDK operations)
            {
                return operations.GetDataModelRelationUsingGetAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Relation by ID
            /// </summary>
            /// <remarks>
            /// Get a specific Relation from the Datamodel Schema by ID.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetDataModelRelationUsingGetAsync(this ISiSenseSDK operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDataModelRelationUsingGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update Relation
            /// </summary>
            /// <remarks>
            /// Update a specific Relation in the Datamodel Schema by ID.
            ///
            /// **Note** that all desired columns must be included in the `columns`
            /// property, including existing ones that should be kept.
            /// Any existing columns omitted from the payload will be removed from the
            /// relation.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// An updated Relation object
            /// </param>
            public static object UpdateDataModelRelationsUsingPatch(this ISiSenseSDK operations, RelationInput body)
            {
                return operations.UpdateDataModelRelationsUsingPatchAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update Relation
            /// </summary>
            /// <remarks>
            /// Update a specific Relation in the Datamodel Schema by ID.
            ///
            /// **Note** that all desired columns must be included in the `columns`
            /// property, including existing ones that should be kept.
            /// Any existing columns omitted from the payload will be removed from the
            /// relation.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// An updated Relation object
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateDataModelRelationsUsingPatchAsync(this ISiSenseSDK operations, RelationInput body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateDataModelRelationsUsingPatchWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete Relation
            /// </summary>
            /// <remarks>
            /// Delete a specific Relation from the Datamodel Schema by ID.
            ///
            /// This operation deletes the entire Relation - to remove one or more columns
            /// from a relation, use the `PATCH` endpoint.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static ErrorModel DeleteDataModelRelationsUsingDelete(this ISiSenseSDK operations)
            {
                return operations.DeleteDataModelRelationsUsingDeleteAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete Relation
            /// </summary>
            /// <remarks>
            /// Delete a specific Relation from the Datamodel Schema by ID.
            ///
            /// This operation deletes the entire Relation - to remove one or more columns
            /// from a relation, use the `PATCH` endpoint.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ErrorModel> DeleteDataModelRelationsUsingDeleteAsync(this ISiSenseSDK operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteDataModelRelationsUsingDeleteWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List Datamodel schemas
            /// </summary>
            /// <remarks>
            /// Get an array of all Datamodel schemas.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='title'>
            /// Datamodel Title to search for
            /// </param>
            public static ErrorModel ListDataModelsUsingGet(this ISiSenseSDK operations, string title = default(string))
            {
                return operations.ListDataModelsUsingGetAsync(title).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List Datamodel schemas
            /// </summary>
            /// <remarks>
            /// Get an array of all Datamodel schemas.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='title'>
            /// Datamodel Title to search for
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ErrorModel> ListDataModelsUsingGetAsync(this ISiSenseSDK operations, string title = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListDataModelsUsingGetWithHttpMessagesAsync(title, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List Build tasks
            /// </summary>
            /// <remarks>
            /// Get an array of Datamodel Build Processes.
            ///
            /// The results can be filtered using the `datamodelId` and `status` query
            /// parameters.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datamodelId'>
            /// ID of Datamodel to filter results by
            /// </param>
            /// <param name='status'>
            /// Build status to filter results by. Possible values include: 'pending',
            /// 'building', 'done', 'failed', 'cancelled'
            /// </param>
            public static object ListBuildsUsingGet(this ISiSenseSDK operations, string datamodelId = default(string), string status = default(string))
            {
                return operations.ListBuildsUsingGetAsync(datamodelId, status).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List Build tasks
            /// </summary>
            /// <remarks>
            /// Get an array of Datamodel Build Processes.
            ///
            /// The results can be filtered using the `datamodelId` and `status` query
            /// parameters.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datamodelId'>
            /// ID of Datamodel to filter results by
            /// </param>
            /// <param name='status'>
            /// Build status to filter results by. Possible values include: 'pending',
            /// 'building', 'done', 'failed', 'cancelled'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ListBuildsUsingGetAsync(this ISiSenseSDK operations, string datamodelId = default(string), string status = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListBuildsUsingGetWithHttpMessagesAsync(datamodelId, status, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Start a Build
            /// </summary>
            /// <remarks>
            /// Create a Build Task to start building a Datamodel.
            ///
            /// The endpoint will return a response as soon as the task is created, **not**
            /// when the build is done.
            ///
            /// Use the ID from the response in the `GET` endpoint to query progress.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// Parameters for build task
            /// </param>
            public static object CreateBuildsUsingPost(this ISiSenseSDK operations, BuildInput body)
            {
                return operations.CreateBuildsUsingPostAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Start a Build
            /// </summary>
            /// <remarks>
            /// Create a Build Task to start building a Datamodel.
            ///
            /// The endpoint will return a response as soon as the task is created, **not**
            /// when the build is done.
            ///
            /// Use the ID from the response in the `GET` endpoint to query progress.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// Parameters for build task
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CreateBuildsUsingPostAsync(this ISiSenseSDK operations, BuildInput body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateBuildsUsingPostWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Cancel/Stop Datamodel builds
            /// </summary>
            /// <remarks>
            /// Cancel (stop) all running build tasks for a specific Datamodel.
            ///
            /// This endpoint requires a Datamodel ID to be provided as the query parameter
            /// `datamodelId`.
            ///
            /// Executing this endpoint without a valid Datamodel ID will result in an
            /// error response - it is not possible to cancel all running builds
            /// system-wide.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static ErrorModel DeleteBuildsUsingDelete(this ISiSenseSDK operations)
            {
                return operations.DeleteBuildsUsingDeleteAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Cancel/Stop Datamodel builds
            /// </summary>
            /// <remarks>
            /// Cancel (stop) all running build tasks for a specific Datamodel.
            ///
            /// This endpoint requires a Datamodel ID to be provided as the query parameter
            /// `datamodelId`.
            ///
            /// Executing this endpoint without a valid Datamodel ID will result in an
            /// error response - it is not possible to cancel all running builds
            /// system-wide.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ErrorModel> DeleteBuildsUsingDeleteAsync(this ISiSenseSDK operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteBuildsUsingDeleteWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
