// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace UnOffSiSenseDotNet.V2_0
{
    using Microsoft.Rest;
    using Models;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.IO;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// SiSenseSDK wrapper
    /// </summary>
    public partial interface ISiSenseSDK : System.IDisposable
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        System.Uri BaseUri { get; set; }

        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        JsonSerializerSettings SerializationSettings { get; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        JsonSerializerSettings DeserializationSettings { get; }

        /// <summary>
        /// The user's API token preceded by the keyword `Bearer ` (with space
        /// between it and the token). For more information, see [API
        /// tutorial](http://developer.sisense.com/display/API2/Using+the+REST+API).
        /// </summary>
        string Authorization { get; set; }

        /// <summary>
        /// The device id.
        /// </summary>
        string XDeviceId { get; set; }

        /// <summary>
        /// Whitelist of fields to return for each document. fields Can also
        /// define which fields to exclude by prefixing field names with `-`
        /// </summary>
        string Fields { get; set; }

        /// <summary>
        /// Field by which the results should be sorted. Ascending by default,
        /// descending if prefixed by `-`
        /// </summary>
        string Sort { get; set; }

        /// <summary>
        /// Number of results to skip from the start of the data set. skip is
        /// to be used with the `limit` parameter for paging
        /// </summary>
        int? Skip { get; set; }

        /// <summary>
        /// How many results should be returned. limit is to be used with the
        /// `skip` parameter for paging
        /// </summary>
        int? Limit { get; set; }

        /// <summary>
        /// List of fields that should be expanded (substitures their IDs with
        /// actual objects). May be nested using the `resource.subResource`
        /// format
        /// </summary>
        string Expand { get; set; }

        /// <summary>
        /// The user's API token preceded by the keyword `Bearer ` (with a
        /// single space between it and the token).
        /// </summary>
        string Authorization1 { get; set; }

        /// <summary>
        /// A whitelist of fields to return for each object in the response.
        /// </summary>
        string Fields1 { get; set; }

        /// <summary>
        /// A field by which the results should be sorted.
        ///
        /// Results will be sorted in ascending order by default, or descending
        /// if the field name is prefixed by `-`.
        /// </summary>
        string Sort1 { get; set; }

        /// <summary>
        /// Number of results to skip from the start of the data set.
        ///
        /// This parameter must be used with the `limit` parameter, and is
        /// intended for paging.
        /// </summary>
        int? Skip1 { get; set; }

        /// <summary>
        /// Number of results to be returned from the data set.
        ///
        /// This field must be used with the `skip` parameter, and is intended
        /// for paging.
        /// </summary>
        int? Limit1 { get; set; }

        /// <summary>
        /// A List of fields that should be expanded in the response. Separated
        /// by commas `,`.
        ///
        /// Expanded fields will substitute their ID value with actual objects.
        ///
        /// May be nested using the `resource.subResource` format.
        /// </summary>
        string Expand1 { get; set; }

        /// <summary>
        /// A Datamodel ID.
        /// </summary>
        System.Guid DatamodelId { get; set; }

        /// <summary>
        /// A Dataset ID.
        /// </summary>
        System.Guid DatasetId { get; set; }

        /// <summary>
        /// A Table ID.
        /// </summary>
        System.Guid TableId { get; set; }

        /// <summary>
        /// A Datamodel Relation ID.
        /// </summary>
        System.Guid RelationId { get; set; }

        /// <summary>
        /// A Build Task ID.
        /// </summary>
        System.Guid BuildId { get; set; }

        /// <summary>
        /// An async Datamodel Export Task ID.
        /// </summary>
        System.Guid AsyncExportId { get; set; }

        /// <summary>
        /// An async Datamodel Import Task ID.
        /// </summary>
        System.Guid AsyncImportId { get; set; }

        /// <summary>
        /// A Datamodel Build Schedule ID.
        /// </summary>
        System.Guid ScheduleId { get; set; }

        /// <summary>
        /// A Data Group ID.
        /// </summary>
        System.Guid DataGroupId { get; set; }

        /// <summary>
        /// A Cluster Node ID.
        /// </summary>
        System.Guid NodeId { get; set; }

        /// <summary>
        /// A Datamodel ID.
        /// </summary>
        System.Guid DatamodelId1 { get; set; }

        /// <summary>
        /// Desired Datamodel schema instance. Defaults to none (do not include
        /// schema in response). Possible values include: 'none', 'latest',
        /// 'running'
        /// </summary>
        string SchemaType { get; set; }


        /// <summary>
        /// List available audit log files
        /// </summary>
        /// <remarks>
        /// This API returns an array of available Audit log files. Each file
        /// is validated for integrity - the valid property set to false
        /// indicates that the file may have been tempered with or altered.
        /// </remarks>
        /// <param name='authorization'>
        /// The user's API token preceded by the keyword `Bearer ` (with space
        /// between it and the token). For more information, see [API
        /// tutorial](http://developer.sisense.com/display/API2/Using+the+REST+API).
        /// </param>
        /// <param name='xDeviceId'>
        /// The device id.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> ListAuditLogFilesWithHttpMessagesAsync(string authorization = default(string), string xDeviceId = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List Cluster Nodes
        /// </summary>
        /// <remarks>
        /// Get an array of all Nodes in the Cluster.
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetAllNodesUsingGETWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Cluster Node
        /// </summary>
        /// <remarks>
        /// Get a specific Node in the Cluster by ID
        /// </remarks>
        /// <param name='nodeId'>
        /// Node Id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetNodeByIdUsingGETWithHttpMessagesAsync(string nodeId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List Data Groups
        /// </summary>
        /// <remarks>
        /// Get an array of Data Groups.
        /// Results can be filtered by using the `name` query parameter for
        /// Data Group name, or by using the `datamodel` query parameter for
        /// Datamodel ID or Title.
        /// </remarks>
        /// <param name='datamodel'>
        /// Title of Datamodel to filter results by
        /// </param>
        /// <param name='name'>
        /// Data group name to filter results by
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetDataGroupsUsingGETWithHttpMessagesAsync(string datamodel = default(string), string name = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create Data Group
        /// </summary>
        /// <remarks>
        /// Create a new Data Group.
        /// </remarks>
        /// <param name='dataGroupDto'>
        /// Data Group create params
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> CreateDataGroupUsingPOSTWithHttpMessagesAsync(DataGroupDto dataGroupDto, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Default Data Group
        /// </summary>
        /// <remarks>
        /// Get the current default Data Group. This is the Data Group to which
        /// Datamodels are assigned by default.
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetDefaultDataGroupUsingGETWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Data Group by ID
        /// </summary>
        /// <remarks>
        /// Get a specific Data Group by ID.
        /// </remarks>
        /// <param name='dataGroupId'>
        /// Data Group Id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetDataGroupByIdUsingGETWithHttpMessagesAsync(string dataGroupId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete Data Group
        /// </summary>
        /// <remarks>
        /// Delete a Data Group by its ID.
        /// </remarks>
        /// <param name='dataGroupId'>
        /// Data Group Id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> DeleteDataGroupUsingDELETEWithHttpMessagesAsync(string dataGroupId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update Data Group
        /// </summary>
        /// <remarks>
        /// Update a Data Group by it ID.
        /// </remarks>
        /// <param name='dataGroupDto'>
        /// Data Group update params
        /// </param>
        /// <param name='dataGroupId'>
        /// Data Group Id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> UpdateDataGroupUsingPATCHWithHttpMessagesAsync(DataGroupDto dataGroupDto, string dataGroupId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Assign Datamodels to Data Group
        /// </summary>
        /// <remarks>
        /// Assign one or more Datamodels to a Data Group.
        /// Datamodels can only be assigned to one Data Group at a time -
        /// assigning a Datamodel to a new Data Group will automatically remove
        /// it from its current group.
        /// </remarks>
        /// <param name='dataGroupId'>
        /// Data Group Id
        /// </param>
        /// <param name='dataSourceIds'>
        /// Set of ElastiCube Ids
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> AssignCubesUsingPOSTWithHttpMessagesAsync(string dataGroupId, IList<string> dataSourceIds, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Export Datamodel as stream
        /// </summary>
        /// <remarks>
        /// Export a full Datamodel (Schema and Data) as a stream. This
        /// endpoint requires a Datamodel ID via the `datamodelId` query
        /// parameter - not providing the ID will result in an error.
        /// </remarks>
        /// <param name='datamodelId'>
        /// A Datamodel ID.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> ExportDataSourceAsStreamUsingGETWithHttpMessagesAsync(string datamodelId = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Import full Datamodel as stream
        /// </summary>
        /// <remarks>
        /// Import a full Datamodel (Schema and Data) as a stream This endpoint
        /// allows specifying a Datamodel ID via the `datamodelId` query
        /// parameter.If provided, that Datamodel's schema and data will be
        /// overriden. In this case, Datamodel title will be ignored.Otherwise,
        /// a new Datamodel will be created. The field `newTitle` can be used
        /// to explicitly name the new Datamodel.
        /// </remarks>
        /// <param name='fileToUpload'>
        /// The file stream to import
        /// </param>
        /// <param name='datamodelId'>
        /// ID of Datamodel to import into
        /// if not specified a new datamodel will be created
        /// If specified, Datamodel title will be ignored.
        /// </param>
        /// <param name='newTitle'>
        /// When a datamodelId is not provided to create a new Datamodel, this
        /// property can be used to give the new Datamodel a specific title.
        /// If datamodelId is provided together with newTitle an error will
        /// occur.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> ImportCubeStreamUsingPOSTWithHttpMessagesAsync(Stream fileToUpload, string datamodelId = default(string), string newTitle = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List Datamodel instances
        /// </summary>
        /// <remarks>
        /// Get an array of physical instances of the Datamodel by ID.
        /// </remarks>
        /// <param name='datamodelId'>
        /// datamodelId
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetInstancesUsingGETWithHttpMessagesAsync(string datamodelId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Build Task by ID
        /// </summary>
        /// <remarks>
        /// Get a specific Build Process by ID.
        /// Use this to query a build task's current status.
        /// Completed tasks are eventually removed and querying them will
        /// result in a 404 response.
        /// </remarks>
        /// <param name='buildId'>
        /// A Build Task ID.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetBuildTaskWithHttpMessagesAsync(string buildId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Cancel/Stop a Build Task
        /// </summary>
        /// <remarks>
        /// Cancel (stop) a specific Datamodel Build Process by ID.
        /// Completed, cancelled or failed builds will not be affected by this.
        /// </remarks>
        /// <param name='buildId'>
        /// A Build Task ID.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> CancelBuildUsingDELETEWithHttpMessagesAsync(string buildId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get schedule build by cube id
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;This API is for internal use only, and may be deprecated
        /// in future releases.&lt;/br&gt;&lt;br /&gt;get schedule
        /// </remarks>
        /// <param name='datamodelId'>
        /// datamodelId
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<BuildScheduleDTO>> GetScheduleWithHttpMessagesAsync(string datamodelId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Add build schedule for cube
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;This API is for internal use only, and may be deprecated
        /// in future releases.&lt;/br&gt;&lt;br /&gt;Add build schedule
        /// </remarks>
        /// <param name='datamodelId'>
        /// datamodelId
        /// </param>
        /// <param name='buildScheduleDTO'>
        /// Item to add
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> AddScheduleWithHttpMessagesAsync(string datamodelId, BuildScheduleDTO buildScheduleDTO = default(BuildScheduleDTO), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete schedule
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;This API is for internal use only, and may be deprecated
        /// in future releases.&lt;/br&gt;&lt;br /&gt;delete schedule
        /// </remarks>
        /// <param name='datamodelId'>
        /// datamodelId
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> BuildCubeIdScheduleDeleteWithHttpMessagesAsync(string datamodelId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns table preview stream
        /// </summary>
        /// <remarks>
        /// The &lt;strong&gt;get table preview&lt;/strong&gt; endpoint returns
        /// a preview of the data in specified table.
        /// </remarks>
        /// <param name='connectionParameters'>
        /// The connection parameters for a specific datasource
        /// </param>
        /// <param name='provider'>
        /// The name of live connector provider.
        /// </param>
        /// <param name='authorization'>
        /// The user’s API token preceded by the keyword Bearer (with space
        /// between it and the token). For more information, see API tutorial.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetConnectorTablePreviewUsingPOSTWithHttpMessagesAsync(ConnectionParameters connectionParameters, string provider, string authorization = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Import a Datamodel Schema
        /// </summary>
        /// <remarks>
        /// Import a Datamodel Schema.
        /// This endpoint allows you to specify a Datamodel ID via the
        /// `datamodelId` query parameter. If provided, that Datamodel's schema
        /// will be overriden. In this case, the Datamodel title will be
        /// ignored.
        /// Otherwise, a new Datamodel will be created. The field `newTitle`
        /// can be used to explicitly name the new Datamodel.
        /// If both `datamodelId` and `newTitle` are provided, the `newTitle`
        /// field will be ignored.
        /// </remarks>
        /// <param name='body'>
        /// Datamodel schema object
        /// </param>
        /// <param name='datamodelId'>
        /// ID of the Datamodel to import.
        /// If not specified, a new datamodel will be created
        /// If specified, the Datamodel title will be ignored.
        /// </param>
        /// <param name='newTitle'>
        /// When a `datamodelId` is not provided to create a new Datamodel,
        /// this property can be used to give the new Datamodel a specific
        /// title.
        /// If `datamodelId` is provided together with `newTitle`,  the
        /// `newTitle` field will be ignored.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ErrorModel>> CreateUpdateDatamodelUsingPOSTWithHttpMessagesAsync(ElasticubeImportInput body, string datamodelId = default(string), string newTitle = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create Datamodel
        /// </summary>
        /// <remarks>
        /// Create a new Datamodel.
        ///
        /// Datamodels are created with a blank schema in `draft` state and
        /// must be built/published before they can be used in dashboards.
        /// </remarks>
        /// <param name='body'>
        /// New Datamodel Schema object
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> CreateDatamodelUsingPOSTWithHttpMessagesAsync(DatamodelSchemaInput body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Clone Datamodel
        /// </summary>
        /// <remarks>
        /// **BETA**: this API is provided for early access, and may
        /// change.&lt;br&gt;&lt;br&gt;Duplicate Datamodel by DatamodelId
        /// </remarks>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ErrorModel>> CloneDataModelUsingPostWithHttpMessagesAsync(Body body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Export Datamodel Schema
        /// </summary>
        /// <remarks>
        /// Export a Datamodel Schema. This endpoint requires a Datamodel ID
        /// via the datamodelId query parameter - not providing the ID will
        /// result in an error. An export type is also required via the type
        /// query parameter, defining which version of the Datamodel Schema to
        /// export.
        /// </remarks>
        /// <param name='datamodelId'>
        /// A Datamodel ID.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ErrorModel>> ExportDataModelUsingGetWithHttpMessagesAsync(string datamodelId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete Datamodel
        /// </summary>
        /// <remarks>
        /// Delete a specific Datamodel by its ID
        ///
        /// The Datamodel will be deleted entirely, including its Schema,
        /// running instance, and any stored data.
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ErrorModel>> DeleteDataModelUsingDeleteWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Datamodel schema by ID
        /// </summary>
        /// <remarks>
        /// Get a single Datamodel's schema by ID.
        ///
        /// The response of this endpoint represents the **current** state of
        /// the schema as can be seen in the Data page,
        /// and may differ from the schema available to queries if changes have
        /// been made since the last build/publish.
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetDataModelUsingGetWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List Datasets
        /// </summary>
        /// <remarks>
        /// Get an array of all of a Datamodel's Datasets.
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetDataModelsUsingPostWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create Dataset
        /// </summary>
        /// <remarks>
        /// **BETA**: this API is provided for early access, and may
        /// change.&lt;br&gt;&lt;br&gt;Create a new Dataset within a Datamodel
        /// Schema.
        /// </remarks>
        /// <param name='body'>
        /// New Dataset object
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> CreateDatasetUsingPostWithHttpMessagesAsync(DatasetInput body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Dataset by ID
        /// </summary>
        /// <remarks>
        /// Get a specific Dataset from a specific Datamodel Schema by their
        /// respective IDs.
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetDatasetUsingPostWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update Dataset
        /// </summary>
        /// <remarks>
        /// **BETA**: this API is provided for early access, and may
        /// change.&lt;br&gt;&lt;br&gt;Update a Dataset by ID.
        ///
        /// Only the `connection` property can be updated.
        /// </remarks>
        /// <param name='body'>
        /// Dataset object with `connection` to update to
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> UpdateDatasetUsingPatchWithHttpMessagesAsync(DatasetUpdate body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete Dataset
        /// </summary>
        /// <remarks>
        /// **BETA**: this API is provided for early access, and may
        /// change.&lt;br&gt;&lt;br&gt;Delete a Dataset from a Datamodel Schema
        /// by ID
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ErrorModel>> DeleteDatasetUsingDeleteWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List Tables
        /// </summary>
        /// <remarks>
        /// Get an array of Tables from a Dataset.
        ///
        /// Results can be filtered using the optional `name` query parameter.
        /// </remarks>
        /// <param name='name'>
        /// Table name to filter by
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> ListDatasetTablesUsingGetWithHttpMessagesAsync(string name = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create Table
        /// </summary>
        /// <remarks>
        /// Create a new Table within a Dataset.
        /// </remarks>
        /// <param name='body'>
        /// A new Table object
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> CreateDatasetTableUsingPostWithHttpMessagesAsync(TableInput body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Table by ID
        /// </summary>
        /// <remarks>
        /// Get a specific Table from the Dataset by ID.
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetDatasetTableUsingGetWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update Table
        /// </summary>
        /// <remarks>
        /// Update a Table in the Dataset by ID.
        ///
        /// This operation also updates the Table's Columns - **note** that all
        /// desired columns should be provided, including existing ones that
        /// should be kept.
        /// Any existing Columns omitted from the payload will be removed from
        /// the Table!
        /// </remarks>
        /// <param name='body'>
        /// A Table object with Columns
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> UpdateDatasetTableUsingPatchWithHttpMessagesAsync(TableOutput body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete Table
        /// </summary>
        /// <remarks>
        /// Delete a Table from the Dataset by ID.
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ErrorModel>> DeleteDatasetTableUsingDeleteWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List Relations
        /// </summary>
        /// <remarks>
        /// Get an array of Relations within the Datamodel Schema.
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> ListDataModelRelationsUsingGetWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create Relation
        /// </summary>
        /// <remarks>
        /// Create a new Relation within a Datamodel Schema.
        /// </remarks>
        /// <param name='body'>
        /// A new Relation object
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> CreateDataModelRelationUsingPostWithHttpMessagesAsync(RelationInput body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Relation by ID
        /// </summary>
        /// <remarks>
        /// Get a specific Relation from the Datamodel Schema by ID.
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetDataModelRelationUsingGetWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update Relation
        /// </summary>
        /// <remarks>
        /// Update a specific Relation in the Datamodel Schema by ID.
        ///
        /// **Note** that all desired columns must be included in the `columns`
        /// property, including existing ones that should be kept.
        /// Any existing columns omitted from the payload will be removed from
        /// the relation.
        /// </remarks>
        /// <param name='body'>
        /// An updated Relation object
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> UpdateDataModelRelationsUsingPatchWithHttpMessagesAsync(RelationInput body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete Relation
        /// </summary>
        /// <remarks>
        /// Delete a specific Relation from the Datamodel Schema by ID.
        ///
        /// This operation deletes the entire Relation - to remove one or more
        /// columns from a relation, use the `PATCH` endpoint.
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ErrorModel>> DeleteDataModelRelationsUsingDeleteWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List Datamodel schemas
        /// </summary>
        /// <remarks>
        /// Get an array of all Datamodel schemas.
        /// </remarks>
        /// <param name='title'>
        /// Datamodel Title to search for
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ErrorModel>> ListDataModelsUsingGetWithHttpMessagesAsync(string title = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List Build tasks
        /// </summary>
        /// <remarks>
        /// Get an array of Datamodel Build Processes.
        ///
        /// The results can be filtered using the `datamodelId` and `status`
        /// query parameters.
        /// </remarks>
        /// <param name='datamodelId'>
        /// ID of Datamodel to filter results by
        /// </param>
        /// <param name='status'>
        /// Build status to filter results by. Possible values include:
        /// 'pending', 'building', 'done', 'failed', 'cancelled'
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> ListBuildsUsingGetWithHttpMessagesAsync(string datamodelId = default(string), string status = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Start a Build
        /// </summary>
        /// <remarks>
        /// Create a Build Task to start building a Datamodel.
        ///
        /// The endpoint will return a response as soon as the task is created,
        /// **not** when the build is done.
        ///
        /// Use the ID from the response in the `GET` endpoint to query
        /// progress.
        /// </remarks>
        /// <param name='body'>
        /// Parameters for build task
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> CreateBuildsUsingPostWithHttpMessagesAsync(BuildInput body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Cancel/Stop Datamodel builds
        /// </summary>
        /// <remarks>
        /// Cancel (stop) all running build tasks for a specific Datamodel.
        ///
        /// This endpoint requires a Datamodel ID to be provided as the query
        /// parameter `datamodelId`.
        ///
        /// Executing this endpoint without a valid Datamodel ID will result in
        /// an error response - it is not possible to cancel all running builds
        /// system-wide.
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ErrorModel>> DeleteBuildsUsingDeleteWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

    }
}
