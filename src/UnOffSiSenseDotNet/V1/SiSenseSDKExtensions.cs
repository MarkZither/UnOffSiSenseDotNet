// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace UnOffSiSenseDotNet.V1
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for SiSenseSDK.
    /// </summary>
    public static partial class SiSenseSDKExtensions
    {
            /// <summary>
            /// Send E-Mail report for an asset
            /// </summary>
            /// <remarks>
            /// The **send report** endpoint receives asset info and recipients list and
            /// sends an email report. Note: the users and groups in the recipients section
            /// must be **shared** to the dashboard.
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reportObject'>
            /// An object containing the data needed to send the report. AssetId is the
            /// Dashboard ID and the recipients array should contain the user’s email/ID
            /// and group’s ID along with its type. The preferences section describes the
            /// content of the email to be sent.
            /// </param>
            public static object SendReports(this ISiSenseSDK operations, ReportObjectModel reportObject)
            {
                return operations.SendReportsAsync(reportObject).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Send E-Mail report for an asset
            /// </summary>
            /// <remarks>
            /// The **send report** endpoint receives asset info and recipients list and
            /// sends an email report. Note: the users and groups in the recipients section
            /// must be **shared** to the dashboard.
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reportObject'>
            /// An object containing the data needed to send the report. AssetId is the
            /// Dashboard ID and the recipients array should contain the user’s email/ID
            /// and group’s ID along with its type. The preferences section describes the
            /// content of the email to be sent.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> SendReportsAsync(this ISiSenseSDK operations, ReportObjectModel reportObject, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SendReportsWithHttpMessagesAsync(reportObject, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns cards data.
            /// </summary>
            /// <remarks>
            /// cards.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='path'>
            /// The path of the cards to get
            /// </param>
            /// <param name='authorization'>
            /// The user's API token preceded by the keyword `Bearer ` (with space between
            /// it and the token). For more information, see [API
            /// tutorial](http://developer.sisense.com/display/API2/Using+the+REST+API).
            /// </param>
            public static object GetCardsNames(this ISiSenseSDK operations, string path, string authorization = default(string))
            {
                return operations.GetCardsNamesAsync(path, authorization).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns cards data.
            /// </summary>
            /// <remarks>
            /// cards.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='path'>
            /// The path of the cards to get
            /// </param>
            /// <param name='authorization'>
            /// The user's API token preceded by the keyword `Bearer ` (with space between
            /// it and the token). For more information, see [API
            /// tutorial](http://developer.sisense.com/display/API2/Using+the+REST+API).
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetCardsNamesAsync(this ISiSenseSDK operations, string path, string authorization = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCardsNamesWithHttpMessagesAsync(path, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get tamplate by name
            /// </summary>
            /// <remarks>
            /// get tamplate
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='path'>
            /// The path of the cards to get
            /// </param>
            /// <param name='body'>
            /// Basic cards object (in `JSON` notation) to be added
            /// </param>
            /// <param name='authorization'>
            /// The user's API token preceded by the keyword `Bearer ` (with space between
            /// it and the token). For more information, see [API
            /// tutorial](http://developer.sisense.com/display/API2/Using+the+REST+API).
            /// </param>
            public static object GetCardByName(this ISiSenseSDK operations, string path, object body, string authorization = default(string))
            {
                return operations.GetCardByNameAsync(path, body, authorization).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get tamplate by name
            /// </summary>
            /// <remarks>
            /// get tamplate
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='path'>
            /// The path of the cards to get
            /// </param>
            /// <param name='body'>
            /// Basic cards object (in `JSON` notation) to be added
            /// </param>
            /// <param name='authorization'>
            /// The user's API token preceded by the keyword `Bearer ` (with space between
            /// it and the token). For more information, see [API
            /// tutorial](http://developer.sisense.com/display/API2/Using+the+REST+API).
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetCardByNameAsync(this ISiSenseSDK operations, string path, object body, string authorization = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCardByNameWithHttpMessagesAsync(path, body, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns BloX editor snippets
            /// </summary>
            /// <remarks>
            /// Snippets
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='path'>
            /// Get snippets
            /// </param>
            /// <param name='authorization'>
            /// The user's API token preceded by the keyword `Bearer ` (with space between
            /// it and the token). For more information, see [API
            /// tutorial](http://developer.sisense.com/display/API2/Using+the+REST+API).
            /// </param>
            /// <param name='snippetType'>
            /// Actions for action snippets, elements for other in-card snippets. Leaving
            /// this empty wil lreturn all snippets.
            /// </param>
            public static object GetSnippets(this ISiSenseSDK operations, string path, string authorization = default(string), string snippetType = default(string))
            {
                return operations.GetSnippetsAsync(path, authorization, snippetType).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns BloX editor snippets
            /// </summary>
            /// <remarks>
            /// Snippets
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='path'>
            /// Get snippets
            /// </param>
            /// <param name='authorization'>
            /// The user's API token preceded by the keyword `Bearer ` (with space between
            /// it and the token). For more information, see [API
            /// tutorial](http://developer.sisense.com/display/API2/Using+the+REST+API).
            /// </param>
            /// <param name='snippetType'>
            /// Actions for action snippets, elements for other in-card snippets. Leaving
            /// this empty wil lreturn all snippets.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetSnippetsAsync(this ISiSenseSDK operations, string path, string authorization = default(string), string snippetType = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSnippetsWithHttpMessagesAsync(path, authorization, snippetType, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns Actions data.
            /// </summary>
            /// <remarks>
            /// customActions.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='path'>
            /// The path of the cards to get
            /// </param>
            /// <param name='authorization'>
            /// The user's API token preceded by the keyword `Bearer ` (with space between
            /// it and the token). For more information, see [API
            /// tutorial](http://developer.sisense.com/display/API2/Using+the+REST+API).
            /// </param>
            public static object GetCustomActions(this ISiSenseSDK operations, string path, string authorization = default(string))
            {
                return operations.GetCustomActionsAsync(path, authorization).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns Actions data.
            /// </summary>
            /// <remarks>
            /// customActions.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='path'>
            /// The path of the cards to get
            /// </param>
            /// <param name='authorization'>
            /// The user's API token preceded by the keyword `Bearer ` (with space between
            /// it and the token). For more information, see [API
            /// tutorial](http://developer.sisense.com/display/API2/Using+the+REST+API).
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetCustomActionsAsync(this ISiSenseSDK operations, string path, string authorization = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCustomActionsWithHttpMessagesAsync(path, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get action by type
            /// </summary>
            /// <remarks>
            /// get Custom Action
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='path'>
            /// The path of the cards to get
            /// </param>
            /// <param name='body'>
            /// Basic cards object (in `JSON` notation) to be added
            /// </param>
            /// <param name='authorization'>
            /// The user's API token preceded by the keyword `Bearer ` (with space between
            /// it and the token). For more information, see [API
            /// tutorial](http://developer.sisense.com/display/API2/Using+the+REST+API).
            /// </param>
            public static object GetActionByType(this ISiSenseSDK operations, string path, object body, string authorization = default(string))
            {
                return operations.GetActionByTypeAsync(path, body, authorization).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get action by type
            /// </summary>
            /// <remarks>
            /// get Custom Action
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='path'>
            /// The path of the cards to get
            /// </param>
            /// <param name='body'>
            /// Basic cards object (in `JSON` notation) to be added
            /// </param>
            /// <param name='authorization'>
            /// The user's API token preceded by the keyword `Bearer ` (with space between
            /// it and the token). For more information, see [API
            /// tutorial](http://developer.sisense.com/display/API2/Using+the+REST+API).
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetActionByTypeAsync(this ISiSenseSDK operations, string path, object body, string authorization = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetActionByTypeWithHttpMessagesAsync(path, body, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Add a new tamplate
            /// </summary>
            /// <remarks>
            /// create tamplate
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='path'>
            /// The path of the cards to get
            /// </param>
            /// <param name='body'>
            /// Basic cards object (in `JSON` notation) to be added
            /// </param>
            /// <param name='authorization'>
            /// The user's API token preceded by the keyword `Bearer ` (with space between
            /// it and the token). For more information, see [API
            /// tutorial](http://developer.sisense.com/display/API2/Using+the+REST+API).
            /// </param>
            public static object SaveNewTamplate(this ISiSenseSDK operations, string path, object body, string authorization = default(string))
            {
                return operations.SaveNewTamplateAsync(path, body, authorization).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add a new tamplate
            /// </summary>
            /// <remarks>
            /// create tamplate
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='path'>
            /// The path of the cards to get
            /// </param>
            /// <param name='body'>
            /// Basic cards object (in `JSON` notation) to be added
            /// </param>
            /// <param name='authorization'>
            /// The user's API token preceded by the keyword `Bearer ` (with space between
            /// it and the token). For more information, see [API
            /// tutorial](http://developer.sisense.com/display/API2/Using+the+REST+API).
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> SaveNewTamplateAsync(this ISiSenseSDK operations, string path, object body, string authorization = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SaveNewTamplateWithHttpMessagesAsync(path, body, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Add a new Action
            /// </summary>
            /// <remarks>
            /// create Action
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='path'>
            /// The path of the cards to get
            /// </param>
            /// <param name='body'>
            /// Basic cards object (in `JSON` notation) to be added
            /// </param>
            /// <param name='authorization'>
            /// The user's API token preceded by the keyword `Bearer ` (with space between
            /// it and the token). For more information, see [API
            /// tutorial](http://developer.sisense.com/display/API2/Using+the+REST+API).
            /// </param>
            public static object SaveCustomAction(this ISiSenseSDK operations, string path, object body, string authorization = default(string))
            {
                return operations.SaveCustomActionAsync(path, body, authorization).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add a new Action
            /// </summary>
            /// <remarks>
            /// create Action
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='path'>
            /// The path of the cards to get
            /// </param>
            /// <param name='body'>
            /// Basic cards object (in `JSON` notation) to be added
            /// </param>
            /// <param name='authorization'>
            /// The user's API token preceded by the keyword `Bearer ` (with space between
            /// it and the token). For more information, see [API
            /// tutorial](http://developer.sisense.com/display/API2/Using+the+REST+API).
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> SaveCustomActionAsync(this ISiSenseSDK operations, string path, object body, string authorization = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SaveCustomActionWithHttpMessagesAsync(path, body, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete tamplate by name
            /// </summary>
            /// <remarks>
            /// get tamplate
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='path'>
            /// The path of the cards to get
            /// </param>
            /// <param name='body'>
            /// Basic cards object (in `JSON` notation) to be added
            /// </param>
            /// <param name='authorization'>
            /// The user's API token preceded by the keyword `Bearer ` (with space between
            /// it and the token). For more information, see [API
            /// tutorial](http://developer.sisense.com/display/API2/Using+the+REST+API).
            /// </param>
            public static object DeleteCard(this ISiSenseSDK operations, string path, object body, string authorization = default(string))
            {
                return operations.DeleteCardAsync(path, body, authorization).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete tamplate by name
            /// </summary>
            /// <remarks>
            /// get tamplate
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='path'>
            /// The path of the cards to get
            /// </param>
            /// <param name='body'>
            /// Basic cards object (in `JSON` notation) to be added
            /// </param>
            /// <param name='authorization'>
            /// The user's API token preceded by the keyword `Bearer ` (with space between
            /// it and the token). For more information, see [API
            /// tutorial](http://developer.sisense.com/display/API2/Using+the+REST+API).
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteCardAsync(this ISiSenseSDK operations, string path, object body, string authorization = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteCardWithHttpMessagesAsync(path, body, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete action by type
            /// </summary>
            /// <remarks>
            /// delete Custom Action
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='path'>
            /// The path of the cards to get
            /// </param>
            /// <param name='body'>
            /// Basic cards object (in `JSON` notation) to be added
            /// </param>
            /// <param name='authorization'>
            /// The user's API token preceded by the keyword `Bearer ` (with space between
            /// it and the token). For more information, see [API
            /// tutorial](http://developer.sisense.com/display/API2/Using+the+REST+API).
            /// </param>
            public static object DeleteCustomAction(this ISiSenseSDK operations, string path, object body, string authorization = default(string))
            {
                return operations.DeleteCustomActionAsync(path, body, authorization).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete action by type
            /// </summary>
            /// <remarks>
            /// delete Custom Action
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='path'>
            /// The path of the cards to get
            /// </param>
            /// <param name='body'>
            /// Basic cards object (in `JSON` notation) to be added
            /// </param>
            /// <param name='authorization'>
            /// The user's API token preceded by the keyword `Bearer ` (with space between
            /// it and the token). For more information, see [API
            /// tutorial](http://developer.sisense.com/display/API2/Using+the+REST+API).
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteCustomActionAsync(this ISiSenseSDK operations, string path, object body, string authorization = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteCustomActionWithHttpMessagesAsync(path, body, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Add a new log
            /// </summary>
            /// <remarks>
            /// create log
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='path'>
            /// The path of the cards to get
            /// </param>
            /// <param name='body'>
            /// Basic cards object (in `JSON` notation) to be added
            /// </param>
            /// <param name='authorization'>
            /// The user's API token preceded by the keyword `Bearer ` (with space between
            /// it and the token). For more information, see [API
            /// tutorial](http://developer.sisense.com/display/API2/Using+the+REST+API).
            /// </param>
            public static object Logger(this ISiSenseSDK operations, string path, object body, string authorization = default(string))
            {
                return operations.LoggerAsync(path, body, authorization).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add a new log
            /// </summary>
            /// <remarks>
            /// create log
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='path'>
            /// The path of the cards to get
            /// </param>
            /// <param name='body'>
            /// Basic cards object (in `JSON` notation) to be added
            /// </param>
            /// <param name='authorization'>
            /// The user's API token preceded by the keyword `Bearer ` (with space between
            /// it and the token). For more information, see [API
            /// tutorial](http://developer.sisense.com/display/API2/Using+the+REST+API).
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> LoggerAsync(this ISiSenseSDK operations, string path, object body, string authorization = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.LoggerWithHttpMessagesAsync(path, body, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Analyze card structure
            /// </summary>
            /// <remarks>
            /// Analyze the types of elements and actions being used within the card
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='path'>
            /// The path of the cards to get
            /// </param>
            /// <param name='body'>
            /// Basic cards object (in `JSON` notation) to be analyzed
            /// </param>
            /// <param name='authorization'>
            /// The user's API token preceded by the keyword `Bearer ` (with space between
            /// it and the token). For more information, see [API
            /// tutorial](http://developer.sisense.com/display/API2/Using+the+REST+API).
            /// </param>
            public static object CardAnalysis(this ISiSenseSDK operations, string path, object body, string authorization = default(string))
            {
                return operations.CardAnalysisAsync(path, body, authorization).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Analyze card structure
            /// </summary>
            /// <remarks>
            /// Analyze the types of elements and actions being used within the card
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='path'>
            /// The path of the cards to get
            /// </param>
            /// <param name='body'>
            /// Basic cards object (in `JSON` notation) to be analyzed
            /// </param>
            /// <param name='authorization'>
            /// The user's API token preceded by the keyword `Bearer ` (with space between
            /// it and the token). For more information, see [API
            /// tutorial](http://developer.sisense.com/display/API2/Using+the+REST+API).
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CardAnalysisAsync(this ISiSenseSDK operations, string path, object body, string authorization = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CardAnalysisWithHttpMessagesAsync(path, body, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Return email server settings
            /// </summary>
            /// <remarks>
            /// The **email server settings** used for Email Server settings managing.
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetEmailServer(this ISiSenseSDK operations)
            {
                return operations.GetEmailServerAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Return email server settings
            /// </summary>
            /// <remarks>
            /// The **email server settings** used for Email Server settings managing.
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetEmailServerAsync(this ISiSenseSDK operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetEmailServerWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Add email server settings
            /// </summary>
            /// <remarks>
            /// The **email server settings** used for Email Server settings managing.
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='emailServer'>
            /// Object with the settings of email server
            /// </param>
            /// <param name='authorization'>
            /// The user's API token preceded by the keyword `Bearer ` (with space between
            /// it and the token). For more information, see [API
            /// tutorial](http://developer.sisense.com/display/API2/Using+the+REST+API).
            /// </param>
            public static AddEmailServerOKResponse AddEmailServer(this ISiSenseSDK operations, EmailServer emailServer, string authorization = default(string))
            {
                return operations.AddEmailServerAsync(emailServer, authorization).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add email server settings
            /// </summary>
            /// <remarks>
            /// The **email server settings** used for Email Server settings managing.
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='emailServer'>
            /// Object with the settings of email server
            /// </param>
            /// <param name='authorization'>
            /// The user's API token preceded by the keyword `Bearer ` (with space between
            /// it and the token). For more information, see [API
            /// tutorial](http://developer.sisense.com/display/API2/Using+the+REST+API).
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AddEmailServerOKResponse> AddEmailServerAsync(this ISiSenseSDK operations, EmailServer emailServer, string authorization = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddEmailServerWithHttpMessagesAsync(emailServer, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update email server settings
            /// </summary>
            /// <remarks>
            /// The **email server settings** used for Email Server settings managing.
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='emailServer'>
            /// Object with the settings of email server
            /// </param>
            /// <param name='authorization'>
            /// The user's API token preceded by the keyword `Bearer ` (with space between
            /// it and the token). For more information, see [API
            /// tutorial](http://developer.sisense.com/display/API2/Using+the+REST+API).
            /// </param>
            public static UpdateEmailServerOKResponse UpdateEmailServer(this ISiSenseSDK operations, EmailServerModel emailServer, string authorization = default(string))
            {
                return operations.UpdateEmailServerAsync(emailServer, authorization).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update email server settings
            /// </summary>
            /// <remarks>
            /// The **email server settings** used for Email Server settings managing.
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='emailServer'>
            /// Object with the settings of email server
            /// </param>
            /// <param name='authorization'>
            /// The user's API token preceded by the keyword `Bearer ` (with space between
            /// it and the token). For more information, see [API
            /// tutorial](http://developer.sisense.com/display/API2/Using+the+REST+API).
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UpdateEmailServerOKResponse> UpdateEmailServerAsync(this ISiSenseSDK operations, EmailServerModel emailServer, string authorization = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateEmailServerWithHttpMessagesAsync(emailServer, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete email server settings
            /// </summary>
            /// <remarks>
            /// The **email server settings** used for Email Server settings managing.
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void DeleteEmailServer(this ISiSenseSDK operations)
            {
                operations.DeleteEmailServerAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete email server settings
            /// </summary>
            /// <remarks>
            /// The **email server settings** used for Email Server settings managing.
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteEmailServerAsync(this ISiSenseSDK operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteEmailServerWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Return public configuration settings
            /// </summary>
            /// <remarks>
            /// The **Public Configuration** used for getting public system settings.
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static GetPublicSettingsOKResponse GetPublicSettings(this ISiSenseSDK operations)
            {
                return operations.GetPublicSettingsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Return public configuration settings
            /// </summary>
            /// <remarks>
            /// The **Public Configuration** used for getting public system settings.
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GetPublicSettingsOKResponse> GetPublicSettingsAsync(this ISiSenseSDK operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPublicSettingsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns sso settings.
            /// </summary>
            /// <remarks>
            /// The **sso settings** used for single sign on configuration.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetSsoSettings(this ISiSenseSDK operations)
            {
                return operations.GetSsoSettingsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns sso settings.
            /// </summary>
            /// <remarks>
            /// The **sso settings** used for single sign on configuration.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetSsoSettingsAsync(this ISiSenseSDK operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSsoSettingsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Set sso settings.
            /// </summary>
            /// <remarks>
            /// The **sso settings** used for single sign on configuration.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sso'>
            /// Object with the sso settings.
            /// </param>
            /// <param name='authorization'>
            /// The user's API token preceded by the keyword `Bearer ` (with space between
            /// it and the token). For more information, see [API
            /// tutorial](http://developer.sisense.com/display/API2/Using+the+REST+API).
            /// </param>
            public static object SetSsoSettings(this ISiSenseSDK operations, Sso sso, string authorization = default(string))
            {
                return operations.SetSsoSettingsAsync(sso, authorization).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Set sso settings.
            /// </summary>
            /// <remarks>
            /// The **sso settings** used for single sign on configuration.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sso'>
            /// Object with the sso settings.
            /// </param>
            /// <param name='authorization'>
            /// The user's API token preceded by the keyword `Bearer ` (with space between
            /// it and the token). For more information, see [API
            /// tutorial](http://developer.sisense.com/display/API2/Using+the+REST+API).
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> SetSsoSettingsAsync(this ISiSenseSDK operations, Sso sso, string authorization = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SetSsoSettingsWithHttpMessagesAsync(sso, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns system configuration settings.
            /// </summary>
            /// <remarks>
            /// The **system settings** used for system settings configuration.
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetSystemSettings(this ISiSenseSDK operations)
            {
                return operations.GetSystemSettingsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns system configuration settings.
            /// </summary>
            /// <remarks>
            /// The **system settings** used for system settings configuration.
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetSystemSettingsAsync(this ISiSenseSDK operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSystemSettingsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds or updates system settings.
            /// </summary>
            /// <remarks>
            /// The **system settings** used for system settings configuration.
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='emailServer'>
            /// Object with the system settings.
            /// </param>
            /// <param name='authorization'>
            /// The user's API token preceded by the keyword `Bearer ` (with space between
            /// it and the token). For more information, see [API
            /// tutorial](http://developer.sisense.com/display/API2/Using+the+REST+API).
            /// </param>
            public static object SetSystemSettings(this ISiSenseSDK operations, EmailServerModelModel emailServer, string authorization = default(string))
            {
                return operations.SetSystemSettingsAsync(emailServer, authorization).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds or updates system settings.
            /// </summary>
            /// <remarks>
            /// The **system settings** used for system settings configuration.
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='emailServer'>
            /// Object with the system settings.
            /// </param>
            /// <param name='authorization'>
            /// The user's API token preceded by the keyword `Bearer ` (with space between
            /// it and the token). For more information, see [API
            /// tutorial](http://developer.sisense.com/display/API2/Using+the+REST+API).
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> SetSystemSettingsAsync(this ISiSenseSDK operations, EmailServerModelModel emailServer, string authorization = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SetSystemSettingsWithHttpMessagesAsync(emailServer, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns globalization settings
            /// </summary>
            /// <remarks>
            /// Returns locale settings, including the set locale, and whether autodetect
            /// is enabled.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='authorization'>
            /// The user's API token preceded by the keyword `Bearer ` (with space between
            /// it and the token). For more information, see [API
            /// tutorial](http://developer.sisense.com/display/API2/Using+the+REST+API).
            /// </param>
            public static object GetGlobalization(this ISiSenseSDK operations, string authorization = default(string))
            {
                return operations.GetGlobalizationAsync(authorization).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns globalization settings
            /// </summary>
            /// <remarks>
            /// Returns locale settings, including the set locale, and whether autodetect
            /// is enabled.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='authorization'>
            /// The user's API token preceded by the keyword `Bearer ` (with space between
            /// it and the token). For more information, see [API
            /// tutorial](http://developer.sisense.com/display/API2/Using+the+REST+API).
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetGlobalizationAsync(this ISiSenseSDK operations, string authorization = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetGlobalizationWithHttpMessagesAsync(authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Add globalization settings
            /// </summary>
            /// <remarks>
            /// You can change the locale or select whether the localization selection is
            /// automatically detected or not.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='globalization'>
            /// Object with the globalization settings.
            /// </param>
            /// <param name='authorization'>
            /// The user's API token preceded by the keyword `Bearer ` (with space between
            /// it and the token). For more information, see [API
            /// tutorial](http://developer.sisense.com/display/API2/Using+the+REST+API).
            /// </param>
            public static object Add(this ISiSenseSDK operations, Globalization globalization, string authorization = default(string))
            {
                return operations.AddAsync(globalization, authorization).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add globalization settings
            /// </summary>
            /// <remarks>
            /// You can change the locale or select whether the localization selection is
            /// automatically detected or not.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='globalization'>
            /// Object with the globalization settings.
            /// </param>
            /// <param name='authorization'>
            /// The user's API token preceded by the keyword `Bearer ` (with space between
            /// it and the token). For more information, see [API
            /// tutorial](http://developer.sisense.com/display/API2/Using+the+REST+API).
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> AddAsync(this ISiSenseSDK operations, Globalization globalization, string authorization = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddWithHttpMessagesAsync(globalization, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update globalization settings
            /// </summary>
            /// <remarks>
            /// You can update the locale or select whether the localization selection is
            /// automatically detected or not.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='globalization'>
            /// Object with the globalization settings.
            /// </param>
            /// <param name='authorization'>
            /// The user's API token preceded by the keyword `Bearer ` (with space between
            /// it and the token). For more information, see [API
            /// tutorial](http://developer.sisense.com/display/API2/Using+the+REST+API).
            /// </param>
            public static object Update(this ISiSenseSDK operations, Globalization globalization, string authorization = default(string))
            {
                return operations.UpdateAsync(globalization, authorization).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update globalization settings
            /// </summary>
            /// <remarks>
            /// You can update the locale or select whether the localization selection is
            /// automatically detected or not.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='globalization'>
            /// Object with the globalization settings.
            /// </param>
            /// <param name='authorization'>
            /// The user's API token preceded by the keyword `Bearer ` (with space between
            /// it and the token). For more information, see [API
            /// tutorial](http://developer.sisense.com/display/API2/Using+the+REST+API).
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateAsync(this ISiSenseSDK operations, Globalization globalization, string authorization = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(globalization, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete globalization settings
            /// </summary>
            /// <remarks>
            /// Deletes globalization settings in your server.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='authorization'>
            /// The user's API token preceded by the keyword `Bearer ` (with space between
            /// it and the token). For more information, see [API
            /// tutorial](http://developer.sisense.com/display/API2/Using+the+REST+API).
            /// </param>
            public static object RemoveGlobalization(this ISiSenseSDK operations, string authorization = default(string))
            {
                return operations.RemoveGlobalizationAsync(authorization).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete globalization settings
            /// </summary>
            /// <remarks>
            /// Deletes globalization settings in your server.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='authorization'>
            /// The user's API token preceded by the keyword `Bearer ` (with space between
            /// it and the token). For more information, see [API
            /// tutorial](http://developer.sisense.com/display/API2/Using+the+REST+API).
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> RemoveGlobalizationAsync(this ISiSenseSDK operations, string authorization = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RemoveGlobalizationWithHttpMessagesAsync(authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns translation settings
            /// </summary>
            /// <remarks>
            /// Returns all the settings for the translation service
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='authorization'>
            /// The user's API token preceded by the keyword `Bearer ` (with space between
            /// it and the token). For more information, see [API
            /// tutorial](http://developer.sisense.com/display/API2/Using+the+REST+API).
            /// </param>
            public static object GetTranslation(this ISiSenseSDK operations, string authorization = default(string))
            {
                return operations.GetTranslationAsync(authorization).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns translation settings
            /// </summary>
            /// <remarks>
            /// Returns all the settings for the translation service
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='authorization'>
            /// The user's API token preceded by the keyword `Bearer ` (with space between
            /// it and the token). For more information, see [API
            /// tutorial](http://developer.sisense.com/display/API2/Using+the+REST+API).
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetTranslationAsync(this ISiSenseSDK operations, string authorization = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTranslationWithHttpMessagesAsync(authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns pulse settings.
            /// </summary>
            /// <remarks>
            /// The **pulse settings** used for store pulse page configuration.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetPulseSettings(this ISiSenseSDK operations)
            {
                return operations.GetPulseSettingsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns pulse settings.
            /// </summary>
            /// <remarks>
            /// The **pulse settings** used for store pulse page configuration.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetPulseSettingsAsync(this ISiSenseSDK operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPulseSettingsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Set pulse settings.
            /// </summary>
            /// <remarks>
            /// The **pulse settings** used for store pulse page configuration.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='pulse'>
            /// Object with the pulse settings.
            /// </param>
            /// <param name='authorization'>
            /// The user's API token preceded by the keyword `Bearer ` (with space between
            /// it and the token). For more information, see [API
            /// tutorial](http://developer.sisense.com/display/API2/Using+the+REST+API).
            /// </param>
            public static object SetPulseSettings(this ISiSenseSDK operations, Pulse pulse, string authorization = default(string))
            {
                return operations.SetPulseSettingsAsync(pulse, authorization).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Set pulse settings.
            /// </summary>
            /// <remarks>
            /// The **pulse settings** used for store pulse page configuration.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='pulse'>
            /// Object with the pulse settings.
            /// </param>
            /// <param name='authorization'>
            /// The user's API token preceded by the keyword `Bearer ` (with space between
            /// it and the token). For more information, see [API
            /// tutorial](http://developer.sisense.com/display/API2/Using+the+REST+API).
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> SetPulseSettingsAsync(this ISiSenseSDK operations, Pulse pulse, string authorization = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SetPulseSettingsWithHttpMessagesAsync(pulse, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Patch pulse settings.
            /// </summary>
            /// <remarks>
            /// The **pulse settings** used for store pulse page configuration.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='pulse'>
            /// Object with the pulse settings.
            /// </param>
            /// <param name='authorization'>
            /// The user's API token preceded by the keyword `Bearer ` (with space between
            /// it and the token). For more information, see [API
            /// tutorial](http://developer.sisense.com/display/API2/Using+the+REST+API).
            /// </param>
            public static object Patch(this ISiSenseSDK operations, Pulse pulse, string authorization = default(string))
            {
                return operations.PatchAsync(pulse, authorization).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Patch pulse settings.
            /// </summary>
            /// <remarks>
            /// The **pulse settings** used for store pulse page configuration.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='pulse'>
            /// Object with the pulse settings.
            /// </param>
            /// <param name='authorization'>
            /// The user's API token preceded by the keyword `Bearer ` (with space between
            /// it and the token). For more information, see [API
            /// tutorial](http://developer.sisense.com/display/API2/Using+the+REST+API).
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PatchAsync(this ISiSenseSDK operations, Pulse pulse, string authorization = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchWithHttpMessagesAsync(pulse, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete pulse settings.
            /// </summary>
            /// <remarks>
            /// The **pulse settings** used for store pulse page configuration.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='authorization'>
            /// The user's API token preceded by the keyword `Bearer ` (with space between
            /// it and the token). For more information, see [API
            /// tutorial](http://developer.sisense.com/display/API2/Using+the+REST+API).
            /// </param>
            public static object RemovePulseSettings(this ISiSenseSDK operations, string authorization = default(string))
            {
                return operations.RemovePulseSettingsAsync(authorization).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete pulse settings.
            /// </summary>
            /// <remarks>
            /// The **pulse settings** used for store pulse page configuration.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='authorization'>
            /// The user's API token preceded by the keyword `Bearer ` (with space between
            /// it and the token). For more information, see [API
            /// tutorial](http://developer.sisense.com/display/API2/Using+the+REST+API).
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> RemovePulseSettingsAsync(this ISiSenseSDK operations, string authorization = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RemovePulseSettingsWithHttpMessagesAsync(authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns pivot settings.
            /// </summary>
            /// <remarks>
            /// The **pivot settings** used for store pivot configuration.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetPivotSettings(this ISiSenseSDK operations)
            {
                return operations.GetPivotSettingsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns pivot settings.
            /// </summary>
            /// <remarks>
            /// The **pivot settings** used for store pivot configuration.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetPivotSettingsAsync(this ISiSenseSDK operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPivotSettingsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Patch pivot settions.
            /// </summary>
            /// <remarks>
            /// The **pivot settings** used for store pivot configuration.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='pivot'>
            /// Object with the pivot settings.
            /// </param>
            /// <param name='authorization'>
            /// The user's API token preceded by the keyword `Bearer ` (with space between
            /// it and the token). For more information, see [API
            /// tutorial](http://developer.sisense.com/display/API2/Using+the+REST+API).
            /// </param>
            public static object PatchPivotSettings(this ISiSenseSDK operations, Pivot pivot, string authorization = default(string))
            {
                return operations.PatchPivotSettingsAsync(pivot, authorization).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Patch pivot settions.
            /// </summary>
            /// <remarks>
            /// The **pivot settings** used for store pivot configuration.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='pivot'>
            /// Object with the pivot settings.
            /// </param>
            /// <param name='authorization'>
            /// The user's API token preceded by the keyword `Bearer ` (with space between
            /// it and the token). For more information, see [API
            /// tutorial](http://developer.sisense.com/display/API2/Using+the+REST+API).
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PatchPivotSettingsAsync(this ISiSenseSDK operations, Pivot pivot, string authorization = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchPivotSettingsWithHttpMessagesAsync(pivot, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Return a language file
            /// </summary>
            /// <remarks>
            /// The **get translations/lang** endpoint returns a language file.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// The name of the language to be returned.
            /// </param>
            /// <param name='authorization'>
            /// The user's API token preceded by the keyword `Bearer ` (with space between
            /// it and the token). For more information, see [API
            /// tutorial](http://developer.sisense.com/display/API2/Using+the+REST+API).
            /// </param>
            public static object GetLang(this ISiSenseSDK operations, string lang, string authorization = default(string))
            {
                return operations.GetLangAsync(lang, authorization).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Return a language file
            /// </summary>
            /// <remarks>
            /// The **get translations/lang** endpoint returns a language file.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// The name of the language to be returned.
            /// </param>
            /// <param name='authorization'>
            /// The user's API token preceded by the keyword `Bearer ` (with space between
            /// it and the token). For more information, see [API
            /// tutorial](http://developer.sisense.com/display/API2/Using+the+REST+API).
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetLangAsync(this ISiSenseSDK operations, string lang, string authorization = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetLangWithHttpMessagesAsync(lang, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Return a language file
            /// </summary>
            /// <remarks>
            /// The **get translations/lang** endpoint returns a language file for Sisense
            /// shared components.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// The name of the language to be returned.
            /// </param>
            /// <param name='authorization'>
            /// The user's API token preceded by the keyword `Bearer ` (with space between
            /// it and the token). For more information, see [API
            /// tutorial](http://developer.sisense.com/display/API2/Using+the+REST+API).
            /// </param>
            public static object GetIntlLang(this ISiSenseSDK operations, string lang, string authorization = default(string))
            {
                return operations.GetIntlLangAsync(lang, authorization).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Return a language file
            /// </summary>
            /// <remarks>
            /// The **get translations/lang** endpoint returns a language file for Sisense
            /// shared components.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// The name of the language to be returned.
            /// </param>
            /// <param name='authorization'>
            /// The user's API token preceded by the keyword `Bearer ` (with space between
            /// it and the token). For more information, see [API
            /// tutorial](http://developer.sisense.com/display/API2/Using+the+REST+API).
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetIntlLangAsync(this ISiSenseSDK operations, string lang, string authorization = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetIntlLangWithHttpMessagesAsync(lang, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Return all supported languages
            /// </summary>
            /// <remarks>
            /// The **get translations** endpoint returns a list of all your supported
            /// languages in Sisense.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='authorization'>
            /// The user's API token preceded by the keyword `Bearer ` (with space between
            /// it and the token). For more information, see [API
            /// tutorial](http://developer.sisense.com/display/API2/Using+the+REST+API).
            /// </param>
            public static object GetAllLangs(this ISiSenseSDK operations, string authorization = default(string))
            {
                return operations.GetAllLangsAsync(authorization).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Return all supported languages
            /// </summary>
            /// <remarks>
            /// The **get translations** endpoint returns a list of all your supported
            /// languages in Sisense.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='authorization'>
            /// The user's API token preceded by the keyword `Bearer ` (with space between
            /// it and the token). For more information, see [API
            /// tutorial](http://developer.sisense.com/display/API2/Using+the+REST+API).
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetAllLangsAsync(this ISiSenseSDK operations, string authorization = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllLangsWithHttpMessagesAsync(authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns Login Lockout settings.
            /// </summary>
            /// <remarks>
            /// Get current settings for user lockout on failed login attempts
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object Get(this ISiSenseSDK operations)
            {
                return operations.GetAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns Login Lockout settings.
            /// </summary>
            /// <remarks>
            /// Get current settings for user lockout on failed login attempts
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetAsync(this ISiSenseSDK operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates Login Lockout settings.
            /// </summary>
            /// <remarks>
            /// Update settings for user lockout on failed login attempts
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='loginLockoutSettings'>
            /// Object with the Login Lockout settings.
            /// </param>
            /// <param name='authorization'>
            /// The user's API token preceded by the keyword `Bearer ` (with space between
            /// it and the token). For more information, see [API
            /// tutorial](http://developer.sisense.com/display/API2/Using+the+REST+API).
            /// </param>
            public static object UpdateLockoutUsingPatch(this ISiSenseSDK operations, LoginLockoutSettings loginLockoutSettings, string authorization = default(string))
            {
                return operations.UpdateLockoutUsingPatchAsync(loginLockoutSettings, authorization).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates Login Lockout settings.
            /// </summary>
            /// <remarks>
            /// Update settings for user lockout on failed login attempts
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='loginLockoutSettings'>
            /// Object with the Login Lockout settings.
            /// </param>
            /// <param name='authorization'>
            /// The user's API token preceded by the keyword `Bearer ` (with space between
            /// it and the token). For more information, see [API
            /// tutorial](http://developer.sisense.com/display/API2/Using+the+REST+API).
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateLockoutUsingPatchAsync(this ISiSenseSDK operations, LoginLockoutSettings loginLockoutSettings, string authorization = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateLockoutUsingPatchWithHttpMessagesAsync(loginLockoutSettings, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Ecm Model of a specific elasticube
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cubeTitle'>
            /// cubeTitle
            /// </param>
            /// <param name='server'>
            /// server
            /// </param>
            public static ManagementServiceResponseEcmModel GetEcmModelUsingGET(this ISiSenseSDK operations, string cubeTitle, string server)
            {
                return operations.GetEcmModelUsingGETAsync(cubeTitle, server).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Ecm Model of a specific elasticube
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cubeTitle'>
            /// cubeTitle
            /// </param>
            /// <param name='server'>
            /// server
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ManagementServiceResponseEcmModel> GetEcmModelUsingGETAsync(this ISiSenseSDK operations, string cubeTitle, string server, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetEcmModelUsingGETWithHttpMessagesAsync(cubeTitle, server, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Authenticate and receive token
            /// </summary>
            /// <remarks>
            /// The **login** endpoint validates passed credentials and returns an API
            /// token for subsequent requests to the API.
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='username'>
            /// User's username or email
            /// </param>
            /// <param name='password'>
            /// User's password in plain text
            /// </param>
            /// <param name='xDeviceId'>
            /// The device id.
            /// </param>
            /// <param name='localeId'>
            /// User's locale, as ISO language code (See
            /// [table](http://www.lingoes.net/en/translator/langcode.htm))
            /// </param>
            public static object Login(this ISiSenseSDK operations, string username, string password, string xDeviceId = default(string), string localeId = default(string))
            {
                return operations.LoginAsync(username, password, xDeviceId, localeId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Authenticate and receive token
            /// </summary>
            /// <remarks>
            /// The **login** endpoint validates passed credentials and returns an API
            /// token for subsequent requests to the API.
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='username'>
            /// User's username or email
            /// </param>
            /// <param name='password'>
            /// User's password in plain text
            /// </param>
            /// <param name='xDeviceId'>
            /// The device id.
            /// </param>
            /// <param name='localeId'>
            /// User's locale, as ISO language code (See
            /// [table](http://www.lingoes.net/en/translator/langcode.htm))
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> LoginAsync(this ISiSenseSDK operations, string username, string password, string xDeviceId = default(string), string localeId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.LoginWithHttpMessagesAsync(username, password, xDeviceId, localeId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Log out and revoke token
            /// </summary>
            /// <remarks>
            /// The **logout** endpoint revokes the given user's token, ensuring requests
            /// made with it will no longer work.&lt;br/&gt;A new token may be generated
            /// using the **login** endpoint.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xDeviceId'>
            /// The device id.
            /// </param>
            /// <param name='authorization'>
            /// The user's API token preceded by the keyword `Bearer ` (with space between
            /// it and the token). For more information, see [API
            /// tutorial](http://developer.sisense.com/display/API2/UsingtheRESTAPI).
            /// </param>
            /// <param name='targetDevice'>
            /// Specific Device ID who's token to revoke. If not provided, the user's API
            /// token will be revoked.
            /// </param>
            public static LogoutUnauthorizedResponse Logout(this ISiSenseSDK operations, string xDeviceId = default(string), string authorization = default(string), string targetDevice = default(string))
            {
                return operations.LogoutAsync(xDeviceId, authorization, targetDevice).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Log out and revoke token
            /// </summary>
            /// <remarks>
            /// The **logout** endpoint revokes the given user's token, ensuring requests
            /// made with it will no longer work.&lt;br/&gt;A new token may be generated
            /// using the **login** endpoint.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xDeviceId'>
            /// The device id.
            /// </param>
            /// <param name='authorization'>
            /// The user's API token preceded by the keyword `Bearer ` (with space between
            /// it and the token). For more information, see [API
            /// tutorial](http://developer.sisense.com/display/API2/UsingtheRESTAPI).
            /// </param>
            /// <param name='targetDevice'>
            /// Specific Device ID who's token to revoke. If not provided, the user's API
            /// token will be revoked.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LogoutUnauthorizedResponse> LogoutAsync(this ISiSenseSDK operations, string xDeviceId = default(string), string authorization = default(string), string targetDevice = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.LogoutWithHttpMessagesAsync(xDeviceId, authorization, targetDevice, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Log out and revoke all user's tokens
            /// </summary>
            /// <remarks>
            /// The **logout all** endpoint revokes all if a user's existing tokens, both
            /// for the API and all devices.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xDeviceId'>
            /// The device id.
            /// </param>
            /// <param name='authorization'>
            /// The user's API token preceded by the keyword `Bearer ` (with space between
            /// it and the token). For more information, see [API
            /// tutorial](http://developer.sisense.com/display/API2/UsingtheRESTAPI).
            /// </param>
            public static LogoutAllUnauthorizedResponse LogoutAll(this ISiSenseSDK operations, string xDeviceId = default(string), string authorization = default(string))
            {
                return operations.LogoutAllAsync(xDeviceId, authorization).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Log out and revoke all user's tokens
            /// </summary>
            /// <remarks>
            /// The **logout all** endpoint revokes all if a user's existing tokens, both
            /// for the API and all devices.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xDeviceId'>
            /// The device id.
            /// </param>
            /// <param name='authorization'>
            /// The user's API token preceded by the keyword `Bearer ` (with space between
            /// it and the token). For more information, see [API
            /// tutorial](http://developer.sisense.com/display/API2/UsingtheRESTAPI).
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LogoutAllUnauthorizedResponse> LogoutAllAsync(this ISiSenseSDK operations, string xDeviceId = default(string), string authorization = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.LogoutAllWithHttpMessagesAsync(xDeviceId, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Log out and revoke all user's tokens
            /// </summary>
            /// <remarks>
            /// The **logout all users** endpoint revokes existing tokens of all users,
            /// both for the API and all devices.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xDeviceId'>
            /// The device id.
            /// </param>
            /// <param name='authorization'>
            /// The user's API token preceded by the keyword `Bearer ` (with space between
            /// it and the token). For more information, see [API
            /// tutorial](http://developer.sisense.com/display/API2/UsingtheRESTAPI).
            /// </param>
            /// <param name='empty'>
            /// empty object.
            /// </param>
            public static LogoutAllUsersUnauthorizedResponse LogoutAllUsers(this ISiSenseSDK operations, string xDeviceId = default(string), string authorization = default(string), object empty = default(object))
            {
                return operations.LogoutAllUsersAsync(xDeviceId, authorization, empty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Log out and revoke all user's tokens
            /// </summary>
            /// <remarks>
            /// The **logout all users** endpoint revokes existing tokens of all users,
            /// both for the API and all devices.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xDeviceId'>
            /// The device id.
            /// </param>
            /// <param name='authorization'>
            /// The user's API token preceded by the keyword `Bearer ` (with space between
            /// it and the token). For more information, see [API
            /// tutorial](http://developer.sisense.com/display/API2/UsingtheRESTAPI).
            /// </param>
            /// <param name='empty'>
            /// empty object.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LogoutAllUsersUnauthorizedResponse> LogoutAllUsersAsync(this ISiSenseSDK operations, string xDeviceId = default(string), string authorization = default(string), object empty = default(object), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.LogoutAllUsersWithHttpMessagesAsync(xDeviceId, authorization, empty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Revoke all tokens for multiple users
            /// </summary>
            /// <remarks>
            /// The **admin logout** endpoint allows admin users to revoke all tokens of
            /// multiple users.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='users'>
            /// User IDs who's tokens to revoke, separated by a comma (`,`) and without
            /// spaces
            /// </param>
            /// <param name='xDeviceId'>
            /// The device id.
            /// </param>
            /// <param name='authorization'>
            /// The user's API token preceded by the keyword `Bearer ` (with space between
            /// it and the token). For more information, see [API
            /// tutorial](http://developer.sisense.com/display/API2/UsingtheRESTAPI).
            /// </param>
            public static LogoutUsersUnauthorizedResponse LogoutUsers(this ISiSenseSDK operations, IList<string> users, string xDeviceId = default(string), string authorization = default(string))
            {
                return operations.LogoutUsersAsync(users, xDeviceId, authorization).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Revoke all tokens for multiple users
            /// </summary>
            /// <remarks>
            /// The **admin logout** endpoint allows admin users to revoke all tokens of
            /// multiple users.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='users'>
            /// User IDs who's tokens to revoke, separated by a comma (`,`) and without
            /// spaces
            /// </param>
            /// <param name='xDeviceId'>
            /// The device id.
            /// </param>
            /// <param name='authorization'>
            /// The user's API token preceded by the keyword `Bearer ` (with space between
            /// it and the token). For more information, see [API
            /// tutorial](http://developer.sisense.com/display/API2/UsingtheRESTAPI).
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LogoutUsersUnauthorizedResponse> LogoutUsersAsync(this ISiSenseSDK operations, IList<string> users, string xDeviceId = default(string), string authorization = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.LogoutUsersWithHttpMessagesAsync(users, xDeviceId, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Revoke API tokens for multiple users
            /// </summary>
            /// <remarks>
            /// The **admin delete tokens** endpoint allows admin users to revoke all API
            /// tokens of multiple users, leaving the device tokens intact.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tokenType'>
            /// Token type to revoke. Possible values include: 'api', 'odbc', 'sso'
            /// </param>
            /// <param name='users'>
            /// User IDs who's tokens to revoke, separated by a comma (`,`) and without
            /// spaces
            /// </param>
            /// <param name='authorization'>
            /// The user's API token preceded by the keyword `Bearer ` (with space between
            /// it and the token). For more information, see [API
            /// tutorial](http://developer.sisense.com/display/API2/UsingtheRESTAPI).
            /// </param>
            public static RevokeTokensUnauthorizedResponse RevokeTokens(this ISiSenseSDK operations, string tokenType, IList<string> users, string authorization = default(string))
            {
                return operations.RevokeTokensAsync(tokenType, users, authorization).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Revoke API tokens for multiple users
            /// </summary>
            /// <remarks>
            /// The **admin delete tokens** endpoint allows admin users to revoke all API
            /// tokens of multiple users, leaving the device tokens intact.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tokenType'>
            /// Token type to revoke. Possible values include: 'api', 'odbc', 'sso'
            /// </param>
            /// <param name='users'>
            /// User IDs who's tokens to revoke, separated by a comma (`,`) and without
            /// spaces
            /// </param>
            /// <param name='authorization'>
            /// The user's API token preceded by the keyword `Bearer ` (with space between
            /// it and the token). For more information, see [API
            /// tutorial](http://developer.sisense.com/display/API2/UsingtheRESTAPI).
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RevokeTokensUnauthorizedResponse> RevokeTokensAsync(this ISiSenseSDK operations, string tokenType, IList<string> users, string authorization = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RevokeTokensWithHttpMessagesAsync(tokenType, users, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Receive token for SAML authentication
            /// </summary>
            /// <remarks>
            /// The **login_saml_callback** endpoint receives passed SAML credentials and
            /// returns an API token for subsequent requests to the API.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='relayState'>
            /// The original URL that the user requested
            /// </param>
            /// <param name='sAMLResponse'>
            /// Response from SAML identity provider with decoded user data
            /// </param>
            public static void SamlLoginCallback(this ISiSenseSDK operations, string relayState, string sAMLResponse)
            {
                operations.SamlLoginCallbackAsync(relayState, sAMLResponse).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Receive token for SAML authentication
            /// </summary>
            /// <remarks>
            /// The **login_saml_callback** endpoint receives passed SAML credentials and
            /// returns an API token for subsequent requests to the API.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='relayState'>
            /// The original URL that the user requested
            /// </param>
            /// <param name='sAMLResponse'>
            /// Response from SAML identity provider with decoded user data
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task SamlLoginCallbackAsync(this ISiSenseSDK operations, string relayState, string sAMLResponse, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.SamlLoginCallbackWithHttpMessagesAsync(relayState, sAMLResponse, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get a list of trusted servers
            /// </summary>
            /// <remarks>
            /// The **get all servers access** endpoint returns a list of trusted servers
            /// that can copy dashboards to your server.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='authorization'>
            /// The user's API token preceded by the keyword `Bearer ` (with space between
            /// it and the token). For more information, see [API
            /// tutorial](http://developer.sisense.com/display/API2/UsingtheRESTAPI).
            /// </param>
            public static void GetAllServersAccess(this ISiSenseSDK operations, string authorization = default(string))
            {
                operations.GetAllServersAccessAsync(authorization).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a list of trusted servers
            /// </summary>
            /// <remarks>
            /// The **get all servers access** endpoint returns a list of trusted servers
            /// that can copy dashboards to your server.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='authorization'>
            /// The user's API token preceded by the keyword `Bearer ` (with space between
            /// it and the token). For more information, see [API
            /// tutorial](http://developer.sisense.com/display/API2/UsingtheRESTAPI).
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetAllServersAccessAsync(this ISiSenseSDK operations, string authorization = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GetAllServersAccessWithHttpMessagesAsync(authorization, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Add a trusted server
            /// </summary>
            /// <remarks>
            /// The **add server access** endpoint add trusted server.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='serverAccess'>
            /// The server object (in `JSON` notation) to be added to the Trusted Server
            /// list.
            /// </param>
            /// <param name='authorization'>
            /// The user's API token preceded by the keyword `Bearer ` (with space between
            /// it and the token). For more information, see [API
            /// tutorial](http://developer.sisense.com/display/API2/UsingtheRESTAPI).
            /// </param>
            public static AddServerAccessBadRequestResponse AddServerAccess(this ISiSenseSDK operations, ServerAccess serverAccess, string authorization = default(string))
            {
                return operations.AddServerAccessAsync(serverAccess, authorization).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add a trusted server
            /// </summary>
            /// <remarks>
            /// The **add server access** endpoint add trusted server.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='serverAccess'>
            /// The server object (in `JSON` notation) to be added to the Trusted Server
            /// list.
            /// </param>
            /// <param name='authorization'>
            /// The user's API token preceded by the keyword `Bearer ` (with space between
            /// it and the token). For more information, see [API
            /// tutorial](http://developer.sisense.com/display/API2/UsingtheRESTAPI).
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AddServerAccessBadRequestResponse> AddServerAccessAsync(this ISiSenseSDK operations, ServerAccess serverAccess, string authorization = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddServerAccessWithHttpMessagesAsync(serverAccess, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a user's dashboards
            /// </summary>
            /// <remarks>
            /// The **get dashboards** endpoint provides access to a specified user's
            /// dashboards in their stored format as `JSON` objects.
            /// &lt;br/&gt;It's results can be filtered by parameters such as dashboard
            /// name, parent folder, or datasource.
            /// &lt;br/&gt;&lt;br/&gt;The expandable fields for the dashboard object are
            /// `widgets`, `parentFolder`, `userAuth`, `rule` and `owner`.
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='authorization'>
            /// The user's API token preceded by the keyword `Bearer ` (with space between
            /// it and the token). For more information, see [API
            /// tutorial](http://developer.sisense.com/display/API2/Using+the+REST+API).
            /// </param>
            /// <param name='parentFolder'>
            /// Parent folder ID to filter by
            /// </param>
            /// <param name='name'>
            /// Name to filter by
            /// </param>
            /// <param name='datasourceTitle'>
            /// Datasource name to filter by
            /// </param>
            /// <param name='datasourceAddress'>
            /// Datasource address to filter by
            /// </param>
            /// <param name='fields'>
            /// Whitelist of fields to return for each document. fields Can also define
            /// which fields to exclude by prefixing field names with `-`
            /// </param>
            /// <param name='expand'>
            /// List of fields that should be expanded (substitures their IDs with actual
            /// objects). May be nested using the `resource.subResource` format
            /// </param>
            public static IList<GetOwnedDashboardsOKResponseItem> GetOwnedDashboards(this ISiSenseSDK operations, string authorization = default(string), string parentFolder = default(string), string name = default(string), string datasourceTitle = default(string), string datasourceAddress = default(string), string fields = default(string), string expand = default(string))
            {
                return operations.GetOwnedDashboardsAsync(authorization, parentFolder, name, datasourceTitle, datasourceAddress, fields, expand).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a user's dashboards
            /// </summary>
            /// <remarks>
            /// The **get dashboards** endpoint provides access to a specified user's
            /// dashboards in their stored format as `JSON` objects.
            /// &lt;br/&gt;It's results can be filtered by parameters such as dashboard
            /// name, parent folder, or datasource.
            /// &lt;br/&gt;&lt;br/&gt;The expandable fields for the dashboard object are
            /// `widgets`, `parentFolder`, `userAuth`, `rule` and `owner`.
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='authorization'>
            /// The user's API token preceded by the keyword `Bearer ` (with space between
            /// it and the token). For more information, see [API
            /// tutorial](http://developer.sisense.com/display/API2/Using+the+REST+API).
            /// </param>
            /// <param name='parentFolder'>
            /// Parent folder ID to filter by
            /// </param>
            /// <param name='name'>
            /// Name to filter by
            /// </param>
            /// <param name='datasourceTitle'>
            /// Datasource name to filter by
            /// </param>
            /// <param name='datasourceAddress'>
            /// Datasource address to filter by
            /// </param>
            /// <param name='fields'>
            /// Whitelist of fields to return for each document. fields Can also define
            /// which fields to exclude by prefixing field names with `-`
            /// </param>
            /// <param name='expand'>
            /// List of fields that should be expanded (substitures their IDs with actual
            /// objects). May be nested using the `resource.subResource` format
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<GetOwnedDashboardsOKResponseItem>> GetOwnedDashboardsAsync(this ISiSenseSDK operations, string authorization = default(string), string parentFolder = default(string), string name = default(string), string datasourceTitle = default(string), string datasourceAddress = default(string), string fields = default(string), string expand = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetOwnedDashboardsWithHttpMessagesAsync(authorization, parentFolder, name, datasourceTitle, datasourceAddress, fields, expand, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Add a new dashboard
            /// </summary>
            /// <remarks>
            /// The **add dashboard** endpoint reveives a dashboard object and adds it to
            /// the user's dashboards.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dashboard'>
            /// Basic dashboard object to be added
            /// </param>
            /// <param name='authorization'>
            /// The user's API token preceded by the keyword `Bearer ` (with space between
            /// it and the token). For more information, see [API
            /// tutorial](http://developer.sisense.com/display/API2/Using+the+REST+API).
            /// </param>
            public static AddDashboardCreatedResponse AddDashboard(this ISiSenseSDK operations, DashboardModel dashboard, string authorization = default(string))
            {
                return operations.AddDashboardAsync(dashboard, authorization).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add a new dashboard
            /// </summary>
            /// <remarks>
            /// The **add dashboard** endpoint reveives a dashboard object and adds it to
            /// the user's dashboards.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dashboard'>
            /// Basic dashboard object to be added
            /// </param>
            /// <param name='authorization'>
            /// The user's API token preceded by the keyword `Bearer ` (with space between
            /// it and the token). For more information, see [API
            /// tutorial](http://developer.sisense.com/display/API2/Using+the+REST+API).
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AddDashboardCreatedResponse> AddDashboardAsync(this ISiSenseSDK operations, DashboardModel dashboard, string authorization = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddDashboardWithHttpMessagesAsync(dashboard, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
