// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace UnOffSiSenseDotNet.V1.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class NewDataContextOfLiveElasticube
    {
        /// <summary>
        /// Initializes a new instance of the NewDataContextOfLiveElasticube
        /// class.
        /// </summary>
        public NewDataContextOfLiveElasticube()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the NewDataContextOfLiveElasticube
        /// class.
        /// </summary>
        /// <param name="datatype">Possible values include: 'text',
        /// 'numeric'</param>
        public NewDataContextOfLiveElasticube(bool allMembers, IList<string> members, IList<NewDataContextOfLiveElasticubeSharesItem> shares, string datatype, string table, string column, bool live, string fullname, bool? exclusionary = default(bool?))
        {
            AllMembers = allMembers;
            Members = members;
            Shares = shares;
            Datatype = datatype;
            Table = table;
            Column = column;
            Live = live;
            Fullname = fullname;
            Exclusionary = exclusionary;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "allMembers")]
        public bool AllMembers { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "members")]
        public IList<string> Members { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "shares")]
        public IList<NewDataContextOfLiveElasticubeSharesItem> Shares { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'text', 'numeric'
        /// </summary>
        [JsonProperty(PropertyName = "datatype")]
        public string Datatype { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "table")]
        public string Table { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "column")]
        public string Column { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "live")]
        public bool Live { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "fullname")]
        public string Fullname { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "exclusionary")]
        public bool? Exclusionary { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Members == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Members");
            }
            if (Shares == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Shares");
            }
            if (Datatype == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Datatype");
            }
            if (Table == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Table");
            }
            if (Column == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Column");
            }
            if (Fullname == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Fullname");
            }
            if (Shares != null)
            {
                foreach (var element in Shares)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
