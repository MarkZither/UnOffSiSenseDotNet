// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace UnOffSiSenseDotNet.V1.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class LdapDomainSyncRequest
    {
        /// <summary>
        /// Initializes a new instance of the LdapDomainSyncRequest class.
        /// </summary>
        public LdapDomainSyncRequest()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the LdapDomainSyncRequest class.
        /// </summary>
        /// <param name="force">indicates if to sync all the changes from the
        /// Active Directory server since it was created</param>
        /// <param name="gnames">groups to sync</param>
        /// <param name="unames">users to sync</param>
        public LdapDomainSyncRequest(bool? force = default(bool?), IList<string> gnames = default(IList<string>), IList<string> unames = default(IList<string>))
        {
            Force = force;
            Gnames = gnames;
            Unames = unames;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets indicates if to sync all the changes from the Active
        /// Directory server since it was created
        /// </summary>
        [JsonProperty(PropertyName = "force")]
        public bool? Force { get; set; }

        /// <summary>
        /// Gets or sets groups to sync
        /// </summary>
        [JsonProperty(PropertyName = "gnames")]
        public IList<string> Gnames { get; set; }

        /// <summary>
        /// Gets or sets users to sync
        /// </summary>
        [JsonProperty(PropertyName = "unames")]
        public IList<string> Unames { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Gnames != null)
            {
                if (Gnames.Count != System.Linq.Enumerable.Count(System.Linq.Enumerable.Distinct(Gnames)))
                {
                    throw new ValidationException(ValidationRules.UniqueItems, "Gnames");
                }
            }
            if (Unames != null)
            {
                if (Unames.Count != System.Linq.Enumerable.Count(System.Linq.Enumerable.Distinct(Unames)))
                {
                    throw new ValidationException(ValidationRules.UniqueItems, "Unames");
                }
            }
        }
    }
}
