// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace UnOffSiSenseDotNet.V1.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class CopyRequest
    {
        /// <summary>
        /// Initializes a new instance of the CopyRequest class.
        /// </summary>
        public CopyRequest()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the CopyRequest class.
        /// </summary>
        public CopyRequest(string server = default(string), CopyRequestAuthorization authorization = default(CopyRequestAuthorization), IList<CopyRequestDashboardsItem> dashboards = default(IList<CopyRequestDashboardsItem>))
        {
            Server = server;
            Authorization = authorization;
            Dashboards = dashboards;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "server")]
        public string Server { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "authorization")]
        public CopyRequestAuthorization Authorization { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "dashboards")]
        public IList<CopyRequestDashboardsItem> Dashboards { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Server != null)
            {
                if (!System.Text.RegularExpressions.Regex.IsMatch(Server, "^https?\\:\\/\\/.+"))
                {
                    throw new ValidationException(ValidationRules.Pattern, "Server", "^https?\\:\\/\\/.+");
                }
            }
            if (Dashboards != null)
            {
                foreach (var element in Dashboards)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
