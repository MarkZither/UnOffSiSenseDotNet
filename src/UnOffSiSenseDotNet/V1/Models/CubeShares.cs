// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace UnOffSiSenseDotNet.V1.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class CubeShares
    {
        /// <summary>
        /// Initializes a new instance of the CubeShares class.
        /// </summary>
        public CubeShares()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the CubeShares class.
        /// </summary>
        public CubeShares(string server, string elasticube, IList<CubeSharesSharesItem> shares)
        {
            Server = server;
            Elasticube = elasticube;
            Shares = shares;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "server")]
        public string Server { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "elasticube")]
        public string Elasticube { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "shares")]
        public IList<CubeSharesSharesItem> Shares { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Server == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Server");
            }
            if (Elasticube == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Elasticube");
            }
            if (Shares == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Shares");
            }
            if (Shares != null)
            {
                foreach (var element in Shares)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
