// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace UnOffSiSenseDotNet.V1.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class UpdateAlertContext
    {
        /// <summary>
        /// Initializes a new instance of the UpdateAlertContext class.
        /// </summary>
        public UpdateAlertContext()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the UpdateAlertContext class.
        /// </summary>
        public UpdateAlertContext(bool? backToNormal = default(bool?), bool? buildSuccessAfterFailed = default(bool?), bool? buildSuccess = default(bool?), bool? buildFailed = default(bool?), bool? notifyOnceMet = default(bool?), bool? notifyNotMet = default(bool?), UpdateAlertContextCondition condition = default(UpdateAlertContextCondition), IList<UpdateAlertContextSourcesItem> sources = default(IList<UpdateAlertContextSourcesItem>))
        {
            BackToNormal = backToNormal;
            BuildSuccessAfterFailed = buildSuccessAfterFailed;
            BuildSuccess = buildSuccess;
            BuildFailed = buildFailed;
            NotifyOnceMet = notifyOnceMet;
            NotifyNotMet = notifyNotMet;
            Condition = condition;
            Sources = sources;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "backToNormal")]
        public bool? BackToNormal { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "buildSuccessAfterFailed")]
        public bool? BuildSuccessAfterFailed { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "buildSuccess")]
        public bool? BuildSuccess { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "buildFailed")]
        public bool? BuildFailed { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "notifyOnceMet")]
        public bool? NotifyOnceMet { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "notifyNotMet")]
        public bool? NotifyNotMet { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "condition")]
        public UpdateAlertContextCondition Condition { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "sources")]
        public IList<UpdateAlertContextSourcesItem> Sources { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Condition != null)
            {
                Condition.Validate();
            }
            if (Sources != null)
            {
                if (Sources.Count != System.Linq.Enumerable.Count(System.Linq.Enumerable.Distinct(Sources)))
                {
                    throw new ValidationException(ValidationRules.UniqueItems, "Sources");
                }
                foreach (var element in Sources)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
