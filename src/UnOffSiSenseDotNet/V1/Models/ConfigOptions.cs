// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace UnOffSiSenseDotNet.V1.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// ConfigOptions
    /// </summary>
    public partial class ConfigOptions
    {
        /// <summary>
        /// Initializes a new instance of the ConfigOptions class.
        /// </summary>
        public ConfigOptions()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ConfigOptions class.
        /// </summary>
        public ConfigOptions(string authorityCertificate = default(string), string clientCertificate = default(string), string privateKey = default(string), string protocol = default(string), string table = default(string), string culture = default(string), string delimiter = default(string), bool? encrypt = default(bool?), string endDate = default(string), string excludeIfBegins = default(string), string excludeIfContains = default(string), bool? fieldsInFirstRow = default(bool?), IList<string> files = default(IList<string>), string folder = default(string), bool? hasHeader = default(bool?), int? ignoreFirstRows = default(int?), int? ignoreLastRows = default(int?), string importQuery = default(string), string managedAccounts = default(string), string profileIds = default(string), string profileNames = default(string), string query = default(string), string startDate = default(string), string staticRange = default(string), string stringQuote = default(string), bool? trustServerCertificate = default(bool?), IList<string> managedAccounts1 = default(IList<string>), IList<string> profileIds1 = default(IList<string>), IList<string> profileNames1 = default(IList<string>))
        {
            AuthorityCertificate = authorityCertificate;
            ClientCertificate = clientCertificate;
            PrivateKey = privateKey;
            Protocol = protocol;
            Table = table;
            Culture = culture;
            Delimiter = delimiter;
            Encrypt = encrypt;
            EndDate = endDate;
            ExcludeIfBegins = excludeIfBegins;
            ExcludeIfContains = excludeIfContains;
            FieldsInFirstRow = fieldsInFirstRow;
            Files = files;
            Folder = folder;
            HasHeader = hasHeader;
            IgnoreFirstRows = ignoreFirstRows;
            IgnoreLastRows = ignoreLastRows;
            ImportQuery = importQuery;
            ManagedAccounts = managedAccounts;
            ProfileIds = profileIds;
            ProfileNames = profileNames;
            Query = query;
            StartDate = startDate;
            StaticRange = staticRange;
            StringQuote = stringQuote;
            TrustServerCertificate = trustServerCertificate;
            ManagedAccounts1 = managedAccounts1;
            ProfileIds1 = profileIds1;
            ProfileNames1 = profileNames1;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "AuthorityCertificate")]
        public string AuthorityCertificate { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ClientCertificate")]
        public string ClientCertificate { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "PrivateKey")]
        public string PrivateKey { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Protocol")]
        public string Protocol { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Table")]
        public string Table { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "culture")]
        public string Culture { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "delimiter")]
        public string Delimiter { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "encrypt")]
        public bool? Encrypt { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "endDate")]
        public string EndDate { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "excludeIfBegins")]
        public string ExcludeIfBegins { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "excludeIfContains")]
        public string ExcludeIfContains { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "fieldsInFirstRow")]
        public bool? FieldsInFirstRow { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "files")]
        public IList<string> Files { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "folder")]
        public string Folder { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "hasHeader")]
        public bool? HasHeader { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ignoreFirstRows")]
        public int? IgnoreFirstRows { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ignoreLastRows")]
        public int? IgnoreLastRows { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "importQuery")]
        public string ImportQuery { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "managedAccounts")]
        public string ManagedAccounts { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "profileIds")]
        public string ProfileIds { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "profileNames")]
        public string ProfileNames { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "query")]
        public string Query { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "startDate")]
        public string StartDate { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "staticRange")]
        public string StaticRange { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "stringQuote")]
        public string StringQuote { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "trustServerCertificate")]
        public bool? TrustServerCertificate { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ManagedAccounts")]
        public IList<string> ManagedAccounts1 { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ProfileIds")]
        public IList<string> ProfileIds1 { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ProfileNames")]
        public IList<string> ProfileNames1 { get; set; }

    }
}
