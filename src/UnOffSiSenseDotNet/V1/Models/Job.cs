// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace UnOffSiSenseDotNet.V1.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    public partial class Job
    {
        /// <summary>
        /// Initializes a new instance of the Job class.
        /// </summary>
        public Job()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Job class.
        /// </summary>
        /// <param name="_id">Job Id</param>
        /// <param name="jobType">Job type</param>
        /// <param name="active">Job status, active or not</param>
        /// <param name="timezone">Job timezone number format</param>
        /// <param name="tzName">Job timezone string format</param>
        /// <param name="schedule">Job cron time execution</param>
        /// <param name="isDataChange">Job trigger by schedule or by data
        /// change</param>
        /// <param name="lastExecution">Job last execution time</param>
        /// <param name="executionPerDay">Job maximum execution limit, for
        /// isDataChange type</param>
        /// <param name="executionDayCounter">Job execution per day
        /// storage</param>
        /// <param name="context">Job context</param>
        public Job(string _id = default(string), string jobType = default(string), bool? active = default(bool?), double? timezone = default(double?), string tzName = default(string), string schedule = default(string), bool? isDataChange = default(bool?), string lastExecution = default(string), double? executionPerDay = default(double?), object executionDayCounter = default(object), JobContext context = default(JobContext))
        {
            this._id = _id;
            JobType = jobType;
            Active = active;
            Timezone = timezone;
            TzName = tzName;
            Schedule = schedule;
            IsDataChange = isDataChange;
            LastExecution = lastExecution;
            ExecutionPerDay = executionPerDay;
            ExecutionDayCounter = executionDayCounter;
            Context = context;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets job Id
        /// </summary>
        [JsonProperty(PropertyName = "_id")]
        public string _id { get; set; }

        /// <summary>
        /// Gets or sets job type
        /// </summary>
        [JsonProperty(PropertyName = "jobType")]
        public string JobType { get; set; }

        /// <summary>
        /// Gets or sets job status, active or not
        /// </summary>
        [JsonProperty(PropertyName = "active")]
        public bool? Active { get; set; }

        /// <summary>
        /// Gets or sets job timezone number format
        /// </summary>
        [JsonProperty(PropertyName = "timezone")]
        public double? Timezone { get; set; }

        /// <summary>
        /// Gets or sets job timezone string format
        /// </summary>
        [JsonProperty(PropertyName = "tzName")]
        public string TzName { get; set; }

        /// <summary>
        /// Gets or sets job cron time execution
        /// </summary>
        [JsonProperty(PropertyName = "schedule")]
        public string Schedule { get; set; }

        /// <summary>
        /// Gets or sets job trigger by schedule or by data change
        /// </summary>
        [JsonProperty(PropertyName = "isDataChange")]
        public bool? IsDataChange { get; set; }

        /// <summary>
        /// Gets or sets job last execution time
        /// </summary>
        [JsonProperty(PropertyName = "lastExecution")]
        public string LastExecution { get; set; }

        /// <summary>
        /// Gets or sets job maximum execution limit, for isDataChange type
        /// </summary>
        [JsonProperty(PropertyName = "executionPerDay")]
        public double? ExecutionPerDay { get; set; }

        /// <summary>
        /// Gets or sets job execution per day storage
        /// </summary>
        [JsonProperty(PropertyName = "executionDayCounter")]
        public object ExecutionDayCounter { get; set; }

        /// <summary>
        /// Gets or sets job context
        /// </summary>
        [JsonProperty(PropertyName = "context")]
        public JobContext Context { get; set; }

    }
}
