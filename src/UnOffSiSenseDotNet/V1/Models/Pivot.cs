// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace UnOffSiSenseDotNet.V1.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class Pivot
    {
        /// <summary>
        /// Initializes a new instance of the Pivot class.
        /// </summary>
        public Pivot()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Pivot class.
        /// </summary>
        /// <param name="limit">Max rows count in pivot.</param>
        /// <param name="columnsLimit">Max columns count in pivot.</param>
        /// <param name="allowHtml">Allow render html in pivot2 cells</param>
        public Pivot(int? limit = default(int?), int? columnsLimit = default(int?), bool? allowHtml = default(bool?))
        {
            Limit = limit;
            ColumnsLimit = columnsLimit;
            AllowHtml = allowHtml;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets max rows count in pivot.
        /// </summary>
        [JsonProperty(PropertyName = "limit")]
        public int? Limit { get; set; }

        /// <summary>
        /// Gets or sets max columns count in pivot.
        /// </summary>
        [JsonProperty(PropertyName = "columnsLimit")]
        public int? ColumnsLimit { get; set; }

        /// <summary>
        /// Gets or sets allow render html in pivot2 cells
        /// </summary>
        [JsonProperty(PropertyName = "allowHtml")]
        public bool? AllowHtml { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Limit != null)
            {
                if (Limit < 0)
                {
                    throw new ValidationException(ValidationRules.InclusiveMinimum, "Limit", 0);
                }
            }
            if (ColumnsLimit != null)
            {
                if (ColumnsLimit < 1)
                {
                    throw new ValidationException(ValidationRules.InclusiveMinimum, "ColumnsLimit", 1);
                }
            }
        }
    }
}
