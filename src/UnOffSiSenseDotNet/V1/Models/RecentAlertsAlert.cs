// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace UnOffSiSenseDotNet.V1.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class RecentAlertsAlert
    {
        /// <summary>
        /// Initializes a new instance of the RecentAlertsAlert class.
        /// </summary>
        public RecentAlertsAlert()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the RecentAlertsAlert class.
        /// </summary>
        public RecentAlertsAlert(string name, string ownerId, string ownerName, object jaql = default(object))
        {
            Name = name;
            OwnerId = ownerId;
            OwnerName = ownerName;
            Jaql = jaql;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ownerId")]
        public string OwnerId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ownerName")]
        public string OwnerName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "jaql")]
        public object Jaql { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (OwnerId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "OwnerId");
            }
            if (OwnerName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "OwnerName");
            }
            if (OwnerId != null)
            {
                if (!System.Text.RegularExpressions.Regex.IsMatch(OwnerId, "^[0-9a-fA-F]{24}$"))
                {
                    throw new ValidationException(ValidationRules.Pattern, "OwnerId", "^[0-9a-fA-F]{24}$");
                }
            }
        }
    }
}
