// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace UnOffSiSenseDotNet.V1.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Properties to get suggestion items
    /// </summary>
    public partial class SuggestionProperties
    {
        /// <summary>
        /// Initializes a new instance of the SuggestionProperties class.
        /// </summary>
        public SuggestionProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SuggestionProperties class.
        /// </summary>
        /// <param name="datasource">datasource name</param>
        /// <param name="type">define suggestion type [widgets]</param>
        /// <param name="fields">which items to look for suggestions</param>
        /// <param name="count">how many items to return. By default 20</param>
        /// <param name="skip">number of items to skip. By default 0</param>
        /// <param name="popular">include popular fields or not. By default
        /// true</param>
        public SuggestionProperties(object datasource, string type, IList<object> fields, double? count = default(double?), double? skip = default(double?), bool? popular = default(bool?))
        {
            Datasource = datasource;
            Type = type;
            Count = count;
            Fields = fields;
            Skip = skip;
            Popular = popular;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets datasource name
        /// </summary>
        [JsonProperty(PropertyName = "datasource")]
        public object Datasource { get; set; }

        /// <summary>
        /// Gets or sets define suggestion type [widgets]
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; set; }

        /// <summary>
        /// Gets or sets how many items to return. By default 20
        /// </summary>
        [JsonProperty(PropertyName = "count")]
        public double? Count { get; set; }

        /// <summary>
        /// Gets or sets which items to look for suggestions
        /// </summary>
        [JsonProperty(PropertyName = "fields")]
        public IList<object> Fields { get; set; }

        /// <summary>
        /// Gets or sets number of items to skip. By default 0
        /// </summary>
        [JsonProperty(PropertyName = "skip")]
        public double? Skip { get; set; }

        /// <summary>
        /// Gets or sets include popular fields or not. By default true
        /// </summary>
        [JsonProperty(PropertyName = "popular")]
        public bool? Popular { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Datasource == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Datasource");
            }
            if (Type == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Type");
            }
            if (Fields == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Fields");
            }
        }
    }
}
