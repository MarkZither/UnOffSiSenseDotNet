// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace UnOffSiSenseDotNet.V1.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class DashboardReplace
    {
        /// <summary>
        /// Initializes a new instance of the DashboardReplace class.
        /// </summary>
        public DashboardReplace()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DashboardReplace class.
        /// </summary>
        /// <param name="oid">The ID of the dashboard to replace</param>
        /// <param name="userId">The ID of the user that created the copy that
        /// will be used as the new version</param>
        public DashboardReplace(string oid, string userId)
        {
            Oid = oid;
            UserId = userId;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the ID of the dashboard to replace
        /// </summary>
        [JsonProperty(PropertyName = "oid")]
        public string Oid { get; set; }

        /// <summary>
        /// Gets or sets the ID of the user that created the copy that will be
        /// used as the new version
        /// </summary>
        [JsonProperty(PropertyName = "userId")]
        public string UserId { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Oid == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Oid");
            }
            if (UserId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "UserId");
            }
            if (Oid != null)
            {
                if (!System.Text.RegularExpressions.Regex.IsMatch(Oid, "^[0-9a-fA-F]{24}$"))
                {
                    throw new ValidationException(ValidationRules.Pattern, "Oid", "^[0-9a-fA-F]{24}$");
                }
            }
            if (UserId != null)
            {
                if (!System.Text.RegularExpressions.Regex.IsMatch(UserId, "^[0-9a-fA-F]{24}$"))
                {
                    throw new ValidationException(ValidationRules.Pattern, "UserId", "^[0-9a-fA-F]{24}$");
                }
            }
        }
    }
}
