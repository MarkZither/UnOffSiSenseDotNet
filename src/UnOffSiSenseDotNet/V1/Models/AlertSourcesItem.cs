// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace UnOffSiSenseDotNet.V1.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class AlertSourcesItem
    {
        /// <summary>
        /// Initializes a new instance of the AlertSourcesItem class.
        /// </summary>
        public AlertSourcesItem()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AlertSourcesItem class.
        /// </summary>
        /// <param name="type">Possible values include: 'cube', 'server',
        /// 'live'</param>
        public AlertSourcesItem(string type, string name = default(string), string oid = default(string), string server = default(string))
        {
            Name = name;
            Oid = oid;
            Server = server;
            Type = type;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "oid")]
        public string Oid { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "server")]
        public string Server { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'cube', 'server', 'live'
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Type == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Type");
            }
            if (Oid != null)
            {
                if (!System.Text.RegularExpressions.Regex.IsMatch(Oid, "^[0-9a-fA-F]{24}$"))
                {
                    throw new ValidationException(ValidationRules.Pattern, "Oid", "^[0-9a-fA-F]{24}$");
                }
            }
        }
    }
}
