// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace UnOffSiSenseDotNet.V1.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class AddAlert
    {
        /// <summary>
        /// Initializes a new instance of the AddAlert class.
        /// </summary>
        public AddAlert()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AddAlert class.
        /// </summary>
        /// <param name="category">Possible values include: 'system', 'kpi',
        /// 'dashboard'</param>
        /// <param name="type">Possible values include: 'build', 'kpi'</param>
        public AddAlert(string name, bool enabled, IList<AddAlertPartiesItem> parties, string category, string type, AddAlertActionModel action, string message = default(string), string script = default(string), IList<string> disabledUsers = default(IList<string>), string owner = default(string), AddAlertContext context = default(AddAlertContext), AddAlertScheduler scheduler = default(AddAlertScheduler))
        {
            Name = name;
            Message = message;
            Enabled = enabled;
            Script = script;
            Parties = parties;
            DisabledUsers = disabledUsers;
            Category = category;
            Type = type;
            Owner = owner;
            Context = context;
            Action = action;
            Scheduler = scheduler;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "message")]
        public string Message { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "enabled")]
        public bool Enabled { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "script")]
        public string Script { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "parties")]
        public IList<AddAlertPartiesItem> Parties { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "disabledUsers")]
        public IList<string> DisabledUsers { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'system', 'kpi', 'dashboard'
        /// </summary>
        [JsonProperty(PropertyName = "category")]
        public string Category { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'build', 'kpi'
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "owner")]
        public string Owner { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "context")]
        public AddAlertContext Context { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "action")]
        public AddAlertActionModel Action { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "scheduler")]
        public AddAlertScheduler Scheduler { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (Parties == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Parties");
            }
            if (Category == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Category");
            }
            if (Type == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Type");
            }
            if (Action == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Action");
            }
            if (Name != null)
            {
                if (Name.Length < 1)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Name", 1);
                }
            }
            if (Parties != null)
            {
                if (Parties.Count != System.Linq.Enumerable.Count(System.Linq.Enumerable.Distinct(Parties)))
                {
                    throw new ValidationException(ValidationRules.UniqueItems, "Parties");
                }
                foreach (var element in Parties)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (DisabledUsers != null)
            {
                if (DisabledUsers.Count != System.Linq.Enumerable.Count(System.Linq.Enumerable.Distinct(DisabledUsers)))
                {
                    throw new ValidationException(ValidationRules.UniqueItems, "DisabledUsers");
                }
            }
            if (Owner != null)
            {
                if (!System.Text.RegularExpressions.Regex.IsMatch(Owner, "^[0-9a-fA-F]{24}$"))
                {
                    throw new ValidationException(ValidationRules.Pattern, "Owner", "^[0-9a-fA-F]{24}$");
                }
            }
            if (Context != null)
            {
                Context.Validate();
            }
            if (Scheduler != null)
            {
                Scheduler.Validate();
            }
        }
    }
}
