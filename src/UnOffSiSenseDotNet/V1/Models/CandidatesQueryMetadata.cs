// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace UnOffSiSenseDotNet.V1.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// query metadata
    /// </summary>
    public partial class CandidatesQueryMetadata
    {
        /// <summary>
        /// Initializes a new instance of the CandidatesQueryMetadata class.
        /// </summary>
        public CandidatesQueryMetadata()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the CandidatesQueryMetadata class.
        /// </summary>
        /// <param name="target">which items to look for suggestions</param>
        /// <param name="popular">include popular fields or not</param>
        /// <param name="total">total items which match query metadata</param>
        /// <param name="skip">number of skiped items</param>
        /// <param name="count">number of returned items</param>
        public CandidatesQueryMetadata(IList<string> target = default(IList<string>), bool? popular = default(bool?), double? total = default(double?), double? skip = default(double?), double? count = default(double?))
        {
            Target = target;
            Popular = popular;
            Total = total;
            Skip = skip;
            Count = count;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets which items to look for suggestions
        /// </summary>
        [JsonProperty(PropertyName = "target")]
        public IList<string> Target { get; set; }

        /// <summary>
        /// Gets or sets include popular fields or not
        /// </summary>
        [JsonProperty(PropertyName = "popular")]
        public bool? Popular { get; set; }

        /// <summary>
        /// Gets or sets total items which match query metadata
        /// </summary>
        [JsonProperty(PropertyName = "total")]
        public double? Total { get; set; }

        /// <summary>
        /// Gets or sets number of skiped items
        /// </summary>
        [JsonProperty(PropertyName = "skip")]
        public double? Skip { get; set; }

        /// <summary>
        /// Gets or sets number of returned items
        /// </summary>
        [JsonProperty(PropertyName = "count")]
        public double? Count { get; set; }

    }
}
