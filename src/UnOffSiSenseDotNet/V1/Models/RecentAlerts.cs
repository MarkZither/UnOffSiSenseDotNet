// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace UnOffSiSenseDotNet.V1.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class RecentAlerts
    {
        /// <summary>
        /// Initializes a new instance of the RecentAlerts class.
        /// </summary>
        public RecentAlerts()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the RecentAlerts class.
        /// </summary>
        /// <param name="status">Possible values include: 'completed',
        /// 'evaluation'</param>
        public RecentAlerts(string status, bool triggered, RecentAlertsAlert alert)
        {
            Status = status;
            Triggered = triggered;
            Alert = alert;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets possible values include: 'completed', 'evaluation'
        /// </summary>
        [JsonProperty(PropertyName = "status")]
        public string Status { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "triggered")]
        public bool Triggered { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "alert")]
        public RecentAlertsAlert Alert { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Status == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Status");
            }
            if (Alert == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Alert");
            }
            if (Alert != null)
            {
                Alert.Validate();
            }
        }
    }
}
