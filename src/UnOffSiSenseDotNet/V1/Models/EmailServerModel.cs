// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace UnOffSiSenseDotNet.V1.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class EmailServerModel
    {
        /// <summary>
        /// Initializes a new instance of the EmailServerModel class.
        /// </summary>
        public EmailServerModel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the EmailServerModel class.
        /// </summary>
        /// <param name="enable">If TRUE enable email server instead of
        /// default.</param>
        /// <param name="host">Hostname or IP address to connect to.</param>
        /// <param name="port">Port to connect to.</param>
        /// <param name="secure">If TRUE the connection will only use TLS. If
        /// false (the default), TLS may still be upgraded to if available via
        /// the STARTTLS command.</param>
        /// <param name="ignoreTLS">If this is TRUE and secure is FALSE, TLS
        /// will not be used (either to connect, or as a STARTTLS connection
        /// upgrade command).</param>
        /// <param name="requireTLS">If this is TRUE and secure is FALSE, it
        /// forces application to use STARTTLS even if the server does not
        /// advertise support for it.</param>
        /// <param name="connectionTimeout">How many milliseconds to wait for
        /// the connection to establish.</param>
        /// <param name="greetingTimeout">How many milliseconds to wait for the
        /// greeting after connection is established.</param>
        /// <param name="socketTimeout">How many milliseconds of inactivity to
        /// allow.</param>
        /// <param name="user">User name.</param>
        /// <param name="pass">User password.</param>
        /// <param name="logger">If set to true then logs to console. If value
        /// is not set or is false then nothing is logged.</param>
        /// <param name="debug">If set to true, then logs SMTP traffic,
        /// otherwise logs only transaction events.</param>
        /// <param name="customAuthMethod">Custom authentication method
        /// (NTLM)</param>
        /// <param name="type">SMTP or Mandrill</param>
        /// <param name="apiKey">Mandrill API Key</param>
        /// <param name="workstation">NTLM workstation</param>
        /// <param name="domain">NTML domain</param>
        /// <param name="senderName">Name of sender.</param>
        /// <param name="senderEmail">Email of sender.</param>
        public EmailServerModel(bool? enable = default(bool?), string host = default(string), int? port = default(int?), bool? secure = default(bool?), bool? ignoreTLS = default(bool?), bool? requireTLS = default(bool?), int? connectionTimeout = default(int?), int? greetingTimeout = default(int?), int? socketTimeout = default(int?), string user = default(string), string pass = default(string), bool? logger = default(bool?), bool? debug = default(bool?), string customAuthMethod = default(string), string type = default(string), string apiKey = default(string), string workstation = default(string), string domain = default(string), string senderName = default(string), string senderEmail = default(string))
        {
            Enable = enable;
            Host = host;
            Port = port;
            Secure = secure;
            IgnoreTLS = ignoreTLS;
            RequireTLS = requireTLS;
            ConnectionTimeout = connectionTimeout;
            GreetingTimeout = greetingTimeout;
            SocketTimeout = socketTimeout;
            User = user;
            Pass = pass;
            Logger = logger;
            Debug = debug;
            CustomAuthMethod = customAuthMethod;
            Type = type;
            ApiKey = apiKey;
            Workstation = workstation;
            Domain = domain;
            SenderName = senderName;
            SenderEmail = senderEmail;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets if TRUE enable email server instead of default.
        /// </summary>
        [JsonProperty(PropertyName = "enable")]
        public bool? Enable { get; set; }

        /// <summary>
        /// Gets or sets hostname or IP address to connect to.
        /// </summary>
        [JsonProperty(PropertyName = "host")]
        public string Host { get; set; }

        /// <summary>
        /// Gets or sets port to connect to.
        /// </summary>
        [JsonProperty(PropertyName = "port")]
        public int? Port { get; set; }

        /// <summary>
        /// Gets or sets if TRUE the connection will only use TLS. If false
        /// (the default), TLS may still be upgraded to if available via the
        /// STARTTLS command.
        /// </summary>
        [JsonProperty(PropertyName = "secure")]
        public bool? Secure { get; set; }

        /// <summary>
        /// Gets or sets if this is TRUE and secure is FALSE, TLS will not be
        /// used (either to connect, or as a STARTTLS connection upgrade
        /// command).
        /// </summary>
        [JsonProperty(PropertyName = "ignoreTLS")]
        public bool? IgnoreTLS { get; set; }

        /// <summary>
        /// Gets or sets if this is TRUE and secure is FALSE, it forces
        /// application to use STARTTLS even if the server does not advertise
        /// support for it.
        /// </summary>
        [JsonProperty(PropertyName = "requireTLS")]
        public bool? RequireTLS { get; set; }

        /// <summary>
        /// Gets or sets how many milliseconds to wait for the connection to
        /// establish.
        /// </summary>
        [JsonProperty(PropertyName = "connectionTimeout")]
        public int? ConnectionTimeout { get; set; }

        /// <summary>
        /// Gets or sets how many milliseconds to wait for the greeting after
        /// connection is established.
        /// </summary>
        [JsonProperty(PropertyName = "greetingTimeout")]
        public int? GreetingTimeout { get; set; }

        /// <summary>
        /// Gets or sets how many milliseconds of inactivity to allow.
        /// </summary>
        [JsonProperty(PropertyName = "socketTimeout")]
        public int? SocketTimeout { get; set; }

        /// <summary>
        /// Gets or sets user name.
        /// </summary>
        [JsonProperty(PropertyName = "user")]
        public string User { get; set; }

        /// <summary>
        /// Gets or sets user password.
        /// </summary>
        [JsonProperty(PropertyName = "pass")]
        public string Pass { get; set; }

        /// <summary>
        /// Gets or sets if set to true then logs to console. If value is not
        /// set or is false then nothing is logged.
        /// </summary>
        [JsonProperty(PropertyName = "logger")]
        public bool? Logger { get; set; }

        /// <summary>
        /// Gets or sets if set to true, then logs SMTP traffic, otherwise logs
        /// only transaction events.
        /// </summary>
        [JsonProperty(PropertyName = "debug")]
        public bool? Debug { get; set; }

        /// <summary>
        /// Gets or sets custom authentication method (NTLM)
        /// </summary>
        [JsonProperty(PropertyName = "customAuthMethod")]
        public string CustomAuthMethod { get; set; }

        /// <summary>
        /// Gets or sets SMTP or Mandrill
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; set; }

        /// <summary>
        /// Gets or sets mandrill API Key
        /// </summary>
        [JsonProperty(PropertyName = "apiKey")]
        public string ApiKey { get; set; }

        /// <summary>
        /// Gets or sets NTLM workstation
        /// </summary>
        [JsonProperty(PropertyName = "workstation")]
        public string Workstation { get; set; }

        /// <summary>
        /// Gets or sets NTML domain
        /// </summary>
        [JsonProperty(PropertyName = "domain")]
        public string Domain { get; set; }

        /// <summary>
        /// Gets or sets name of sender.
        /// </summary>
        [JsonProperty(PropertyName = "senderName")]
        public string SenderName { get; set; }

        /// <summary>
        /// Gets or sets email of sender.
        /// </summary>
        [JsonProperty(PropertyName = "senderEmail")]
        public string SenderEmail { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (ConnectionTimeout != null)
            {
                if (ConnectionTimeout < 0)
                {
                    throw new ValidationException(ValidationRules.InclusiveMinimum, "ConnectionTimeout", 0);
                }
            }
            if (GreetingTimeout != null)
            {
                if (GreetingTimeout < 0)
                {
                    throw new ValidationException(ValidationRules.InclusiveMinimum, "GreetingTimeout", 0);
                }
            }
            if (SocketTimeout != null)
            {
                if (SocketTimeout < 0)
                {
                    throw new ValidationException(ValidationRules.InclusiveMinimum, "SocketTimeout", 0);
                }
            }
        }
    }
}
