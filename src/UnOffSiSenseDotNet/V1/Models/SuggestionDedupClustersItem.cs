// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace UnOffSiSenseDotNet.V1.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class SuggestionDedupClustersItem
    {
        /// <summary>
        /// Initializes a new instance of the SuggestionDedupClustersItem
        /// class.
        /// </summary>
        public SuggestionDedupClustersItem()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SuggestionDedupClustersItem
        /// class.
        /// </summary>
        public SuggestionDedupClustersItem(IList<SuggestionDedupClustersItemMembersItem> members, string representative = default(string), bool? isChecked = default(bool?))
        {
            Members = members;
            Representative = representative;
            IsChecked = isChecked;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "members")]
        public IList<SuggestionDedupClustersItemMembersItem> Members { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "representative")]
        public string Representative { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "isChecked")]
        public bool? IsChecked { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Members == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Members");
            }
            if (Members != null)
            {
                if (Members.Count < 1)
                {
                    throw new ValidationException(ValidationRules.MinItems, "Members", 1);
                }
                foreach (var element in Members)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
