// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace UnOffSiSenseDotNet.V1.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class UpdateAlertContextCondition
    {
        /// <summary>
        /// Initializes a new instance of the UpdateAlertContextCondition
        /// class.
        /// </summary>
        public UpdateAlertContextCondition()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the UpdateAlertContextCondition
        /// class.
        /// </summary>
        /// <param name="type">Possible values include: 'fixed',
        /// 'smart'</param>
        public UpdateAlertContextCondition(string type, double? leftOperand = default(double?), string operatorProperty = default(string), double? rightOperand = default(double?))
        {
            Type = type;
            LeftOperand = leftOperand;
            OperatorProperty = operatorProperty;
            RightOperand = rightOperand;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets possible values include: 'fixed', 'smart'
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "leftOperand")]
        public double? LeftOperand { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "operator")]
        public string OperatorProperty { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "rightOperand")]
        public double? RightOperand { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Type == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Type");
            }
        }
    }
}
