// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace UnOffSiSenseDotNet.V1
{
    using Microsoft.Rest;
    using Models;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// SiSenseSDK wrapper
    /// </summary>
    public partial interface ISiSenseSDK : System.IDisposable
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        System.Uri BaseUri { get; set; }

        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        JsonSerializerSettings SerializationSettings { get; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        JsonSerializerSettings DeserializationSettings { get; }

        /// <summary>
        /// Whitelist of fields to return for each document. fields Can also
        /// define which fields to exclude by prefixing field names with `-`
        /// </summary>
        string Fields { get; set; }

        /// <summary>
        /// Field by which the results should be sorted. Ascending by default,
        /// descending if prefixed by `-`
        /// </summary>
        string Sort { get; set; }

        /// <summary>
        /// Number of results to skip from the start of the data set. skip is
        /// to be used with the `limit` parameter for paging
        /// </summary>
        int? Skip { get; set; }

        /// <summary>
        /// How many results should be returned. limit is to be used with the
        /// `skip` parameter for paging
        /// </summary>
        int? Limit { get; set; }

        /// <summary>
        /// List of fields that should be expanded (substitures their IDs with
        /// actual objects). May be nested using the `resource.subResource`
        /// format
        /// </summary>
        string Expand { get; set; }

        /// <summary>
        /// The device id.
        /// </summary>
        string XDeviceId { get; set; }

        /// <summary>
        /// The user's API token preceded by the keyword `Bearer ` (with space
        /// between it and the token). For more information, see [API
        /// tutorial](http://developer.sisense.com/display/API2/UsingtheRESTAPI).
        /// </summary>
        string Authorization { get; set; }


        /// <summary>
        /// Send E-Mail report for an asset
        /// </summary>
        /// <remarks>
        /// The **send report** endpoint receives asset info and recipients
        /// list and sends an email report. Note: the users and groups in the
        /// recipients section must be **shared** to the dashboard.
        ///
        /// </remarks>
        /// <param name='reportObject'>
        /// An object containing the data needed to send the report. AssetId is
        /// the Dashboard ID and the recipients array should contain the user’s
        /// email/ID and group’s ID along with its type. The preferences
        /// section describes the content of the email to be sent.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> SendReportsWithHttpMessagesAsync(ReportObjectModel reportObject, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns cards data.
        /// </summary>
        /// <remarks>
        /// cards.
        /// </remarks>
        /// <param name='path'>
        /// The path of the cards to get
        /// </param>
        /// <param name='authorization'>
        /// The user's API token preceded by the keyword `Bearer ` (with space
        /// between it and the token). For more information, see [API
        /// tutorial](http://developer.sisense.com/display/API2/Using+the+REST+API).
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetCardsNamesWithHttpMessagesAsync(string path, string authorization = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get tamplate by name
        /// </summary>
        /// <remarks>
        /// get tamplate
        /// </remarks>
        /// <param name='path'>
        /// The path of the cards to get
        /// </param>
        /// <param name='body'>
        /// Basic cards object (in `JSON` notation) to be added
        /// </param>
        /// <param name='authorization'>
        /// The user's API token preceded by the keyword `Bearer ` (with space
        /// between it and the token). For more information, see [API
        /// tutorial](http://developer.sisense.com/display/API2/Using+the+REST+API).
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetCardByNameWithHttpMessagesAsync(string path, object body, string authorization = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns BloX editor snippets
        /// </summary>
        /// <remarks>
        /// Snippets
        /// </remarks>
        /// <param name='path'>
        /// Get snippets
        /// </param>
        /// <param name='authorization'>
        /// The user's API token preceded by the keyword `Bearer ` (with space
        /// between it and the token). For more information, see [API
        /// tutorial](http://developer.sisense.com/display/API2/Using+the+REST+API).
        /// </param>
        /// <param name='snippetType'>
        /// Actions for action snippets, elements for other in-card snippets.
        /// Leaving this empty wil lreturn all snippets.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetSnippetsWithHttpMessagesAsync(string path, string authorization = default(string), string snippetType = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns Actions data.
        /// </summary>
        /// <remarks>
        /// customActions.
        /// </remarks>
        /// <param name='path'>
        /// The path of the cards to get
        /// </param>
        /// <param name='authorization'>
        /// The user's API token preceded by the keyword `Bearer ` (with space
        /// between it and the token). For more information, see [API
        /// tutorial](http://developer.sisense.com/display/API2/Using+the+REST+API).
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetCustomActionsWithHttpMessagesAsync(string path, string authorization = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get action by type
        /// </summary>
        /// <remarks>
        /// get Custom Action
        /// </remarks>
        /// <param name='path'>
        /// The path of the cards to get
        /// </param>
        /// <param name='body'>
        /// Basic cards object (in `JSON` notation) to be added
        /// </param>
        /// <param name='authorization'>
        /// The user's API token preceded by the keyword `Bearer ` (with space
        /// between it and the token). For more information, see [API
        /// tutorial](http://developer.sisense.com/display/API2/Using+the+REST+API).
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetActionByTypeWithHttpMessagesAsync(string path, object body, string authorization = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Add a new tamplate
        /// </summary>
        /// <remarks>
        /// create tamplate
        /// </remarks>
        /// <param name='path'>
        /// The path of the cards to get
        /// </param>
        /// <param name='body'>
        /// Basic cards object (in `JSON` notation) to be added
        /// </param>
        /// <param name='authorization'>
        /// The user's API token preceded by the keyword `Bearer ` (with space
        /// between it and the token). For more information, see [API
        /// tutorial](http://developer.sisense.com/display/API2/Using+the+REST+API).
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> SaveNewTamplateWithHttpMessagesAsync(string path, object body, string authorization = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Add a new Action
        /// </summary>
        /// <remarks>
        /// create Action
        /// </remarks>
        /// <param name='path'>
        /// The path of the cards to get
        /// </param>
        /// <param name='body'>
        /// Basic cards object (in `JSON` notation) to be added
        /// </param>
        /// <param name='authorization'>
        /// The user's API token preceded by the keyword `Bearer ` (with space
        /// between it and the token). For more information, see [API
        /// tutorial](http://developer.sisense.com/display/API2/Using+the+REST+API).
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> SaveCustomActionWithHttpMessagesAsync(string path, object body, string authorization = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete tamplate by name
        /// </summary>
        /// <remarks>
        /// get tamplate
        /// </remarks>
        /// <param name='path'>
        /// The path of the cards to get
        /// </param>
        /// <param name='body'>
        /// Basic cards object (in `JSON` notation) to be added
        /// </param>
        /// <param name='authorization'>
        /// The user's API token preceded by the keyword `Bearer ` (with space
        /// between it and the token). For more information, see [API
        /// tutorial](http://developer.sisense.com/display/API2/Using+the+REST+API).
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> DeleteCardWithHttpMessagesAsync(string path, object body, string authorization = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete action by type
        /// </summary>
        /// <remarks>
        /// delete Custom Action
        /// </remarks>
        /// <param name='path'>
        /// The path of the cards to get
        /// </param>
        /// <param name='body'>
        /// Basic cards object (in `JSON` notation) to be added
        /// </param>
        /// <param name='authorization'>
        /// The user's API token preceded by the keyword `Bearer ` (with space
        /// between it and the token). For more information, see [API
        /// tutorial](http://developer.sisense.com/display/API2/Using+the+REST+API).
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> DeleteCustomActionWithHttpMessagesAsync(string path, object body, string authorization = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Add a new log
        /// </summary>
        /// <remarks>
        /// create log
        /// </remarks>
        /// <param name='path'>
        /// The path of the cards to get
        /// </param>
        /// <param name='body'>
        /// Basic cards object (in `JSON` notation) to be added
        /// </param>
        /// <param name='authorization'>
        /// The user's API token preceded by the keyword `Bearer ` (with space
        /// between it and the token). For more information, see [API
        /// tutorial](http://developer.sisense.com/display/API2/Using+the+REST+API).
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> LoggerWithHttpMessagesAsync(string path, object body, string authorization = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Analyze card structure
        /// </summary>
        /// <remarks>
        /// Analyze the types of elements and actions being used within the
        /// card
        /// </remarks>
        /// <param name='path'>
        /// The path of the cards to get
        /// </param>
        /// <param name='body'>
        /// Basic cards object (in `JSON` notation) to be analyzed
        /// </param>
        /// <param name='authorization'>
        /// The user's API token preceded by the keyword `Bearer ` (with space
        /// between it and the token). For more information, see [API
        /// tutorial](http://developer.sisense.com/display/API2/Using+the+REST+API).
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> CardAnalysisWithHttpMessagesAsync(string path, object body, string authorization = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Return email server settings
        /// </summary>
        /// <remarks>
        /// The **email server settings** used for Email Server settings
        /// managing.
        ///
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetEmailServerWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Add email server settings
        /// </summary>
        /// <remarks>
        /// The **email server settings** used for Email Server settings
        /// managing.
        ///
        /// </remarks>
        /// <param name='emailServer'>
        /// Object with the settings of email server
        /// </param>
        /// <param name='authorization'>
        /// The user's API token preceded by the keyword `Bearer ` (with space
        /// between it and the token). For more information, see [API
        /// tutorial](http://developer.sisense.com/display/API2/Using+the+REST+API).
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<AddEmailServerOKResponse>> AddEmailServerWithHttpMessagesAsync(EmailServer emailServer, string authorization = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update email server settings
        /// </summary>
        /// <remarks>
        /// The **email server settings** used for Email Server settings
        /// managing.
        ///
        /// </remarks>
        /// <param name='emailServer'>
        /// Object with the settings of email server
        /// </param>
        /// <param name='authorization'>
        /// The user's API token preceded by the keyword `Bearer ` (with space
        /// between it and the token). For more information, see [API
        /// tutorial](http://developer.sisense.com/display/API2/Using+the+REST+API).
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<UpdateEmailServerOKResponse>> UpdateEmailServerWithHttpMessagesAsync(EmailServerModel emailServer, string authorization = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete email server settings
        /// </summary>
        /// <remarks>
        /// The **email server settings** used for Email Server settings
        /// managing.
        ///
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> DeleteEmailServerWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Return public configuration settings
        /// </summary>
        /// <remarks>
        /// The **Public Configuration** used for getting public system
        /// settings.
        ///
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<GetPublicSettingsOKResponse>> GetPublicSettingsWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns sso settings.
        /// </summary>
        /// <remarks>
        /// The **sso settings** used for single sign on configuration.
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetSsoSettingsWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Set sso settings.
        /// </summary>
        /// <remarks>
        /// The **sso settings** used for single sign on configuration.
        /// </remarks>
        /// <param name='sso'>
        /// Object with the sso settings.
        /// </param>
        /// <param name='authorization'>
        /// The user's API token preceded by the keyword `Bearer ` (with space
        /// between it and the token). For more information, see [API
        /// tutorial](http://developer.sisense.com/display/API2/Using+the+REST+API).
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> SetSsoSettingsWithHttpMessagesAsync(Sso sso, string authorization = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns system configuration settings.
        /// </summary>
        /// <remarks>
        /// The **system settings** used for system settings configuration.
        ///
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetSystemSettingsWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Adds or updates system settings.
        /// </summary>
        /// <remarks>
        /// The **system settings** used for system settings configuration.
        ///
        /// </remarks>
        /// <param name='emailServer'>
        /// Object with the system settings.
        /// </param>
        /// <param name='authorization'>
        /// The user's API token preceded by the keyword `Bearer ` (with space
        /// between it and the token). For more information, see [API
        /// tutorial](http://developer.sisense.com/display/API2/Using+the+REST+API).
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> SetSystemSettingsWithHttpMessagesAsync(EmailServerModelModel emailServer, string authorization = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns globalization settings
        /// </summary>
        /// <remarks>
        /// Returns locale settings, including the set locale, and whether
        /// autodetect is enabled.
        /// </remarks>
        /// <param name='authorization'>
        /// The user's API token preceded by the keyword `Bearer ` (with space
        /// between it and the token). For more information, see [API
        /// tutorial](http://developer.sisense.com/display/API2/Using+the+REST+API).
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetGlobalizationWithHttpMessagesAsync(string authorization = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Add globalization settings
        /// </summary>
        /// <remarks>
        /// You can change the locale or select whether the localization
        /// selection is automatically detected or not.
        /// </remarks>
        /// <param name='globalization'>
        /// Object with the globalization settings.
        /// </param>
        /// <param name='authorization'>
        /// The user's API token preceded by the keyword `Bearer ` (with space
        /// between it and the token). For more information, see [API
        /// tutorial](http://developer.sisense.com/display/API2/Using+the+REST+API).
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> AddWithHttpMessagesAsync(Globalization globalization, string authorization = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update globalization settings
        /// </summary>
        /// <remarks>
        /// You can update the locale or select whether the localization
        /// selection is automatically detected or not.
        /// </remarks>
        /// <param name='globalization'>
        /// Object with the globalization settings.
        /// </param>
        /// <param name='authorization'>
        /// The user's API token preceded by the keyword `Bearer ` (with space
        /// between it and the token). For more information, see [API
        /// tutorial](http://developer.sisense.com/display/API2/Using+the+REST+API).
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> UpdateWithHttpMessagesAsync(Globalization globalization, string authorization = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete globalization settings
        /// </summary>
        /// <remarks>
        /// Deletes globalization settings in your server.
        /// </remarks>
        /// <param name='authorization'>
        /// The user's API token preceded by the keyword `Bearer ` (with space
        /// between it and the token). For more information, see [API
        /// tutorial](http://developer.sisense.com/display/API2/Using+the+REST+API).
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> RemoveGlobalizationWithHttpMessagesAsync(string authorization = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns translation settings
        /// </summary>
        /// <remarks>
        /// Returns all the settings for the translation service
        /// </remarks>
        /// <param name='authorization'>
        /// The user's API token preceded by the keyword `Bearer ` (with space
        /// between it and the token). For more information, see [API
        /// tutorial](http://developer.sisense.com/display/API2/Using+the+REST+API).
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetTranslationWithHttpMessagesAsync(string authorization = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns pulse settings.
        /// </summary>
        /// <remarks>
        /// The **pulse settings** used for store pulse page configuration.
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetPulseSettingsWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Set pulse settings.
        /// </summary>
        /// <remarks>
        /// The **pulse settings** used for store pulse page configuration.
        /// </remarks>
        /// <param name='pulse'>
        /// Object with the pulse settings.
        /// </param>
        /// <param name='authorization'>
        /// The user's API token preceded by the keyword `Bearer ` (with space
        /// between it and the token). For more information, see [API
        /// tutorial](http://developer.sisense.com/display/API2/Using+the+REST+API).
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> SetPulseSettingsWithHttpMessagesAsync(Pulse pulse, string authorization = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Patch pulse settings.
        /// </summary>
        /// <remarks>
        /// The **pulse settings** used for store pulse page configuration.
        /// </remarks>
        /// <param name='pulse'>
        /// Object with the pulse settings.
        /// </param>
        /// <param name='authorization'>
        /// The user's API token preceded by the keyword `Bearer ` (with space
        /// between it and the token). For more information, see [API
        /// tutorial](http://developer.sisense.com/display/API2/Using+the+REST+API).
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> PatchWithHttpMessagesAsync(Pulse pulse, string authorization = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete pulse settings.
        /// </summary>
        /// <remarks>
        /// The **pulse settings** used for store pulse page configuration.
        /// </remarks>
        /// <param name='authorization'>
        /// The user's API token preceded by the keyword `Bearer ` (with space
        /// between it and the token). For more information, see [API
        /// tutorial](http://developer.sisense.com/display/API2/Using+the+REST+API).
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> RemovePulseSettingsWithHttpMessagesAsync(string authorization = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns pivot settings.
        /// </summary>
        /// <remarks>
        /// The **pivot settings** used for store pivot configuration.
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetPivotSettingsWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Patch pivot settions.
        /// </summary>
        /// <remarks>
        /// The **pivot settings** used for store pivot configuration.
        /// </remarks>
        /// <param name='pivot'>
        /// Object with the pivot settings.
        /// </param>
        /// <param name='authorization'>
        /// The user's API token preceded by the keyword `Bearer ` (with space
        /// between it and the token). For more information, see [API
        /// tutorial](http://developer.sisense.com/display/API2/Using+the+REST+API).
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> PatchPivotSettingsWithHttpMessagesAsync(Pivot pivot, string authorization = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Return a language file
        /// </summary>
        /// <remarks>
        /// The **get translations/lang** endpoint returns a language file.
        /// </remarks>
        /// <param name='lang'>
        /// The name of the language to be returned.
        /// </param>
        /// <param name='authorization'>
        /// The user's API token preceded by the keyword `Bearer ` (with space
        /// between it and the token). For more information, see [API
        /// tutorial](http://developer.sisense.com/display/API2/Using+the+REST+API).
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetLangWithHttpMessagesAsync(string lang, string authorization = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Return a language file
        /// </summary>
        /// <remarks>
        /// The **get translations/lang** endpoint returns a language file for
        /// Sisense shared components.
        /// </remarks>
        /// <param name='lang'>
        /// The name of the language to be returned.
        /// </param>
        /// <param name='authorization'>
        /// The user's API token preceded by the keyword `Bearer ` (with space
        /// between it and the token). For more information, see [API
        /// tutorial](http://developer.sisense.com/display/API2/Using+the+REST+API).
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetIntlLangWithHttpMessagesAsync(string lang, string authorization = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Return all supported languages
        /// </summary>
        /// <remarks>
        /// The **get translations** endpoint returns a list of all your
        /// supported languages in Sisense.
        /// </remarks>
        /// <param name='authorization'>
        /// The user's API token preceded by the keyword `Bearer ` (with space
        /// between it and the token). For more information, see [API
        /// tutorial](http://developer.sisense.com/display/API2/Using+the+REST+API).
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetAllLangsWithHttpMessagesAsync(string authorization = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns Login Lockout settings.
        /// </summary>
        /// <remarks>
        /// Get current settings for user lockout on failed login attempts
        ///
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates Login Lockout settings.
        /// </summary>
        /// <remarks>
        /// Update settings for user lockout on failed login attempts
        ///
        /// </remarks>
        /// <param name='loginLockoutSettings'>
        /// Object with the Login Lockout settings.
        /// </param>
        /// <param name='authorization'>
        /// The user's API token preceded by the keyword `Bearer ` (with space
        /// between it and the token). For more information, see [API
        /// tutorial](http://developer.sisense.com/display/API2/Using+the+REST+API).
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> UpdateLockoutUsingPatchWithHttpMessagesAsync(LoginLockoutSettings loginLockoutSettings, string authorization = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Ecm Model of a specific elasticube
        /// </summary>
        /// <param name='cubeTitle'>
        /// cubeTitle
        /// </param>
        /// <param name='server'>
        /// server
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ManagementServiceResponseEcmModel>> GetEcmModelUsingGETWithHttpMessagesAsync(string cubeTitle, string server, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Authenticate and receive token
        /// </summary>
        /// <remarks>
        /// The **login** endpoint validates passed credentials and returns an
        /// API token for subsequent requests to the API.
        ///
        /// </remarks>
        /// <param name='username'>
        /// User's username or email
        /// </param>
        /// <param name='password'>
        /// User's password in plain text
        /// </param>
        /// <param name='xDeviceId'>
        /// The device id.
        /// </param>
        /// <param name='localeId'>
        /// User's locale, as ISO language code (See
        /// [table](http://www.lingoes.net/en/translator/langcode.htm))
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> LoginWithHttpMessagesAsync(string username, string password, string xDeviceId = default(string), string localeId = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Log out and revoke token
        /// </summary>
        /// <remarks>
        /// The **logout** endpoint revokes the given user's token, ensuring
        /// requests made with it will no longer work.&lt;br/&gt;A new token
        /// may be generated using the **login** endpoint.
        /// </remarks>
        /// <param name='xDeviceId'>
        /// The device id.
        /// </param>
        /// <param name='authorization'>
        /// The user's API token preceded by the keyword `Bearer ` (with space
        /// between it and the token). For more information, see [API
        /// tutorial](http://developer.sisense.com/display/API2/UsingtheRESTAPI).
        /// </param>
        /// <param name='targetDevice'>
        /// Specific Device ID who's token to revoke. If not provided, the
        /// user's API token will be revoked.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<LogoutUnauthorizedResponse>> LogoutWithHttpMessagesAsync(string xDeviceId = default(string), string authorization = default(string), string targetDevice = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Log out and revoke all user's tokens
        /// </summary>
        /// <remarks>
        /// The **logout all** endpoint revokes all if a user's existing
        /// tokens, both for the API and all devices.
        /// </remarks>
        /// <param name='xDeviceId'>
        /// The device id.
        /// </param>
        /// <param name='authorization'>
        /// The user's API token preceded by the keyword `Bearer ` (with space
        /// between it and the token). For more information, see [API
        /// tutorial](http://developer.sisense.com/display/API2/UsingtheRESTAPI).
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<LogoutAllUnauthorizedResponse>> LogoutAllWithHttpMessagesAsync(string xDeviceId = default(string), string authorization = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Log out and revoke all user's tokens
        /// </summary>
        /// <remarks>
        /// The **logout all users** endpoint revokes existing tokens of all
        /// users, both for the API and all devices.
        /// </remarks>
        /// <param name='xDeviceId'>
        /// The device id.
        /// </param>
        /// <param name='authorization'>
        /// The user's API token preceded by the keyword `Bearer ` (with space
        /// between it and the token). For more information, see [API
        /// tutorial](http://developer.sisense.com/display/API2/UsingtheRESTAPI).
        /// </param>
        /// <param name='empty'>
        /// empty object.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<LogoutAllUsersUnauthorizedResponse>> LogoutAllUsersWithHttpMessagesAsync(string xDeviceId = default(string), string authorization = default(string), object empty = default(object), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Revoke all tokens for multiple users
        /// </summary>
        /// <remarks>
        /// The **admin logout** endpoint allows admin users to revoke all
        /// tokens of multiple users.
        /// </remarks>
        /// <param name='users'>
        /// User IDs who's tokens to revoke, separated by a comma (`,`) and
        /// without spaces
        /// </param>
        /// <param name='xDeviceId'>
        /// The device id.
        /// </param>
        /// <param name='authorization'>
        /// The user's API token preceded by the keyword `Bearer ` (with space
        /// between it and the token). For more information, see [API
        /// tutorial](http://developer.sisense.com/display/API2/UsingtheRESTAPI).
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<LogoutUsersUnauthorizedResponse>> LogoutUsersWithHttpMessagesAsync(IList<string> users, string xDeviceId = default(string), string authorization = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Revoke API tokens for multiple users
        /// </summary>
        /// <remarks>
        /// The **admin delete tokens** endpoint allows admin users to revoke
        /// all API tokens of multiple users, leaving the device tokens intact.
        /// </remarks>
        /// <param name='tokenType'>
        /// Token type to revoke. Possible values include: 'api', 'odbc', 'sso'
        /// </param>
        /// <param name='users'>
        /// User IDs who's tokens to revoke, separated by a comma (`,`) and
        /// without spaces
        /// </param>
        /// <param name='authorization'>
        /// The user's API token preceded by the keyword `Bearer ` (with space
        /// between it and the token). For more information, see [API
        /// tutorial](http://developer.sisense.com/display/API2/UsingtheRESTAPI).
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<RevokeTokensUnauthorizedResponse>> RevokeTokensWithHttpMessagesAsync(string tokenType, IList<string> users, string authorization = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Receive token for SAML authentication
        /// </summary>
        /// <remarks>
        /// The **login_saml_callback** endpoint receives passed SAML
        /// credentials and returns an API token for subsequent requests to the
        /// API.
        /// </remarks>
        /// <param name='relayState'>
        /// The original URL that the user requested
        /// </param>
        /// <param name='sAMLResponse'>
        /// Response from SAML identity provider with decoded user data
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> SamlLoginCallbackWithHttpMessagesAsync(string relayState, string sAMLResponse, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get a list of trusted servers
        /// </summary>
        /// <remarks>
        /// The **get all servers access** endpoint returns a list of trusted
        /// servers that can copy dashboards to your server.
        /// </remarks>
        /// <param name='authorization'>
        /// The user's API token preceded by the keyword `Bearer ` (with space
        /// between it and the token). For more information, see [API
        /// tutorial](http://developer.sisense.com/display/API2/UsingtheRESTAPI).
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetAllServersAccessWithHttpMessagesAsync(string authorization = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Add a trusted server
        /// </summary>
        /// <remarks>
        /// The **add server access** endpoint add trusted server.
        /// </remarks>
        /// <param name='serverAccess'>
        /// The server object (in `JSON` notation) to be added to the Trusted
        /// Server list.
        /// </param>
        /// <param name='authorization'>
        /// The user's API token preceded by the keyword `Bearer ` (with space
        /// between it and the token). For more information, see [API
        /// tutorial](http://developer.sisense.com/display/API2/UsingtheRESTAPI).
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<AddServerAccessBadRequestResponse>> AddServerAccessWithHttpMessagesAsync(ServerAccess serverAccess, string authorization = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

    }
}
