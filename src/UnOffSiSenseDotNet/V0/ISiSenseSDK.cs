// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace UnOffSiSenseDotNet.V0
{
    using Microsoft.Rest;
    using Models;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// SiSenseSDK wrapper
    /// </summary>
    public partial interface ISiSenseSDK : System.IDisposable
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        System.Uri BaseUri { get; set; }

        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        JsonSerializerSettings SerializationSettings { get; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        JsonSerializerSettings DeserializationSettings { get; }

        /// <summary>
        /// Whitelist of fields to return for each document. fields Can also
        /// define which fields to exclude by prefixing field names with `-`
        /// </summary>
        string Fields { get; set; }

        /// <summary>
        /// Field by which the results should be sorted. Ascending by default,
        /// descending if prefixed by `-`
        /// </summary>
        string Sort { get; set; }

        /// <summary>
        /// Number of results to skip from the start of the data set. skip is
        /// to be used with the `limit` parameter for paging
        /// </summary>
        int? Skip { get; set; }

        /// <summary>
        /// How many results should be returned. limit is to be used with the
        /// `skip` parameter for paging
        /// </summary>
        int? Limit { get; set; }

        /// <summary>
        /// List of fields that should be expanded (substitures their IDs with
        /// actual objects). May be nested using the `resource.subResource`
        /// format
        /// </summary>
        string Expand { get; set; }

        /// <summary>
        /// The device id.
        /// </summary>
        string XDeviceId { get; set; }

        /// <summary>
        /// The user's API token preceded by the keyword `Bearer ` (with space
        /// between it and the token). For more information, see [API
        /// tutorial](http://developer.sisense.com/display/API2/Using+the+REST+API).
        /// </summary>
        string Authorization { get; set; }


        /// <summary>
        /// Gets the IListUsingGET.
        /// </summary>
        IListUsingGET ListUsingGET { get; }

        /// <summary>
        /// Gets the ICancelAllQueriesUsingPOST.
        /// </summary>
        ICancelAllQueriesUsingPOST CancelAllQueriesUsingPOST { get; }

        /// <summary>
        /// get api settings.
        /// </summary>
        /// <remarks>
        /// Returns api settings.
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// set api settings.
        /// </summary>
        /// <remarks>
        /// Returns api settings.
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> SetWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete api settings.
        /// </summary>
        /// <remarks>
        /// Delete api settings.
        /// </remarks>
        /// <param name='security'>
        /// Object with the security settings.
        /// </param>
        /// <param name='authorization'>
        /// The user's API token preceded by the keyword `Bearer ` (with space
        /// between it and the token). For more information, see [API
        /// tutorial](http://developer.sisense.com/display/API2/Using+the+REST+API).
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> DeleteTokenWithHttpMessagesAsync(Security security, string authorization = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Generate api settings.
        /// </summary>
        /// <remarks>
        /// Generate api settings.
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GenerateNewWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns the current branding metadata
        /// </summary>
        /// <remarks>
        /// Returns the current branding metadata
        /// </remarks>
        /// <param name='authorization'>
        /// The user's API token preceded by the keyword `Bearer ` (with space
        /// between it and the token). For more information, see [API
        /// tutorial](http://developer.sisense.com/display/API2/Using+the+REST+API).
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetBrandingWithHttpMessagesAsync(string authorization = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Adds new branding to your Sisense dashboards
        /// </summary>
        /// <remarks>
        /// Branding includes customized texts, logos and emails.
        /// </remarks>
        /// <param name='branding'>
        /// Object with the branding metadata.
        /// </param>
        /// <param name='authorization'>
        /// The user's API token preceded by the keyword `Bearer ` (with space
        /// between it and the token). For more information, see [API
        /// tutorial](http://developer.sisense.com/display/API2/Using+the+REST+API).
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> SetBrandingWithHttpMessagesAsync(Branding branding, string authorization = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Resets the current branding to the default Sisense branding
        /// </summary>
        /// <remarks>
        /// Resets the current branding to the default Sisense branding.
        /// </remarks>
        /// <param name='authorization'>
        /// The user's API token preceded by the keyword `Bearer ` (with space
        /// between it and the token). For more information, see [API
        /// tutorial](http://developer.sisense.com/display/API2/Using+the+REST+API).
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> ResetBrandingWithHttpMessagesAsync(string authorization = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns globalization settings
        /// </summary>
        /// <remarks>
        /// Returns locale settings, including the set locale, and whether
        /// autodetect is enabled.
        /// </remarks>
        /// <param name='authorization'>
        /// The user's API token preceded by the keyword `Bearer ` (with space
        /// between it and the token). For more information, see [API
        /// tutorial](http://developer.sisense.com/display/API2/Using+the+REST+API).
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> Get1WithHttpMessagesAsync(string authorization = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Add globalization settings
        /// </summary>
        /// <remarks>
        /// You can change the locale or select whether the localization
        /// selection is automatically detected or not.
        /// </remarks>
        /// <param name='globalization'>
        /// Object with the globalization settings.
        /// </param>
        /// <param name='authorization'>
        /// The user's API token preceded by the keyword `Bearer ` (with space
        /// between it and the token). For more information, see [API
        /// tutorial](http://developer.sisense.com/display/API2/Using+the+REST+API).
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> Set1WithHttpMessagesAsync(Globalization globalization, string authorization = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns proxy server settings in your server.
        /// </summary>
        /// <remarks>
        /// This is to allow geo data (used in area and scatter map widgets) to
        /// be pulled in from external Sisense servers.
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> Get2WithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Adds proxy server settings to your server.
        /// </summary>
        /// <remarks>
        /// This option can be used to allow geo data (used in area and scatter
        /// map widgets), to be pulled in from external Sisense servers when
        /// such data is blocked by your organization’s proxy server.
        /// </remarks>
        /// <param name='proxy'>
        /// Object with the Proxy settings.
        /// </param>
        /// <param name='authorization'>
        /// The user's API token preceded by the keyword `Bearer ` (with space
        /// between it and the token). For more information, see [API
        /// tutorial](http://developer.sisense.com/display/API2/Using+the+REST+API).
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> AddWithHttpMessagesAsync(Proxy proxy, string authorization = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates proxy server settings in your server.
        /// </summary>
        /// <remarks>
        /// This option can be used to allow geo data (used in area and scatter
        /// map widgets), to be pulled in from external Sisense servers when
        /// such data is blocked by your organization’s proxy server.
        /// </remarks>
        /// <param name='proxy'>
        /// Object with the Proxy settings.
        /// </param>
        /// <param name='authorization'>
        /// The user's API token preceded by the keyword `Bearer ` (with space
        /// between it and the token). For more information, see [API
        /// tutorial](http://developer.sisense.com/display/API2/Using+the+REST+API).
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> UpdateWithHttpMessagesAsync(Proxy proxy, string authorization = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes proxy server settings in your server.
        /// </summary>
        /// <remarks>
        /// Deletes proxy server settings in your server.
        /// </remarks>
        /// <param name='authorization'>
        /// The user's API token preceded by the keyword `Bearer ` (with space
        /// between it and the token). For more information, see [API
        /// tutorial](http://developer.sisense.com/display/API2/Using+the+REST+API).
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> DeleteWithHttpMessagesAsync(string authorization = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns security settings, including the API token.
        /// </summary>
        /// <remarks>
        /// Returns **security settings**, including the API token..
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> Get3WithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Adds/updates security settings.
        /// </summary>
        /// <remarks>
        /// Adds/updates **security settings**.
        /// </remarks>
        /// <param name='security'>
        /// Object with the security settings.
        /// </param>
        /// <param name='authorization'>
        /// The user's API token preceded by the keyword `Bearer ` (with space
        /// between it and the token). For more information, see [API
        /// tutorial](http://developer.sisense.com/display/API2/Using+the+REST+API).
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> Set2WithHttpMessagesAsync(SecurityModel security, string authorization = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns sso settings.
        /// </summary>
        /// <remarks>
        /// The **sso settings** used for single sign on configuration.
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> Get4WithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Set sso settings.
        /// </summary>
        /// <remarks>
        /// The **sso settings** used for single sign on configuration.
        /// </remarks>
        /// <param name='sso'>
        /// Object with the sso settings.
        /// </param>
        /// <param name='authorization'>
        /// The user's API token preceded by the keyword `Bearer ` (with space
        /// between it and the token). For more information, see [API
        /// tutorial](http://developer.sisense.com/display/API2/Using+the+REST+API).
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> Set3WithHttpMessagesAsync(Sso sso, string authorization = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns system configuration settings.
        /// </summary>
        /// <remarks>
        /// The **system settings** used for system settings configuration.
        ///
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> Get5WithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Adds or updates system settings.
        /// </summary>
        /// <remarks>
        /// The **system settings** used for system settings configuration.
        ///
        /// </remarks>
        /// <param name='emailServer'>
        /// Object with the system settings.
        /// </param>
        /// <param name='authorization'>
        /// The user's API token preceded by the keyword `Bearer ` (with space
        /// between it and the token). For more information, see [API
        /// tutorial](http://developer.sisense.com/display/API2/Using+the+REST+API).
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> Set4WithHttpMessagesAsync(EmailServer emailServer, string authorization = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ApiTestTestingGetWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name='schemaType'>
        /// Possible values include: 'Live', 'MonetDb', 'Logical'
        /// </param>
        /// <param name='schemaId'>
        /// </param>
        /// <param name='jaql'>
        /// </param>
        /// <param name='dsid'>
        /// </param>
        /// <param name='userId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ApiTranslationBySchemaTypeBySchemaIdJaqlPostWithHttpMessagesAsync(string schemaType, string schemaId, object jaql = default(object), string dsid = default(string), string userId = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name='schemaType'>
        /// Possible values include: 'Live', 'MonetDb', 'Logical'
        /// </param>
        /// <param name='schemaId'>
        /// </param>
        /// <param name='query'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ApiTranslationBySchemaTypeBySchemaIdOdbcPostWithHttpMessagesAsync(string schemaType, string schemaId, string query = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name='schemaType'>
        /// Possible values include: 'Live', 'MonetDb', 'Logical'
        /// </param>
        /// <param name='schemaId'>
        /// </param>
        /// <param name='query'>
        /// </param>
        /// <param name='skipPermision'>
        /// </param>
        /// <param name='includeRowCount'>
        /// </param>
        /// <param name='includeUniqueCount'>
        /// </param>
        /// <param name='userId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ApiTranslationByDsdidJaqlExplainQueriesPostWithHttpMessagesAsync(string schemaType, string schemaId, object query = default(object), bool? skipPermision = default(bool?), bool? includeRowCount = default(bool?), bool? includeUniqueCount = default(bool?), string userId = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name='schemaType'>
        /// Possible values include: 'Live', 'MonetDb', 'Logical'
        /// </param>
        /// <param name='schemaId'>
        /// </param>
        /// <param name='queryResult'>
        /// </param>
        /// <param name='skipPermision'>
        /// </param>
        /// <param name='userId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ApiTranslationByDsdidJaqlExplainQueriesSecondPassPostWithHttpMessagesAsync(string schemaType, string schemaId, object queryResult = default(object), bool? skipPermision = default(bool?), string userId = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name='payload'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ApiTranslationDependencymapPostWithHttpMessagesAsync(SchemaEtlPayload payload = default(SchemaEtlPayload), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name='schemaEtlPayload'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ApiTranslationGenerateCustomElementsSqlsPostWithHttpMessagesAsync(SchemaEtlPayload schemaEtlPayload = default(SchemaEtlPayload), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name='payload'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ApiTranslationExplainCustomTableQueryPostWithHttpMessagesAsync(CustomTablePayload payload = default(CustomTablePayload), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name='payload'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ApiTranslationExplainCustomColumnExpressionPostWithHttpMessagesAsync(CustomColumnPayload payload = default(CustomColumnPayload), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name='payload'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<ContextElement>>> ApiTranslationGetContextFromExpressionPostWithHttpMessagesAsync(AutoCompletionPayload payload = default(AutoCompletionPayload), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name='schemaType'>
        /// Possible values include: 'Live', 'MonetDb', 'Logical'
        /// </param>
        /// <param name='schemaId'>
        /// </param>
        /// <param name='formula'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ApiTranslationBySchemaTypeBySchemaIdParsePostWithHttpMessagesAsync(string schemaType, string schemaId, object formula = default(object), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name='schemaType'>
        /// Possible values include: 'Live', 'MonetDb', 'Logical'
        /// </param>
        /// <param name='schemaId'>
        /// </param>
        /// <param name='query'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ApiTranslationBySchemaTypeBySchemaIdFieldsSearchPostWithHttpMessagesAsync(string schemaType, string schemaId, object query = default(object), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name='schemaType'>
        /// Possible values include: 'Live', 'MonetDb', 'Logical'
        /// </param>
        /// <param name='schemaId'>
        /// </param>
        /// <param name='query'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ApiTranslationBySchemaTypeBySchemaIdExplainsqlPostWithHttpMessagesAsync(string schemaType, string schemaId, string query = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name='schemaType'>
        /// Possible values include: 'Live', 'MonetDb', 'Logical'
        /// </param>
        /// <param name='schemaId'>
        /// </param>
        /// <param name='query'>
        /// </param>
        /// <param name='rowLimit'>
        /// </param>
        /// <param name='offset'>
        /// </param>
        /// <param name='sample'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ApiTranslationBySchemaTypeBySchemaIdSqlPostWithHttpMessagesAsync(string schemaType, string schemaId, string query = default(string), long? rowLimit = default(long?), long? offset = default(long?), long? sample = default(long?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets all datasources
        /// </summary>
        /// <param name='q'>
        /// q
        /// </param>
        /// <param name='s'>
        /// s
        /// </param>
        /// <param name='sharedWith'>
        /// sharedWith
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<DataSourcesDTO>>> ListUsingGETWithHttpMessagesAsync(string q = default(string), string s = default(string), string sharedWith = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Attach Sample
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> SampleUsingGETWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get servers with ECubes
        /// </summary>
        /// <param name='count'>
        /// count
        /// </param>
        /// <param name='direction'>
        /// direction
        /// </param>
        /// <param name='offset'>
        /// offset
        /// </param>
        /// <param name='q'>
        /// q
        /// </param>
        /// <param name='withPermissions'>
        /// withPermissions
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<ServerDTO>>> GetServersUsingGETWithHttpMessagesAsync(int? count = default(int?), string direction = default(string), int? offset = default(int?), string q = default(string), bool? withPermissions = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get cubes
        /// </summary>
        /// <param name='server'>
        /// server
        /// </param>
        /// <param name='count'>
        /// count
        /// </param>
        /// <param name='direction'>
        /// direction
        /// </param>
        /// <param name='offset'>
        /// offset
        /// </param>
        /// <param name='q'>
        /// q
        /// </param>
        /// <param name='withPermissions'>
        /// withPermissions
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<CubeDTO>>> GetCubesUsingGETWithHttpMessagesAsync(string server, int? count = default(int?), string direction = default(string), int? offset = default(int?), string q = default(string), bool? withPermissions = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get server identity
        /// </summary>
        /// <param name='server'>
        /// server
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ServerIdentityDTO>> GetServersWithNextECubesUsingGETWithHttpMessagesAsync(string server, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get database simple
        /// </summary>
        /// <param name='server'>
        /// server
        /// </param>
        /// <param name='databaseName'>
        /// databaseName
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<CubeDTO>> GetSimpleUsingGETWithHttpMessagesAsync(string server, string databaseName = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// getLastBuildTimeofElasticube
        /// </summary>
        /// <param name='server'>
        /// server
        /// </param>
        /// <param name='title'>
        /// title
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> GetLastBuildTimeofElasticubeUsingGETWithHttpMessagesAsync(string server, string title, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Attach Cube
        /// </summary>
        /// <param name='body'>
        /// body
        /// </param>
        /// <param name='server'>
        /// server
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<AttachCubeResponse>> AttachUsingPOSTWithHttpMessagesAsync(AttachParamsDTO body, string server, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// info available Datasources
        /// </summary>
        /// <param name='request'>
        /// request
        /// </param>
        /// <param name='server'>
        /// server
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<InfoResponse>> AvailableDatasourcesInfoUsingPOSTWithHttpMessagesAsync(AvailableDatasourcesInfoRequest request, string server, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// info Cubes
        /// </summary>
        /// <param name='request'>
        /// request
        /// </param>
        /// <param name='server'>
        /// server
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<InfoResponse>> InfoUsingPOSTWithHttpMessagesAsync(InfoRequest request, string server, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete Cube by name
        /// </summary>
        /// <param name='cubeName'>
        /// cubeName
        /// </param>
        /// <param name='server'>
        /// server
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> DeleteByDataSourceNameUsingDELETEWithHttpMessagesAsync(string cubeName, string server, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Detach Cube
        /// </summary>
        /// <param name='body'>
        /// body
        /// </param>
        /// <param name='dataSourceId'>
        /// dataSourceId
        /// </param>
        /// <param name='server'>
        /// server
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> DetachUsingPOSTWithHttpMessagesAsync(DetachParamsDTO body, string dataSourceId, string server, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Stop cube by dataSourceId name
        /// </summary>
        /// <param name='dataSourceId'>
        /// dataSourceId
        /// </param>
        /// <param name='server'>
        /// server
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> StopDataSourceIdUsingPOSTWithHttpMessagesAsync(string dataSourceId, string server, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Detach Cube
        /// </summary>
        /// <param name='body'>
        /// body
        /// </param>
        /// <param name='instanceId'>
        /// instanceId
        /// </param>
        /// <param name='server'>
        /// server
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> DetachInstanceIdUsingPOSTWithHttpMessagesAsync(DetachParamsDTO body, string instanceId, string server, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Start Cube
        /// </summary>
        /// <param name='instanceId'>
        /// instanceId
        /// </param>
        /// <param name='server'>
        /// server
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<StartCubeResponse>> StartInstanceIdUsingPOSTWithHttpMessagesAsync(string instanceId, string server, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Stop cube ny instance id
        /// </summary>
        /// <param name='instanceId'>
        /// instanceId
        /// </param>
        /// <param name='server'>
        /// server
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> StopInstanceIdUsingPOSTWithHttpMessagesAsync(string instanceId, string server, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Restart cube by cube name
        /// </summary>
        /// <param name='server'>
        /// server
        /// </param>
        /// <param name='title'>
        /// title
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> RestartUsingPOSTWithHttpMessagesAsync(string server, string title, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Start Cube
        /// </summary>
        /// <param name='server'>
        /// server
        /// </param>
        /// <param name='title'>
        /// title
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<StartCubeResponse>> StartUsingPOSTWithHttpMessagesAsync(string server, string title, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Stop cube by cube name
        /// </summary>
        /// <param name='server'>
        /// server
        /// </param>
        /// <param name='title'>
        /// title
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> StopUsingPOSTWithHttpMessagesAsync(string server, string title, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// execute query
        /// </summary>
        /// <param name='cubeName'>
        /// cubeName
        /// </param>
        /// <param name='jaql'>
        /// jaql
        /// </param>
        /// <param name='skipPermissions'>
        /// skipPermissions
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> ExecuteQueryStreamUsingPOSTWithHttpMessagesAsync(string cubeName, string jaql, bool? skipPermissions = false, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Execute query
        /// </summary>
        /// <param name='cubeName'>
        /// cubeName
        /// </param>
        /// <param name='data'>
        /// data
        /// </param>
        /// <param name='errorReporting'>
        /// errorReporting
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> ExecuteQueryStreamCsvUsingPOSTWithHttpMessagesAsync(string cubeName, string data, bool? errorReporting = false, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Explain query
        /// </summary>
        /// <param name='cubeName'>
        /// cubeName
        /// </param>
        /// <param name='jaql'>
        /// jaql
        /// </param>
        /// <param name='rowcount'>
        /// rowcount
        /// </param>
        /// <param name='skipPermissions'>
        /// skipPermissions
        /// </param>
        /// <param name='uniquecount'>
        /// uniquecount
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ExplainQueryStreamUsingPOSTWithHttpMessagesAsync(string cubeName, string jaql, bool? rowcount = true, bool? skipPermissions = false, bool? uniquecount = true, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// generateReadableQuery
        /// </summary>
        /// <param name='cubeName'>
        /// cubeName
        /// </param>
        /// <param name='jaql'>
        /// jaql
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> GenerateReadableQueryUsingPOSTWithHttpMessagesAsync(string cubeName, string jaql, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Execute sql
        /// </summary>
        /// <param name='cubeName'>
        /// cubeName
        /// </param>
        /// <param name='query'>
        /// query
        /// </param>
        /// <param name='count'>
        /// count
        /// </param>
        /// <param name='format'>
        /// format
        /// </param>
        /// <param name='includeMetadata'>
        /// includeMetadata
        /// </param>
        /// <param name='isMaskedResponse'>
        /// isMaskedResponse
        /// </param>
        /// <param name='offset'>
        /// offset
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> ExecuteSqlUsingGETWithHttpMessagesAsync(string cubeName, string query, int? count = -1, string format = default(string), bool? includeMetadata = true, bool? isMaskedResponse = false, int? offset = 0, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Parse jaql
        /// </summary>
        /// <param name='fullName'>
        /// fullName
        /// </param>
        /// <param name='query'>
        /// query
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ParseJaqlUsingPOSTWithHttpMessagesAsync(string fullName, string query, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get fields
        /// </summary>
        /// <param name='liveFullName'>
        /// liveFullName
        /// </param>
        /// <param name='query'>
        /// query
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> GetFieldsByLiveFullNameUsingPOSTWithHttpMessagesAsync(string liveFullName, string query, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Execute sql
        /// </summary>
        /// <param name='cubeName'>
        /// cubeName
        /// </param>
        /// <param name='server'>
        /// server
        /// </param>
        /// <param name='sql'>
        /// sql
        /// </param>
        /// <param name='count'>
        /// count
        /// </param>
        /// <param name='includeMetadata'>
        /// includeMetadata
        /// </param>
        /// <param name='isMaskedResponse'>
        /// isMaskedResponse
        /// </param>
        /// <param name='offset'>
        /// offset
        /// </param>
        /// <param name='sample'>
        /// sample
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> ExecuteSqlUsingPOSTWithHttpMessagesAsync(string cubeName, string server, string sql, int? count = -1, bool? includeMetadata = true, bool? isMaskedResponse = false, int? offset = 0, long? sample = 0, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Cancel queries
        /// </summary>
        /// <param name='body'>
        /// body
        /// </param>
        /// <param name='cubeName'>
        /// cubeName
        /// </param>
        /// <param name='server'>
        /// server
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> CancelQueriesUsingPOSTWithHttpMessagesAsync(string body, string cubeName, string server, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get fields
        /// </summary>
        /// <param name='query'>
        /// query
        /// </param>
        /// <param name='server'>
        /// server
        /// </param>
        /// <param name='title'>
        /// title
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> GetFieldsByFullNamePostUsingPOSTWithHttpMessagesAsync(string query, string server, string title, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Cancel all queries
        /// </summary>
        /// <param name='title'>
        /// title
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> GetDatasourceByFullNameUsingGETWithHttpMessagesAsync(string title, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get fields
        /// </summary>
        /// <param name='title'>
        /// title
        /// </param>
        /// <param name='q'>
        /// q
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> GetFieldsByFullNameGetUsingGETWithHttpMessagesAsync(string title, string q = "{}", Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns all authentication records for the given cube
        /// </summary>
        /// <remarks>
        /// Operations about elasticubes authorization
        /// </remarks>
        /// <param name='server'>
        /// Address of the server containing the cube
        /// </param>
        /// <param name='elasticube'>
        /// Title or Id of the elasticube
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ElasticubeAuth>> ElasticubesAuthForCubeWithHttpMessagesAsync(string server, string elasticube, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Defines a new permission for the given ElastiCube.
        /// </summary>
        /// <remarks>
        /// Operations about elasticubes authorization
        /// </remarks>
        /// <param name='server'>
        /// The server address of the ElastiCube.
        /// </param>
        /// <param name='elasticube'>
        /// The name or ID of the ElastiCube
        /// </param>
        /// <param name='shares'>
        /// The 'shares' is an array containing the different permissions. Each
        /// permission is an ACL (access control level).
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<bool?>> AddElasticubePermissionsWithHttpMessagesAsync(string server, string elasticube, IList<Acl> shares = default(IList<Acl>), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates the permissions (ACLs) for the current ElastiCube.
        /// </summary>
        /// <remarks>
        /// Operations about elasticubes authorization
        /// </remarks>
        /// <param name='server'>
        /// The server address of the ElastiCube.
        /// </param>
        /// <param name='elasticube'>
        /// The name or ID of the ElastiCube
        /// </param>
        /// <param name='shares'>
        /// The 'shares' is an array containing the different permissions. Each
        /// permission is an ACL (access control level).
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<bool?>> UpdateElasticubePermissionsWithHttpMessagesAsync(string server, string elasticube, IList<Acl> shares = default(IList<Acl>), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes all permissions for the ElastiCube.
        /// </summary>
        /// <remarks>
        /// Operations about elasticubes authorization
        /// </remarks>
        /// <param name='server'>
        /// The server address of the ElastiCube.
        /// </param>
        /// <param name='elasticube'>
        /// The name or ID of the ElastiCube.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<bool?>> DeleteElasticubePermissionsWithHttpMessagesAsync(string server, string elasticube, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Defines permissions for an ElastiCube server.
        /// </summary>
        /// <remarks>
        /// Operations about elasticubes authorization
        /// </remarks>
        /// <param name='server'>
        /// The server address of the ElastiCube.
        /// </param>
        /// <param name='shares'>
        /// The 'shares' is an array containing the different permissions. Each
        /// permission is an ACL (access control level).
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<bool?>> UpdateServerDefaultPermissionsWithHttpMessagesAsync(string server, IList<Acl> shares = default(IList<Acl>), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Return data security rules for an elasticube
        /// </summary>
        /// <remarks>
        /// Return data security rules for an elasticube
        /// </remarks>
        /// <param name='server'>
        /// The ElastiCube's server address.
        /// </param>
        /// <param name='elasticube'>
        /// The name of the ElastiCube.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetElasticubeDataSecurityWithHttpMessagesAsync(string server, string elasticube, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Add new data context for datasource
        /// </summary>
        /// <remarks>
        /// Defines data security rules for a column on a specific server and
        /// elasticube
        /// </remarks>
        /// <param name='server'>
        /// The server address of the ElastiCube. Use 'Set' for Elasticube Set.
        /// </param>
        /// <param name='elasticube'>
        /// The name of the ElastiCube.
        /// </param>
        /// <param name='arrayofDataSecurityobjectsdescription'>
        /// The array of data security rules that should be added.
        /// If exact same &lt;b&gt;shares&lt;/b&gt; array exits for table and
        /// column, then rule will be overwritten
        ///
        /// &lt;br /&gt;&lt;b&gt;exclusionary&lt;/b&gt; - This boolean
        /// determines if a data security rule is exclusionary or inclusionary.
        /// By default, this value is &lt;b&gt;false&lt;/b&gt;, which means all
        /// rules are inclusionary.When a rule is inclusionary, all defined
        /// members can see the relevant rows. When a rule is exclusionary, the
        /// relevant rows are hidden from all defined members.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> AddElasticubeDataSecurityForDatasourceWithHttpMessagesAsync(string server, string elasticube, IList<ElasticubeNewDataSecurityItemCubeGiven> arrayofDataSecurityobjectsdescription = default(IList<ElasticubeNewDataSecurityItemCubeGiven>), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete data security rule for a column
        /// </summary>
        /// <remarks>
        /// Delete data security rule for a column
        /// </remarks>
        /// <param name='server'>
        /// server address
        /// </param>
        /// <param name='elasticube'>
        /// elasticube name
        /// </param>
        /// <param name='table'>
        /// table name
        /// </param>
        /// <param name='column'>
        /// column name
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> DeleteDataContextForColumnQueryWithHttpMessagesAsync(string server, string elasticube, string table, string column, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Return data security rules for a user
        /// </summary>
        /// <remarks>
        /// Return data security rules for a user
        /// </remarks>
        /// <param name='server'>
        /// The ElastiCube's server address
        /// </param>
        /// <param name='cube'>
        /// The ElastiCube's name
        /// </param>
        /// <param name='user'>
        /// The user's ID or username.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetElasticubeDataSecurityForUserWithHttpMessagesAsync(string server, string cube, string user, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Return data security rules for column.
        /// </summary>
        /// <remarks>
        /// Returns ElastiCube data security rules for a column in a table in
        /// the ElastiCube
        /// </remarks>
        /// <param name='server'>
        /// The ElastiCube's server address.
        /// </param>
        /// <param name='elasticube'>
        /// The name of the ElastiCube
        /// </param>
        /// <param name='table'>
        /// The name of the table in the ElastiCube
        /// </param>
        /// <param name='column'>
        /// The name of the column in the table
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetElasticubeDataSecurityForColumnWithHttpMessagesAsync(string server, string elasticube, string table, string column, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Add new data context
        /// </summary>
        /// <remarks>
        /// Defines data security rules for a column.
        /// </remarks>
        /// <param name='arrayofDataSecurityobjectsdescription'>
        /// The array of data security rules that should be added.
        /// If exact same shares array exits for table and column, then rule
        /// will be overwritten
        /// &lt;b&gt;server and elasticube&lt;/b&gt; are required
        ///
        /// &lt;br /&gt;&lt;b&gt;exclusionary&lt;/b&gt; - This boolean
        /// determines if a data security rule is exclusionary or inclusionary.
        /// By default, this value is &lt;b&gt;false&lt;/b&gt;, which means all
        /// rules are inclusionary.When a rule is inclusionary, all defined
        /// members can see the relevant rows. When a rule is exclusionary, the
        /// relevant rows are hidden from all defined members.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> AddElasticubeDataSecurityWithHttpMessagesAsync(IList<ElasticubeNewDataSecurityItem> arrayofDataSecurityobjectsdescription = default(IList<ElasticubeNewDataSecurityItem>), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update a data security rule by id
        /// </summary>
        /// <remarks>
        /// Update a data security rule by id
        /// </remarks>
        /// <param name='id'>
        /// data security _id
        /// </param>
        /// <param name='dataSecurityobjectdescription'>
        /// The data security object that needs to be updated by the elasticube
        /// identifier
        /// &lt;b&gt;server&lt;/b&gt; and &lt;b&gt;elasticube&lt;/b&gt; are
        /// required
        ///
        /// &lt;br /&gt;&lt;b&gt;exclusionary&lt;/b&gt; - This boolean
        /// determines if a data security rule is exclusionary or inclusionary.
        /// By default, this value is &lt;b&gt;false&lt;/b&gt;, which means all
        /// rules are inclusionary.When a rule is inclusionary, all defined
        /// members can see the relevant rows. When a rule is exclusionary, the
        /// relevant rows are hidden from all defined members.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> UpdateElasticubeDataSecurityWithHttpMessagesAsync(string id, ElasticubeUpdateDataSecurity dataSecurityobjectdescription = default(ElasticubeUpdateDataSecurity), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get share dashboard
        /// </summary>
        /// <remarks>
        /// Operations about sharing dashboard
        /// </remarks>
        /// <param name='id'>
        /// dashboard's oid
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Share>> GetDashboardShareWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// share dashboard
        /// </summary>
        /// <remarks>
        /// Operations about sharing dashboard
        /// </remarks>
        /// <param name='id'>
        /// dashboard's oid
        /// </param>
        /// <param name='share'>
        /// share object that will define the share
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> ShareDashboardWithHttpMessagesAsync(string id, Share share = default(Share), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get user dashboard subscription
        /// </summary>
        /// <remarks>
        /// Operations about dashboard user subscription
        /// </remarks>
        /// <param name='id'>
        /// dashboard's oid
        /// </param>
        /// <param name='adminAccess'>
        /// Admin access mode
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<SharesSubscription>> GetUserDashboardSubscriptionWithHttpMessagesAsync(string id, bool? adminAccess = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// update user dashboard subscription
        /// </summary>
        /// <remarks>
        /// Operations about dashboard user subscription
        /// </remarks>
        /// <param name='id'>
        /// dashboard's oid
        /// </param>
        /// <param name='sharesSubscription'>
        /// subscription object
        /// </param>
        /// <param name='adminAccess'>
        /// Admin access mode
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> UpdateUserDashboardSubscriptionWithHttpMessagesAsync(string id, SharesSubscription sharesSubscription = default(SharesSubscription), bool? adminAccess = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns geographical coordinates for the given locations
        /// </summary>
        /// <remarks>
        /// Performs geo-coding of the given locations and returns their
        /// geographical coordinates
        /// </remarks>
        /// <param name='geoParams'>
        /// Geo request parameters object, containing an array of locations and
        /// geoLevel:{'locations': [{ 'name': 'Cupertino', 'country': 'United
        /// States', 'state': 'California' }], 'geoLevel': 'city'} or
        /// {'locations': [{ 'name': 'United States, CA, Cupertino' }],
        /// 'geoLevel': 'city'}
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<GeoLocation>>> GetGeoWithHttpMessagesAsync(GeoParams geoParams = default(GeoParams), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get geoJson by type
        /// </summary>
        /// <remarks>
        /// Operations about geo
        /// </remarks>
        /// <param name='type'>
        /// type of geo json (ie: world, usa)
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GeoJsonWithHttpMessagesAsync(string type, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns a list of available palettes in the Sisense web app.
        /// </summary>
        /// <remarks>
        /// Gets all existing palettes
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<Palette>>> GetAllPalettesWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Adds a new color palette.
        /// </summary>
        /// <remarks>
        /// Adds a new color palette
        /// </remarks>
        /// <param name='palette'>
        /// New palette to add
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> AddPaletteWithHttpMessagesAsync(Palette palette = default(Palette), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns the default color palette.
        /// </summary>
        /// <remarks>
        /// Gets the default palette
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Palette>> GetDefaultPaletteWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates the dashboard's color palette.
        /// </summary>
        /// <remarks>
        /// Update an existing color palette
        /// </remarks>
        /// <param name='name'>
        /// Palette's name
        /// </param>
        /// <param name='palette'>
        /// The updated palette settings to add
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> UpdatePaletteWithHttpMessagesAsync(string name, Palette palette = default(Palette), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes a color palette from the color palettes.
        /// </summary>
        /// <remarks>
        /// Removes an existing color palette
        /// </remarks>
        /// <param name='name'>
        /// Palette's name
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> RemovePaletteWithHttpMessagesAsync(string name, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns users that are logged in.
        /// </summary>
        /// <remarks>
        /// Operations about auth
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IsAuthenticatedOKResponse>> IsAuthenticatedWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Forces the user to be logged out
        /// </summary>
        /// <remarks>
        /// Operations about auth.
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> LogoutWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns all users and related metadata.
        /// </summary>
        /// <remarks>
        /// Operations about users
        /// </remarks>
        /// <param name='limit'>
        /// Limits the result set to a defined number of results.
        /// </param>
        /// <param name='skip'>
        /// Defines how many items to skip before returning the results.
        /// </param>
        /// <param name='search'>
        /// Enter a search query to return results matching the query.
        /// </param>
        /// <param name='groups'>
        /// Enter a users groups IDs comma delimiter to return results matching
        /// the query.
        /// </param>
        /// <param name='orderby'>
        /// Orders the results by field name. You can add multiple sort fields
        /// separated by a comma delimiter ','
        /// </param>
        /// <param name='desc'>
        /// Defines the order of the results. True returns results in a
        /// descending order.
        /// </param>
        /// <param name='onlyAD'>
        /// Searches only Active Directory users.
        /// </param>
        /// <param name='groupsNames'>
        /// Includes the user's groups if the user belongs to one or more
        /// groups.
        /// </param>
        /// <param name='includeDomain'>
        /// Returns the domain details of each AD user.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<GetAllOKResponseItem>>> GetAllWithHttpMessagesAsync(int? limit = default(int?), int? skip = default(int?), string search = default(string), string groups = default(string), string orderby = default(string), bool? desc = default(bool?), bool? onlyAD = default(bool?), bool? groupsNames = default(bool?), bool? includeDomain = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Adds a new user.
        /// </summary>
        /// <remarks>
        /// Operations about users
        /// </remarks>
        /// <param name='newUser'>
        /// The user object includes all the user information.
        /// </param>
        /// <param name='notify'>
        /// Send notifications to the user.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<AddUserOKResponse>> AddUserWithHttpMessagesAsync(IList<User> newUser = default(IList<User>), string notify = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Searches for users in Active Directory.
        /// </summary>
        /// <remarks>
        /// Operations about users
        /// </remarks>
        /// <param name='limit'>
        /// Limits the result set to a defined number of results. - 0 or blank
        /// to not limit
        /// </param>
        /// <param name='checkExist'>
        /// Checks if the user exists in the database.
        /// </param>
        /// <param name='search'>
        /// Enter a search query to return results matching the query.
        /// </param>
        /// <param name='domain'>
        /// Enter a domain name or id.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<GetAdUsersOKResponseItem>>> GetAdUsersWithHttpMessagesAsync(int? limit = default(int?), bool? checkExist = default(bool?), string search = default(string), string domain = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Imports a user from Active Directory as a new user in Sisense.
        /// </summary>
        /// <remarks>
        /// Operations about users
        /// </remarks>
        /// <param name='user'>
        /// The **add Active Directory user** endpoint receives an Active
        /// Directory user object, retrieves the user's details from Active
        /// Directory and adds it to the application.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<AddAdUserOKResponse>> AddAdUserWithHttpMessagesAsync(IList<ADuserSearchResponse> user = default(IList<ADuserSearchResponse>), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Searches for users in all user directories.
        /// </summary>
        /// <remarks>
        /// Operations about users
        /// </remarks>
        /// <param name='limit'>
        /// Limits the result set to a defined number of results. - 0 or blank
        /// to not limit
        /// </param>
        /// <param name='search'>
        /// contains
        /// </param>
        /// <param name='groups'>
        /// Enter a users groups IDs comma delimiter to return results matching
        /// the query.
        /// </param>
        /// <param name='includeDomain'>
        /// Returns the domain details of each AD user.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<GetAllDirectoriesUsersOKResponseItem>>> GetAllDirectoriesUsersWithHttpMessagesAsync(int? limit = default(int?), string search = default(string), string groups = default(string), bool? includeDomain = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Counts users using a defined query string.
        /// </summary>
        /// <remarks>
        /// Operations about users
        /// </remarks>
        /// <param name='search'>
        /// Searches for users with usernames that include the query string.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<CountOKResponse>> CountWithHttpMessagesAsync(string search = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieves my user details.
        /// </summary>
        /// <remarks>
        /// Operations about users
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<GetLoggedInUserOKResponse>> GetLoggedInUserWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns metadata for a user by username or user ID.
        /// </summary>
        /// <remarks>
        /// Operations about users
        /// </remarks>
        /// <param name='user'>
        /// The user's ID or username
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<FindByIdUsernameOKResponse>> FindByIdUsernameWithHttpMessagesAsync(string user, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates one or more user details, by user ID or username.
        /// </summary>
        /// <remarks>
        /// Operations about users
        /// </remarks>
        /// <param name='user'>
        /// The user's ID or username.
        /// </param>
        /// <param name='userUpdate'>
        /// The user object that needs to be updated.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> UpdateUserWithHttpMessagesAsync(string user, UserUpdate userUpdate = default(UserUpdate), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes a user by user ID or username.
        /// </summary>
        /// <remarks>
        /// Operations about users
        /// </remarks>
        /// <param name='user'>
        /// The user's ID or username.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> DeleteUserByIdUsernameWithHttpMessagesAsync(string user, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes a user by user ID.
        /// </summary>
        /// <remarks>
        /// Operations about users
        /// </remarks>
        /// <param name='userIds'>
        /// The user's ID.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> DeleteUsersWithHttpMessagesAsync(IList<string> userIds = default(IList<string>), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns the users and related metadata of a simulated operation
        /// that adds multiple users.
        /// </summary>
        /// <remarks>
        /// Operations about users
        /// </remarks>
        /// <param name='emailUserList'>
        /// The list of user emails to add, or usernames for Active Directory
        /// mode.
        /// </param>
        /// <param name='admode'>
        /// run in ActiveDirectory mode
        /// </param>
        /// <param name='ldapDomainId'>
        /// run in ActiveDirectory mode
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<SimulateOKResponse>> SimulateWithHttpMessagesAsync(IList<string> emailUserList = default(IList<string>), bool? admode = default(bool?), string ldapDomainId = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Validates existing users by entering their emails.
        /// </summary>
        /// <remarks>
        /// Operations about users
        /// </remarks>
        /// <param name='emails'>
        /// List of emails of users that require validation.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> ValidateEmailsWithHttpMessagesAsync(IList<string> emails = default(IList<string>), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Sends a user an email to activate or reset the user's password.
        /// </summary>
        /// <remarks>
        /// Operations about users
        /// </remarks>
        /// <param name='userEmail'>
        /// The email of the user that requires a password reset.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> ForgetPasswordWithHttpMessagesAsync(UserEmail userEmail = default(UserEmail), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns all user groups with metadata.
        /// </summary>
        /// <remarks>
        /// Operations about groups
        /// </remarks>
        /// <param name='limit'>
        /// Limits the result set to a defined number of results. Enter 0
        /// (zero) or leave blank not to limit.
        /// </param>
        /// <param name='skip'>
        /// Defines how many items to skip before returning the results.
        /// </param>
        /// <param name='search'>
        /// Enter a search query to return results matching the query.
        /// </param>
        /// <param name='dn'>
        /// Search for a group using an Active Directory dn as the search
        /// query. Use the semi-colon ; delimiter to search multiple groups.
        /// </param>
        /// <param name='orderby'>
        /// Orders the results by field name. You can add multiple sort fields
        /// separated by a comma delimiter ','
        /// </param>
        /// <param name='desc'>
        /// Defines the order of the results. True returns results in a
        /// descending order.
        /// </param>
        /// <param name='onlyAD'>
        /// Searches only Active Directory user groups.
        /// </param>
        /// <param name='noAD'>
        /// Search only for non-Active Directory groups.
        /// </param>
        /// <param name='exactMatch'>
        /// Searches exact matches when searching by the Active Directory dn.
        /// </param>
        /// <param name='usersCount'>
        /// Counts the number of users in each group.
        /// </param>
        /// <param name='includeDomain'>
        /// Returns the domain details of each AD group.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<GetAllOKResponseItemModel>>> GetAll1WithHttpMessagesAsync(int? limit = default(int?), int? skip = default(int?), string search = default(string), string dn = default(string), string orderby = default(string), bool? desc = default(bool?), bool? onlyAD = default(bool?), bool? noAD = default(bool?), bool? exactMatch = default(bool?), bool? usersCount = default(bool?), bool? includeDomain = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Adds a new Sisense user group.
        /// </summary>
        /// <remarks>
        /// Operations about groups
        /// </remarks>
        /// <param name='newGroups'>
        /// The group object that needs to be added.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<AddGroupOKResponse>> AddGroupWithHttpMessagesAsync(IList<RegularGroup> newGroups = default(IList<RegularGroup>), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes multiple groups by group name or ID.
        /// </summary>
        /// <remarks>
        /// Operations about groups
        /// </remarks>
        /// <param name='deleteGroup'>
        /// The IDs of the groups to delete.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> DeleteGroupsWithHttpMessagesAsync(DeleteGroup deleteGroup = default(DeleteGroup), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Searches for groups directly in Active Directory.
        /// </summary>
        /// <remarks>
        /// Operations about groups
        /// </remarks>
        /// <param name='limit'>
        /// Limits the result set to a defined number of results. Enter 0
        /// (zero) or leave blank not to limit. - 0 or blank to not limit
        /// </param>
        /// <param name='checkExist'>
        /// Check if a group exists in Active Directory, and if not, searches
        /// groups created in Sisense.
        /// </param>
        /// <param name='search'>
        /// Enter a search query to return results matching the query.
        /// </param>
        /// <param name='domain'>
        /// Enter a domain name or id.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<GetAdGroupsOKResponseItem>>> GetAdGroupsWithHttpMessagesAsync(int? limit = default(int?), bool? checkExist = default(bool?), string search = default(string), string domain = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Adds a new Active Directory user group.
        /// </summary>
        /// <remarks>
        /// Operations about groups
        /// </remarks>
        /// <param name='newGroups'>
        /// The group object that needs to be added to the collection.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<AddAdGroupsOKResponse>> AddAdGroupsWithHttpMessagesAsync(IList<ADgroup> newGroups = default(IList<ADgroup>), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Searches for groups in all directories.
        /// </summary>
        /// <remarks>
        /// Operations about groups
        /// </remarks>
        /// <param name='limit'>
        /// Limits the result set to a defined number of results. Enter 0
        /// (zero) or leave blank not to limit. - 0 or blank to not limit
        /// </param>
        /// <param name='search'>
        /// Enter a search query to return results matching the query.
        /// </param>
        /// <param name='usersCount'>
        /// Returns the number of users per group.
        /// </param>
        /// <param name='includeDomain'>
        /// Returns the domain details of each AD group.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<GetAllDirectoriesGroupsOKResponseItem>>> GetAllDirectoriesGroupsWithHttpMessagesAsync(int? limit = default(int?), string search = default(string), bool? usersCount = default(bool?), bool? includeDomain = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns metadata for a group by group ID or name.
        /// </summary>
        /// <remarks>
        /// Operations about groups
        /// </remarks>
        /// <param name='group'>
        /// The ID or username of the group
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<FindByIdNameOKResponse>> FindByIdNameWithHttpMessagesAsync(string group, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates a group by group ID or name. What are we updating? name,
        /// role (only for AD)
        /// </summary>
        /// <remarks>
        /// Operations about groups
        /// </remarks>
        /// <param name='group'>
        /// The group's ID or name.
        /// </param>
        /// <param name='groupUpdate'>
        /// The group object that needs to be updated.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> UpdateGroupWithHttpMessagesAsync(string group, GroupUpdate groupUpdate = default(GroupUpdate), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes a group by group ID or name.
        /// </summary>
        /// <remarks>
        /// Operations about groups
        /// </remarks>
        /// <param name='group'>
        /// The group's ID or name.
        /// </param>
        /// <param name='deleteAdUsers'>
        /// Select true if you want to delete the users of the Active Directory
        /// group.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> DeleteGroupByIdNameWithHttpMessagesAsync(string group, bool? deleteAdUsers = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns a list of users in a group together with each user's
        /// metadata.
        /// </summary>
        /// <remarks>
        /// Operations about groups
        /// </remarks>
        /// <param name='group'>
        /// The group's ID or username.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<GetGroupUsersOKResponseItem>>> GetGroupUsersWithHttpMessagesAsync(string group, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Adds users to a Sisense user group.
        /// </summary>
        /// <remarks>
        /// Operations about groups
        /// </remarks>
        /// <param name='group'>
        /// The group's ID or name.
        /// </param>
        /// <param name='usersArray'>
        /// The IDs or usernames of the users that need to be added to the
        /// group.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<string>>> AddGroupUsersWithHttpMessagesAsync(string group, IList<string> usersArray = default(IList<string>), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Removes users from a user group.
        /// </summary>
        /// <remarks>
        /// Operations about groups
        /// </remarks>
        /// <param name='group'>
        /// The group's ID or name.
        /// </param>
        /// <param name='usersArray'>
        /// The user IDs or usernames to remove from the group.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<string>>> DeleteGroupUsersWithHttpMessagesAsync(string group, IList<string> usersArray = default(IList<string>), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns a list of groups by groups IDs.
        /// </summary>
        /// <remarks>
        /// Operations about groups
        /// </remarks>
        /// <param name='idsList'>
        /// List of groups Ids
        /// </param>
        /// <param name='usersCount'>
        /// Returns the number of users per group.
        /// </param>
        /// <param name='includeDomain'>
        /// Returns the domain details of each AD group.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<FindByIdsOKResponseItem>>> FindByIdsWithHttpMessagesAsync(IList<string> idsList = default(IList<string>), bool? usersCount = default(bool?), bool? includeDomain = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Checks if the group exists.
        /// </summary>
        /// <remarks>
        /// Operations about groups
        /// </remarks>
        /// <param name='group'>
        /// The name of the group to validate.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<bool?>> ValidateNameMethodWithHttpMessagesAsync(GroupModel group = default(GroupModel), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns all the role types and the enabled permissions per role
        /// type.
        /// </summary>
        /// <remarks>
        /// Get all roles
        /// </remarks>
        /// <param name='includeManifest'>
        /// Includes the role's manifest (list of permissions showing what's
        /// enabled/disabled).
        /// </param>
        /// <param name='includeBaseRolesName'>
        /// Includes the role's base role name.
        /// </param>
        /// <param name='compiledRoles'>
        /// Select True.
        /// </param>
        /// <param name='envelop'>
        /// If true, the response will always be '200' with fail and success
        /// codes presented in an array.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<GetAllRolesOKResponseItem>>> GetAllRolesWithHttpMessagesAsync(bool? includeManifest = default(bool?), bool? includeBaseRolesName = default(bool?), bool? compiledRoles = default(bool?), bool? envelop = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Adds a new role (currently not supported).
        /// </summary>
        /// <remarks>
        /// Add new role
        /// </remarks>
        /// <param name='role'>
        /// role object that needs to be added to the collection
        /// </param>
        /// <param name='envelop'>
        /// wrap response with status 200
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<AddRoleOKResponse>> AddRoleWithHttpMessagesAsync(Role role = default(Role), bool? envelop = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns the user role by role ID or role name.
        /// </summary>
        /// <remarks>
        /// Get role by id or name
        /// </remarks>
        /// <param name='idOrName'>
        /// The name or ID of the role.
        /// </param>
        /// <param name='compiledRole'>
        /// True returns full list of role permissions. False returns the
        /// compiled base role name.
        /// </param>
        /// <param name='envelop'>
        /// wrap response with status 200
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<GetRoleByIdOrNameOKResponse>> GetRoleByIdOrNameWithHttpMessagesAsync(string idOrName, bool? compiledRole = default(bool?), bool? envelop = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes a user role by ID or name.
        /// </summary>
        /// <remarks>
        /// Delete role by id or name
        /// </remarks>
        /// <param name='idOrName'>
        /// The name or ID of the role.
        /// </param>
        /// <param name='envelop'>
        /// wrap response with status 200
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> DeleteRoleByIdOrNameWithHttpMessagesAsync(string idOrName, bool? envelop = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates a user role by role ID or name.
        /// </summary>
        /// <remarks>
        /// Update role by id or name
        /// </remarks>
        /// <param name='idOrName'>
        /// The name or ID of the role.
        /// </param>
        /// <param name='role'>
        /// The updated role object should include the path to the setting you
        /// want to change and the setting.
        /// </param>
        /// <param name='envelop'>
        /// wrap response with status 200
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<UpdateRoleByIdOrNameOKResponse>> UpdateRoleByIdOrNameWithHttpMessagesAsync(string idOrName, Role role = default(Role), bool? envelop = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns the permissions of a user role under a specific path in the
        /// role manifest.
        /// </summary>
        /// <remarks>
        /// Get manifest by id or name and path
        /// </remarks>
        /// <param name='idOrName'>
        /// The name or ID of the role.
        /// </param>
        /// <param name='path'>
        /// Encoded path to the manifest, for example, /dashboards/filters will
        /// return all permissions under filters.
        /// </param>
        /// <param name='compiledRole'>
        /// True returns full list of role permissions. False returns the
        /// compiled base role name.
        /// </param>
        /// <param name='envelop'>
        /// wrap response with status 200
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<GetManifestByPathOKResponse>> GetManifestByPathWithHttpMessagesAsync(string idOrName, string path, bool? compiledRole = default(bool?), bool? envelop = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Restores some or all permissions under a specific path in the role
        /// manifest.
        /// </summary>
        /// <remarks>
        /// delete manifest by id or name and path
        /// </remarks>
        /// <param name='idOrName'>
        /// The name or ID of the role.
        /// </param>
        /// <param name='path'>
        /// Encoded path to the manifest. Enter the full path of the setting
        /// you want to change, as it appears in the hierarchy.
        /// </param>
        /// <param name='envelop'>
        /// wrap response with status 200
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<DeleteManifestByPathOKResponse>> DeleteManifestByPathWithHttpMessagesAsync(string idOrName, string path, bool? envelop = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates permissions in a user role manifest by role ID or name.
        /// </summary>
        /// <remarks>
        /// update manifest by id or name and path
        /// </remarks>
        /// <param name='idOrName'>
        /// The name or ID of the role.
        /// </param>
        /// <param name='path'>
        /// Encoded path to the manifest. Enter the path to the setting that
        /// you want to change as it appears in the hierarchy. Do not include
        /// the setting in the path. Example: To change the ‘Create’ setting
        /// for dashboard filters, enter dashboards/filters/. For creating
        /// dashboards, enter /dashboards.
        /// </param>
        /// <param name='manifest'>
        /// updated manifest object
        /// </param>
        /// <param name='envelop'>
        /// wrap response with status 200
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<UpdateManifestByPathOKResponse>> UpdateManifestByPathWithHttpMessagesAsync(string idOrName, string path, Manifest manifest = default(Manifest), bool? envelop = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates a user role manifest by role ID or name.
        /// </summary>
        /// <remarks>
        /// add manifest by id or name and path
        /// </remarks>
        /// <param name='idOrName'>
        /// The name or ID of the role.
        /// </param>
        /// <param name='path'>
        /// Encoded path to the manifest. Enter the path to the setting that
        /// you want to change as it appears in the hierarchy. Do not include
        /// the setting in the path. Example: To change the ‘Create’ setting
        /// for dashboard filters, enter dashboards/filters/. For creating
        /// dashboards, enter /dashboards. See the reference table above for
        /// more settings.
        /// </param>
        /// <param name='manifest'>
        /// The updated manifest object. Defines whether to enable or disable
        /// the setting. For example, to enable ‘create’, type in: create: true
        /// </param>
        /// <param name='envelop'>
        /// wrap response with status 200
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<AddToManifestByPathOKResponse>> AddToManifestByPathWithHttpMessagesAsync(string idOrName, string path, Manifest manifest = default(Manifest), bool? envelop = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

    }
}
