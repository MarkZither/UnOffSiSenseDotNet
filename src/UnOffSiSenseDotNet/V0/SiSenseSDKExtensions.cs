// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace UnOffSiSenseDotNet.V0
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for SiSenseSDK.
    /// </summary>
    public static partial class SiSenseSDKExtensions
    {
            /// <summary>
            /// get api settings.
            /// </summary>
            /// <remarks>
            /// Returns api settings.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object Get(this ISiSenseSDK operations)
            {
                return operations.GetAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// get api settings.
            /// </summary>
            /// <remarks>
            /// Returns api settings.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetAsync(this ISiSenseSDK operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// set api settings.
            /// </summary>
            /// <remarks>
            /// Returns api settings.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object Set(this ISiSenseSDK operations)
            {
                return operations.SetAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// set api settings.
            /// </summary>
            /// <remarks>
            /// Returns api settings.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> SetAsync(this ISiSenseSDK operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete api settings.
            /// </summary>
            /// <remarks>
            /// Delete api settings.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='security'>
            /// Object with the security settings.
            /// </param>
            /// <param name='authorization'>
            /// The user's API token preceded by the keyword `Bearer ` (with space between
            /// it and the token). For more information, see [API
            /// tutorial](http://developer.sisense.com/display/API2/Using+the+REST+API).
            /// </param>
            public static object DeleteToken(this ISiSenseSDK operations, Security security, string authorization = default(string))
            {
                return operations.DeleteTokenAsync(security, authorization).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete api settings.
            /// </summary>
            /// <remarks>
            /// Delete api settings.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='security'>
            /// Object with the security settings.
            /// </param>
            /// <param name='authorization'>
            /// The user's API token preceded by the keyword `Bearer ` (with space between
            /// it and the token). For more information, see [API
            /// tutorial](http://developer.sisense.com/display/API2/Using+the+REST+API).
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteTokenAsync(this ISiSenseSDK operations, Security security, string authorization = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteTokenWithHttpMessagesAsync(security, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Generate api settings.
            /// </summary>
            /// <remarks>
            /// Generate api settings.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GenerateNew(this ISiSenseSDK operations)
            {
                return operations.GenerateNewAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Generate api settings.
            /// </summary>
            /// <remarks>
            /// Generate api settings.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GenerateNewAsync(this ISiSenseSDK operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GenerateNewWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns the current branding metadata
            /// </summary>
            /// <remarks>
            /// Returns the current branding metadata
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='authorization'>
            /// The user's API token preceded by the keyword `Bearer ` (with space between
            /// it and the token). For more information, see [API
            /// tutorial](http://developer.sisense.com/display/API2/Using+the+REST+API).
            /// </param>
            public static object GetBranding(this ISiSenseSDK operations, string authorization = default(string))
            {
                return operations.GetBrandingAsync(authorization).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the current branding metadata
            /// </summary>
            /// <remarks>
            /// Returns the current branding metadata
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='authorization'>
            /// The user's API token preceded by the keyword `Bearer ` (with space between
            /// it and the token). For more information, see [API
            /// tutorial](http://developer.sisense.com/display/API2/Using+the+REST+API).
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetBrandingAsync(this ISiSenseSDK operations, string authorization = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetBrandingWithHttpMessagesAsync(authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds new branding to your Sisense dashboards
            /// </summary>
            /// <remarks>
            /// Branding includes customized texts, logos and emails.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='branding'>
            /// Object with the branding metadata.
            /// </param>
            /// <param name='authorization'>
            /// The user's API token preceded by the keyword `Bearer ` (with space between
            /// it and the token). For more information, see [API
            /// tutorial](http://developer.sisense.com/display/API2/Using+the+REST+API).
            /// </param>
            public static object SetBranding(this ISiSenseSDK operations, Branding branding, string authorization = default(string))
            {
                return operations.SetBrandingAsync(branding, authorization).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds new branding to your Sisense dashboards
            /// </summary>
            /// <remarks>
            /// Branding includes customized texts, logos and emails.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='branding'>
            /// Object with the branding metadata.
            /// </param>
            /// <param name='authorization'>
            /// The user's API token preceded by the keyword `Bearer ` (with space between
            /// it and the token). For more information, see [API
            /// tutorial](http://developer.sisense.com/display/API2/Using+the+REST+API).
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> SetBrandingAsync(this ISiSenseSDK operations, Branding branding, string authorization = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SetBrandingWithHttpMessagesAsync(branding, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Resets the current branding to the default Sisense branding
            /// </summary>
            /// <remarks>
            /// Resets the current branding to the default Sisense branding.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='authorization'>
            /// The user's API token preceded by the keyword `Bearer ` (with space between
            /// it and the token). For more information, see [API
            /// tutorial](http://developer.sisense.com/display/API2/Using+the+REST+API).
            /// </param>
            public static object ResetBranding(this ISiSenseSDK operations, string authorization = default(string))
            {
                return operations.ResetBrandingAsync(authorization).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Resets the current branding to the default Sisense branding
            /// </summary>
            /// <remarks>
            /// Resets the current branding to the default Sisense branding.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='authorization'>
            /// The user's API token preceded by the keyword `Bearer ` (with space between
            /// it and the token). For more information, see [API
            /// tutorial](http://developer.sisense.com/display/API2/Using+the+REST+API).
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ResetBrandingAsync(this ISiSenseSDK operations, string authorization = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ResetBrandingWithHttpMessagesAsync(authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns globalization settings
            /// </summary>
            /// <remarks>
            /// Returns locale settings, including the set locale, and whether autodetect
            /// is enabled.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='authorization'>
            /// The user's API token preceded by the keyword `Bearer ` (with space between
            /// it and the token). For more information, see [API
            /// tutorial](http://developer.sisense.com/display/API2/Using+the+REST+API).
            /// </param>
            public static object Get1(this ISiSenseSDK operations, string authorization = default(string))
            {
                return operations.Get1Async(authorization).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns globalization settings
            /// </summary>
            /// <remarks>
            /// Returns locale settings, including the set locale, and whether autodetect
            /// is enabled.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='authorization'>
            /// The user's API token preceded by the keyword `Bearer ` (with space between
            /// it and the token). For more information, see [API
            /// tutorial](http://developer.sisense.com/display/API2/Using+the+REST+API).
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> Get1Async(this ISiSenseSDK operations, string authorization = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.Get1WithHttpMessagesAsync(authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Add globalization settings
            /// </summary>
            /// <remarks>
            /// You can change the locale or select whether the localization selection is
            /// automatically detected or not.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='globalization'>
            /// Object with the globalization settings.
            /// </param>
            /// <param name='authorization'>
            /// The user's API token preceded by the keyword `Bearer ` (with space between
            /// it and the token). For more information, see [API
            /// tutorial](http://developer.sisense.com/display/API2/Using+the+REST+API).
            /// </param>
            public static object Set1(this ISiSenseSDK operations, Globalization globalization, string authorization = default(string))
            {
                return operations.Set1Async(globalization, authorization).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add globalization settings
            /// </summary>
            /// <remarks>
            /// You can change the locale or select whether the localization selection is
            /// automatically detected or not.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='globalization'>
            /// Object with the globalization settings.
            /// </param>
            /// <param name='authorization'>
            /// The user's API token preceded by the keyword `Bearer ` (with space between
            /// it and the token). For more information, see [API
            /// tutorial](http://developer.sisense.com/display/API2/Using+the+REST+API).
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> Set1Async(this ISiSenseSDK operations, Globalization globalization, string authorization = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.Set1WithHttpMessagesAsync(globalization, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns proxy server settings in your server.
            /// </summary>
            /// <remarks>
            /// This is to allow geo data (used in area and scatter map widgets) to be
            /// pulled in from external Sisense servers.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object Get2(this ISiSenseSDK operations)
            {
                return operations.Get2Async().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns proxy server settings in your server.
            /// </summary>
            /// <remarks>
            /// This is to allow geo data (used in area and scatter map widgets) to be
            /// pulled in from external Sisense servers.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> Get2Async(this ISiSenseSDK operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.Get2WithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds proxy server settings to your server.
            /// </summary>
            /// <remarks>
            /// This option can be used to allow geo data (used in area and scatter map
            /// widgets), to be pulled in from external Sisense servers when such data is
            /// blocked by your organization’s proxy server.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='proxy'>
            /// Object with the Proxy settings.
            /// </param>
            /// <param name='authorization'>
            /// The user's API token preceded by the keyword `Bearer ` (with space between
            /// it and the token). For more information, see [API
            /// tutorial](http://developer.sisense.com/display/API2/Using+the+REST+API).
            /// </param>
            public static object Add(this ISiSenseSDK operations, Proxy proxy, string authorization = default(string))
            {
                return operations.AddAsync(proxy, authorization).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds proxy server settings to your server.
            /// </summary>
            /// <remarks>
            /// This option can be used to allow geo data (used in area and scatter map
            /// widgets), to be pulled in from external Sisense servers when such data is
            /// blocked by your organization’s proxy server.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='proxy'>
            /// Object with the Proxy settings.
            /// </param>
            /// <param name='authorization'>
            /// The user's API token preceded by the keyword `Bearer ` (with space between
            /// it and the token). For more information, see [API
            /// tutorial](http://developer.sisense.com/display/API2/Using+the+REST+API).
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> AddAsync(this ISiSenseSDK operations, Proxy proxy, string authorization = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddWithHttpMessagesAsync(proxy, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates proxy server settings in your server.
            /// </summary>
            /// <remarks>
            /// This option can be used to allow geo data (used in area and scatter map
            /// widgets), to be pulled in from external Sisense servers when such data is
            /// blocked by your organization’s proxy server.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='proxy'>
            /// Object with the Proxy settings.
            /// </param>
            /// <param name='authorization'>
            /// The user's API token preceded by the keyword `Bearer ` (with space between
            /// it and the token). For more information, see [API
            /// tutorial](http://developer.sisense.com/display/API2/Using+the+REST+API).
            /// </param>
            public static object Update(this ISiSenseSDK operations, Proxy proxy, string authorization = default(string))
            {
                return operations.UpdateAsync(proxy, authorization).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates proxy server settings in your server.
            /// </summary>
            /// <remarks>
            /// This option can be used to allow geo data (used in area and scatter map
            /// widgets), to be pulled in from external Sisense servers when such data is
            /// blocked by your organization’s proxy server.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='proxy'>
            /// Object with the Proxy settings.
            /// </param>
            /// <param name='authorization'>
            /// The user's API token preceded by the keyword `Bearer ` (with space between
            /// it and the token). For more information, see [API
            /// tutorial](http://developer.sisense.com/display/API2/Using+the+REST+API).
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateAsync(this ISiSenseSDK operations, Proxy proxy, string authorization = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(proxy, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes proxy server settings in your server.
            /// </summary>
            /// <remarks>
            /// Deletes proxy server settings in your server.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='authorization'>
            /// The user's API token preceded by the keyword `Bearer ` (with space between
            /// it and the token). For more information, see [API
            /// tutorial](http://developer.sisense.com/display/API2/Using+the+REST+API).
            /// </param>
            public static object Delete(this ISiSenseSDK operations, string authorization = default(string))
            {
                return operations.DeleteAsync(authorization).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes proxy server settings in your server.
            /// </summary>
            /// <remarks>
            /// Deletes proxy server settings in your server.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='authorization'>
            /// The user's API token preceded by the keyword `Bearer ` (with space between
            /// it and the token). For more information, see [API
            /// tutorial](http://developer.sisense.com/display/API2/Using+the+REST+API).
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteAsync(this ISiSenseSDK operations, string authorization = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteWithHttpMessagesAsync(authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns security settings, including the API token.
            /// </summary>
            /// <remarks>
            /// Returns **security settings**, including the API token..
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object Get3(this ISiSenseSDK operations)
            {
                return operations.Get3Async().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns security settings, including the API token.
            /// </summary>
            /// <remarks>
            /// Returns **security settings**, including the API token..
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> Get3Async(this ISiSenseSDK operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.Get3WithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds/updates security settings.
            /// </summary>
            /// <remarks>
            /// Adds/updates **security settings**.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='security'>
            /// Object with the security settings.
            /// </param>
            /// <param name='authorization'>
            /// The user's API token preceded by the keyword `Bearer ` (with space between
            /// it and the token). For more information, see [API
            /// tutorial](http://developer.sisense.com/display/API2/Using+the+REST+API).
            /// </param>
            public static object Set2(this ISiSenseSDK operations, SecurityModel security, string authorization = default(string))
            {
                return operations.Set2Async(security, authorization).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds/updates security settings.
            /// </summary>
            /// <remarks>
            /// Adds/updates **security settings**.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='security'>
            /// Object with the security settings.
            /// </param>
            /// <param name='authorization'>
            /// The user's API token preceded by the keyword `Bearer ` (with space between
            /// it and the token). For more information, see [API
            /// tutorial](http://developer.sisense.com/display/API2/Using+the+REST+API).
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> Set2Async(this ISiSenseSDK operations, SecurityModel security, string authorization = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.Set2WithHttpMessagesAsync(security, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns sso settings.
            /// </summary>
            /// <remarks>
            /// The **sso settings** used for single sign on configuration.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object Get4(this ISiSenseSDK operations)
            {
                return operations.Get4Async().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns sso settings.
            /// </summary>
            /// <remarks>
            /// The **sso settings** used for single sign on configuration.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> Get4Async(this ISiSenseSDK operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.Get4WithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Set sso settings.
            /// </summary>
            /// <remarks>
            /// The **sso settings** used for single sign on configuration.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sso'>
            /// Object with the sso settings.
            /// </param>
            /// <param name='authorization'>
            /// The user's API token preceded by the keyword `Bearer ` (with space between
            /// it and the token). For more information, see [API
            /// tutorial](http://developer.sisense.com/display/API2/Using+the+REST+API).
            /// </param>
            public static object Set3(this ISiSenseSDK operations, Sso sso, string authorization = default(string))
            {
                return operations.Set3Async(sso, authorization).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Set sso settings.
            /// </summary>
            /// <remarks>
            /// The **sso settings** used for single sign on configuration.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sso'>
            /// Object with the sso settings.
            /// </param>
            /// <param name='authorization'>
            /// The user's API token preceded by the keyword `Bearer ` (with space between
            /// it and the token). For more information, see [API
            /// tutorial](http://developer.sisense.com/display/API2/Using+the+REST+API).
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> Set3Async(this ISiSenseSDK operations, Sso sso, string authorization = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.Set3WithHttpMessagesAsync(sso, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns system configuration settings.
            /// </summary>
            /// <remarks>
            /// The **system settings** used for system settings configuration.
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object Get5(this ISiSenseSDK operations)
            {
                return operations.Get5Async().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns system configuration settings.
            /// </summary>
            /// <remarks>
            /// The **system settings** used for system settings configuration.
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> Get5Async(this ISiSenseSDK operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.Get5WithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds or updates system settings.
            /// </summary>
            /// <remarks>
            /// The **system settings** used for system settings configuration.
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='emailServer'>
            /// Object with the system settings.
            /// </param>
            /// <param name='authorization'>
            /// The user's API token preceded by the keyword `Bearer ` (with space between
            /// it and the token). For more information, see [API
            /// tutorial](http://developer.sisense.com/display/API2/Using+the+REST+API).
            /// </param>
            public static object Set4(this ISiSenseSDK operations, EmailServer emailServer, string authorization = default(string))
            {
                return operations.Set4Async(emailServer, authorization).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds or updates system settings.
            /// </summary>
            /// <remarks>
            /// The **system settings** used for system settings configuration.
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='emailServer'>
            /// Object with the system settings.
            /// </param>
            /// <param name='authorization'>
            /// The user's API token preceded by the keyword `Bearer ` (with space between
            /// it and the token). For more information, see [API
            /// tutorial](http://developer.sisense.com/display/API2/Using+the+REST+API).
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> Set4Async(this ISiSenseSDK operations, EmailServer emailServer, string authorization = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.Set4WithHttpMessagesAsync(emailServer, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static string ApiTestTestingGet(this ISiSenseSDK operations)
            {
                return operations.ApiTestTestingGetAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ApiTestTestingGetAsync(this ISiSenseSDK operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiTestTestingGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='schemaType'>
            /// Possible values include: 'Live', 'MonetDb', 'Logical'
            /// </param>
            /// <param name='schemaId'>
            /// </param>
            /// <param name='jaql'>
            /// </param>
            /// <param name='dsid'>
            /// </param>
            /// <param name='userId'>
            /// </param>
            public static string ApiTranslationBySchemaTypeBySchemaIdJaqlPost(this ISiSenseSDK operations, string schemaType, string schemaId, object jaql = default(object), string dsid = default(string), string userId = default(string))
            {
                return operations.ApiTranslationBySchemaTypeBySchemaIdJaqlPostAsync(schemaType, schemaId, jaql, dsid, userId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='schemaType'>
            /// Possible values include: 'Live', 'MonetDb', 'Logical'
            /// </param>
            /// <param name='schemaId'>
            /// </param>
            /// <param name='jaql'>
            /// </param>
            /// <param name='dsid'>
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ApiTranslationBySchemaTypeBySchemaIdJaqlPostAsync(this ISiSenseSDK operations, string schemaType, string schemaId, object jaql = default(object), string dsid = default(string), string userId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiTranslationBySchemaTypeBySchemaIdJaqlPostWithHttpMessagesAsync(schemaType, schemaId, jaql, dsid, userId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='schemaType'>
            /// Possible values include: 'Live', 'MonetDb', 'Logical'
            /// </param>
            /// <param name='schemaId'>
            /// </param>
            /// <param name='query'>
            /// </param>
            public static string ApiTranslationBySchemaTypeBySchemaIdOdbcPost(this ISiSenseSDK operations, string schemaType, string schemaId, string query = default(string))
            {
                return operations.ApiTranslationBySchemaTypeBySchemaIdOdbcPostAsync(schemaType, schemaId, query).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='schemaType'>
            /// Possible values include: 'Live', 'MonetDb', 'Logical'
            /// </param>
            /// <param name='schemaId'>
            /// </param>
            /// <param name='query'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ApiTranslationBySchemaTypeBySchemaIdOdbcPostAsync(this ISiSenseSDK operations, string schemaType, string schemaId, string query = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiTranslationBySchemaTypeBySchemaIdOdbcPostWithHttpMessagesAsync(schemaType, schemaId, query, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='schemaType'>
            /// Possible values include: 'Live', 'MonetDb', 'Logical'
            /// </param>
            /// <param name='schemaId'>
            /// </param>
            /// <param name='query'>
            /// </param>
            /// <param name='skipPermision'>
            /// </param>
            /// <param name='includeRowCount'>
            /// </param>
            /// <param name='includeUniqueCount'>
            /// </param>
            /// <param name='userId'>
            /// </param>
            public static string ApiTranslationByDsdidJaqlExplainQueriesPost(this ISiSenseSDK operations, string schemaType, string schemaId, object query = default(object), bool? skipPermision = default(bool?), bool? includeRowCount = default(bool?), bool? includeUniqueCount = default(bool?), string userId = default(string))
            {
                return operations.ApiTranslationByDsdidJaqlExplainQueriesPostAsync(schemaType, schemaId, query, skipPermision, includeRowCount, includeUniqueCount, userId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='schemaType'>
            /// Possible values include: 'Live', 'MonetDb', 'Logical'
            /// </param>
            /// <param name='schemaId'>
            /// </param>
            /// <param name='query'>
            /// </param>
            /// <param name='skipPermision'>
            /// </param>
            /// <param name='includeRowCount'>
            /// </param>
            /// <param name='includeUniqueCount'>
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ApiTranslationByDsdidJaqlExplainQueriesPostAsync(this ISiSenseSDK operations, string schemaType, string schemaId, object query = default(object), bool? skipPermision = default(bool?), bool? includeRowCount = default(bool?), bool? includeUniqueCount = default(bool?), string userId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiTranslationByDsdidJaqlExplainQueriesPostWithHttpMessagesAsync(schemaType, schemaId, query, skipPermision, includeRowCount, includeUniqueCount, userId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='schemaType'>
            /// Possible values include: 'Live', 'MonetDb', 'Logical'
            /// </param>
            /// <param name='schemaId'>
            /// </param>
            /// <param name='queryResult'>
            /// </param>
            /// <param name='skipPermision'>
            /// </param>
            /// <param name='userId'>
            /// </param>
            public static string ApiTranslationByDsdidJaqlExplainQueriesSecondPassPost(this ISiSenseSDK operations, string schemaType, string schemaId, object queryResult = default(object), bool? skipPermision = default(bool?), string userId = default(string))
            {
                return operations.ApiTranslationByDsdidJaqlExplainQueriesSecondPassPostAsync(schemaType, schemaId, queryResult, skipPermision, userId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='schemaType'>
            /// Possible values include: 'Live', 'MonetDb', 'Logical'
            /// </param>
            /// <param name='schemaId'>
            /// </param>
            /// <param name='queryResult'>
            /// </param>
            /// <param name='skipPermision'>
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ApiTranslationByDsdidJaqlExplainQueriesSecondPassPostAsync(this ISiSenseSDK operations, string schemaType, string schemaId, object queryResult = default(object), bool? skipPermision = default(bool?), string userId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiTranslationByDsdidJaqlExplainQueriesSecondPassPostWithHttpMessagesAsync(schemaType, schemaId, queryResult, skipPermision, userId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='payload'>
            /// </param>
            public static string ApiTranslationDependencymapPost(this ISiSenseSDK operations, SchemaEtlPayload payload = default(SchemaEtlPayload))
            {
                return operations.ApiTranslationDependencymapPostAsync(payload).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='payload'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ApiTranslationDependencymapPostAsync(this ISiSenseSDK operations, SchemaEtlPayload payload = default(SchemaEtlPayload), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiTranslationDependencymapPostWithHttpMessagesAsync(payload, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='schemaEtlPayload'>
            /// </param>
            public static string ApiTranslationGenerateCustomElementsSqlsPost(this ISiSenseSDK operations, SchemaEtlPayload schemaEtlPayload = default(SchemaEtlPayload))
            {
                return operations.ApiTranslationGenerateCustomElementsSqlsPostAsync(schemaEtlPayload).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='schemaEtlPayload'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ApiTranslationGenerateCustomElementsSqlsPostAsync(this ISiSenseSDK operations, SchemaEtlPayload schemaEtlPayload = default(SchemaEtlPayload), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiTranslationGenerateCustomElementsSqlsPostWithHttpMessagesAsync(schemaEtlPayload, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='payload'>
            /// </param>
            public static string ApiTranslationExplainCustomTableQueryPost(this ISiSenseSDK operations, CustomTablePayload payload = default(CustomTablePayload))
            {
                return operations.ApiTranslationExplainCustomTableQueryPostAsync(payload).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='payload'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ApiTranslationExplainCustomTableQueryPostAsync(this ISiSenseSDK operations, CustomTablePayload payload = default(CustomTablePayload), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiTranslationExplainCustomTableQueryPostWithHttpMessagesAsync(payload, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='payload'>
            /// </param>
            public static string ApiTranslationExplainCustomColumnExpressionPost(this ISiSenseSDK operations, CustomColumnPayload payload = default(CustomColumnPayload))
            {
                return operations.ApiTranslationExplainCustomColumnExpressionPostAsync(payload).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='payload'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ApiTranslationExplainCustomColumnExpressionPostAsync(this ISiSenseSDK operations, CustomColumnPayload payload = default(CustomColumnPayload), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiTranslationExplainCustomColumnExpressionPostWithHttpMessagesAsync(payload, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='payload'>
            /// </param>
            public static IList<ContextElement> ApiTranslationGetContextFromExpressionPost(this ISiSenseSDK operations, AutoCompletionPayload payload = default(AutoCompletionPayload))
            {
                return operations.ApiTranslationGetContextFromExpressionPostAsync(payload).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='payload'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<ContextElement>> ApiTranslationGetContextFromExpressionPostAsync(this ISiSenseSDK operations, AutoCompletionPayload payload = default(AutoCompletionPayload), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiTranslationGetContextFromExpressionPostWithHttpMessagesAsync(payload, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='schemaType'>
            /// Possible values include: 'Live', 'MonetDb', 'Logical'
            /// </param>
            /// <param name='schemaId'>
            /// </param>
            /// <param name='formula'>
            /// </param>
            public static string ApiTranslationBySchemaTypeBySchemaIdParsePost(this ISiSenseSDK operations, string schemaType, string schemaId, object formula = default(object))
            {
                return operations.ApiTranslationBySchemaTypeBySchemaIdParsePostAsync(schemaType, schemaId, formula).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='schemaType'>
            /// Possible values include: 'Live', 'MonetDb', 'Logical'
            /// </param>
            /// <param name='schemaId'>
            /// </param>
            /// <param name='formula'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ApiTranslationBySchemaTypeBySchemaIdParsePostAsync(this ISiSenseSDK operations, string schemaType, string schemaId, object formula = default(object), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiTranslationBySchemaTypeBySchemaIdParsePostWithHttpMessagesAsync(schemaType, schemaId, formula, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='schemaType'>
            /// Possible values include: 'Live', 'MonetDb', 'Logical'
            /// </param>
            /// <param name='schemaId'>
            /// </param>
            /// <param name='query'>
            /// </param>
            public static string ApiTranslationBySchemaTypeBySchemaIdFieldsSearchPost(this ISiSenseSDK operations, string schemaType, string schemaId, object query = default(object))
            {
                return operations.ApiTranslationBySchemaTypeBySchemaIdFieldsSearchPostAsync(schemaType, schemaId, query).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='schemaType'>
            /// Possible values include: 'Live', 'MonetDb', 'Logical'
            /// </param>
            /// <param name='schemaId'>
            /// </param>
            /// <param name='query'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ApiTranslationBySchemaTypeBySchemaIdFieldsSearchPostAsync(this ISiSenseSDK operations, string schemaType, string schemaId, object query = default(object), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiTranslationBySchemaTypeBySchemaIdFieldsSearchPostWithHttpMessagesAsync(schemaType, schemaId, query, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='schemaType'>
            /// Possible values include: 'Live', 'MonetDb', 'Logical'
            /// </param>
            /// <param name='schemaId'>
            /// </param>
            /// <param name='query'>
            /// </param>
            public static string ApiTranslationBySchemaTypeBySchemaIdExplainsqlPost(this ISiSenseSDK operations, string schemaType, string schemaId, string query = default(string))
            {
                return operations.ApiTranslationBySchemaTypeBySchemaIdExplainsqlPostAsync(schemaType, schemaId, query).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='schemaType'>
            /// Possible values include: 'Live', 'MonetDb', 'Logical'
            /// </param>
            /// <param name='schemaId'>
            /// </param>
            /// <param name='query'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ApiTranslationBySchemaTypeBySchemaIdExplainsqlPostAsync(this ISiSenseSDK operations, string schemaType, string schemaId, string query = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiTranslationBySchemaTypeBySchemaIdExplainsqlPostWithHttpMessagesAsync(schemaType, schemaId, query, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='schemaType'>
            /// Possible values include: 'Live', 'MonetDb', 'Logical'
            /// </param>
            /// <param name='schemaId'>
            /// </param>
            /// <param name='query'>
            /// </param>
            /// <param name='rowLimit'>
            /// </param>
            /// <param name='offset'>
            /// </param>
            /// <param name='sample'>
            /// </param>
            public static string ApiTranslationBySchemaTypeBySchemaIdSqlPost(this ISiSenseSDK operations, string schemaType, string schemaId, string query = default(string), long? rowLimit = default(long?), long? offset = default(long?), long? sample = default(long?))
            {
                return operations.ApiTranslationBySchemaTypeBySchemaIdSqlPostAsync(schemaType, schemaId, query, rowLimit, offset, sample).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='schemaType'>
            /// Possible values include: 'Live', 'MonetDb', 'Logical'
            /// </param>
            /// <param name='schemaId'>
            /// </param>
            /// <param name='query'>
            /// </param>
            /// <param name='rowLimit'>
            /// </param>
            /// <param name='offset'>
            /// </param>
            /// <param name='sample'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ApiTranslationBySchemaTypeBySchemaIdSqlPostAsync(this ISiSenseSDK operations, string schemaType, string schemaId, string query = default(string), long? rowLimit = default(long?), long? offset = default(long?), long? sample = default(long?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiTranslationBySchemaTypeBySchemaIdSqlPostWithHttpMessagesAsync(schemaType, schemaId, query, rowLimit, offset, sample, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all datasources
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='q'>
            /// q
            /// </param>
            /// <param name='s'>
            /// s
            /// </param>
            /// <param name='sharedWith'>
            /// sharedWith
            /// </param>
            public static IList<DataSourcesDTO> ListUsingGET(this ISiSenseSDK operations, string q = default(string), string s = default(string), string sharedWith = default(string))
            {
                return operations.ListUsingGETAsync(q, s, sharedWith).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all datasources
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='q'>
            /// q
            /// </param>
            /// <param name='s'>
            /// s
            /// </param>
            /// <param name='sharedWith'>
            /// sharedWith
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<DataSourcesDTO>> ListUsingGETAsync(this ISiSenseSDK operations, string q = default(string), string s = default(string), string sharedWith = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListUsingGETWithHttpMessagesAsync(q, s, sharedWith, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Attach Sample
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static string SampleUsingGET(this ISiSenseSDK operations)
            {
                return operations.SampleUsingGETAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Attach Sample
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> SampleUsingGETAsync(this ISiSenseSDK operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SampleUsingGETWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get servers with ECubes
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='count'>
            /// count
            /// </param>
            /// <param name='direction'>
            /// direction
            /// </param>
            /// <param name='offset'>
            /// offset
            /// </param>
            /// <param name='q'>
            /// q
            /// </param>
            /// <param name='withPermissions'>
            /// withPermissions
            /// </param>
            public static IList<ServerDTO> GetServersUsingGET(this ISiSenseSDK operations, int? count = default(int?), string direction = default(string), int? offset = default(int?), string q = default(string), bool? withPermissions = default(bool?))
            {
                return operations.GetServersUsingGETAsync(count, direction, offset, q, withPermissions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get servers with ECubes
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='count'>
            /// count
            /// </param>
            /// <param name='direction'>
            /// direction
            /// </param>
            /// <param name='offset'>
            /// offset
            /// </param>
            /// <param name='q'>
            /// q
            /// </param>
            /// <param name='withPermissions'>
            /// withPermissions
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<ServerDTO>> GetServersUsingGETAsync(this ISiSenseSDK operations, int? count = default(int?), string direction = default(string), int? offset = default(int?), string q = default(string), bool? withPermissions = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetServersUsingGETWithHttpMessagesAsync(count, direction, offset, q, withPermissions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get cubes
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='server'>
            /// server
            /// </param>
            /// <param name='count'>
            /// count
            /// </param>
            /// <param name='direction'>
            /// direction
            /// </param>
            /// <param name='offset'>
            /// offset
            /// </param>
            /// <param name='q'>
            /// q
            /// </param>
            /// <param name='withPermissions'>
            /// withPermissions
            /// </param>
            public static IList<CubeDTO> GetCubesUsingGET(this ISiSenseSDK operations, string server, int? count = default(int?), string direction = default(string), int? offset = default(int?), string q = default(string), bool? withPermissions = default(bool?))
            {
                return operations.GetCubesUsingGETAsync(server, count, direction, offset, q, withPermissions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get cubes
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='server'>
            /// server
            /// </param>
            /// <param name='count'>
            /// count
            /// </param>
            /// <param name='direction'>
            /// direction
            /// </param>
            /// <param name='offset'>
            /// offset
            /// </param>
            /// <param name='q'>
            /// q
            /// </param>
            /// <param name='withPermissions'>
            /// withPermissions
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<CubeDTO>> GetCubesUsingGETAsync(this ISiSenseSDK operations, string server, int? count = default(int?), string direction = default(string), int? offset = default(int?), string q = default(string), bool? withPermissions = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCubesUsingGETWithHttpMessagesAsync(server, count, direction, offset, q, withPermissions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get server identity
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='server'>
            /// server
            /// </param>
            public static ServerIdentityDTO GetServersWithNextECubesUsingGET(this ISiSenseSDK operations, string server)
            {
                return operations.GetServersWithNextECubesUsingGETAsync(server).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get server identity
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='server'>
            /// server
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ServerIdentityDTO> GetServersWithNextECubesUsingGETAsync(this ISiSenseSDK operations, string server, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetServersWithNextECubesUsingGETWithHttpMessagesAsync(server, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get database simple
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='server'>
            /// server
            /// </param>
            /// <param name='databaseName'>
            /// databaseName
            /// </param>
            public static CubeDTO GetSimpleUsingGET(this ISiSenseSDK operations, string server, string databaseName = default(string))
            {
                return operations.GetSimpleUsingGETAsync(server, databaseName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get database simple
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='server'>
            /// server
            /// </param>
            /// <param name='databaseName'>
            /// databaseName
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CubeDTO> GetSimpleUsingGETAsync(this ISiSenseSDK operations, string server, string databaseName = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSimpleUsingGETWithHttpMessagesAsync(server, databaseName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// getLastBuildTimeofElasticube
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='server'>
            /// server
            /// </param>
            /// <param name='title'>
            /// title
            /// </param>
            public static string GetLastBuildTimeofElasticubeUsingGET(this ISiSenseSDK operations, string server, string title)
            {
                return operations.GetLastBuildTimeofElasticubeUsingGETAsync(server, title).GetAwaiter().GetResult();
            }

            /// <summary>
            /// getLastBuildTimeofElasticube
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='server'>
            /// server
            /// </param>
            /// <param name='title'>
            /// title
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> GetLastBuildTimeofElasticubeUsingGETAsync(this ISiSenseSDK operations, string server, string title, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetLastBuildTimeofElasticubeUsingGETWithHttpMessagesAsync(server, title, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Attach Cube
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// body
            /// </param>
            /// <param name='server'>
            /// server
            /// </param>
            public static AttachCubeResponse AttachUsingPOST(this ISiSenseSDK operations, AttachParamsDTO body, string server)
            {
                return operations.AttachUsingPOSTAsync(body, server).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Attach Cube
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// body
            /// </param>
            /// <param name='server'>
            /// server
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AttachCubeResponse> AttachUsingPOSTAsync(this ISiSenseSDK operations, AttachParamsDTO body, string server, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AttachUsingPOSTWithHttpMessagesAsync(body, server, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// info available Datasources
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// request
            /// </param>
            /// <param name='server'>
            /// server
            /// </param>
            public static InfoResponse AvailableDatasourcesInfoUsingPOST(this ISiSenseSDK operations, AvailableDatasourcesInfoRequest request, string server)
            {
                return operations.AvailableDatasourcesInfoUsingPOSTAsync(request, server).GetAwaiter().GetResult();
            }

            /// <summary>
            /// info available Datasources
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// request
            /// </param>
            /// <param name='server'>
            /// server
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<InfoResponse> AvailableDatasourcesInfoUsingPOSTAsync(this ISiSenseSDK operations, AvailableDatasourcesInfoRequest request, string server, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AvailableDatasourcesInfoUsingPOSTWithHttpMessagesAsync(request, server, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// info Cubes
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// request
            /// </param>
            /// <param name='server'>
            /// server
            /// </param>
            public static InfoResponse InfoUsingPOST(this ISiSenseSDK operations, InfoRequest request, string server)
            {
                return operations.InfoUsingPOSTAsync(request, server).GetAwaiter().GetResult();
            }

            /// <summary>
            /// info Cubes
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// request
            /// </param>
            /// <param name='server'>
            /// server
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<InfoResponse> InfoUsingPOSTAsync(this ISiSenseSDK operations, InfoRequest request, string server, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.InfoUsingPOSTWithHttpMessagesAsync(request, server, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete Cube by name
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cubeName'>
            /// cubeName
            /// </param>
            /// <param name='server'>
            /// server
            /// </param>
            public static string DeleteByDataSourceNameUsingDELETE(this ISiSenseSDK operations, string cubeName, string server)
            {
                return operations.DeleteByDataSourceNameUsingDELETEAsync(cubeName, server).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete Cube by name
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cubeName'>
            /// cubeName
            /// </param>
            /// <param name='server'>
            /// server
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> DeleteByDataSourceNameUsingDELETEAsync(this ISiSenseSDK operations, string cubeName, string server, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteByDataSourceNameUsingDELETEWithHttpMessagesAsync(cubeName, server, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Detach Cube
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// body
            /// </param>
            /// <param name='dataSourceId'>
            /// dataSourceId
            /// </param>
            /// <param name='server'>
            /// server
            /// </param>
            public static string DetachUsingPOST(this ISiSenseSDK operations, DetachParamsDTO body, string dataSourceId, string server)
            {
                return operations.DetachUsingPOSTAsync(body, dataSourceId, server).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Detach Cube
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// body
            /// </param>
            /// <param name='dataSourceId'>
            /// dataSourceId
            /// </param>
            /// <param name='server'>
            /// server
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> DetachUsingPOSTAsync(this ISiSenseSDK operations, DetachParamsDTO body, string dataSourceId, string server, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DetachUsingPOSTWithHttpMessagesAsync(body, dataSourceId, server, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Stop cube by dataSourceId name
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dataSourceId'>
            /// dataSourceId
            /// </param>
            /// <param name='server'>
            /// server
            /// </param>
            public static string StopDataSourceIdUsingPOST(this ISiSenseSDK operations, string dataSourceId, string server)
            {
                return operations.StopDataSourceIdUsingPOSTAsync(dataSourceId, server).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Stop cube by dataSourceId name
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dataSourceId'>
            /// dataSourceId
            /// </param>
            /// <param name='server'>
            /// server
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> StopDataSourceIdUsingPOSTAsync(this ISiSenseSDK operations, string dataSourceId, string server, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.StopDataSourceIdUsingPOSTWithHttpMessagesAsync(dataSourceId, server, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Detach Cube
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// body
            /// </param>
            /// <param name='instanceId'>
            /// instanceId
            /// </param>
            /// <param name='server'>
            /// server
            /// </param>
            public static string DetachInstanceIdUsingPOST(this ISiSenseSDK operations, DetachParamsDTO body, string instanceId, string server)
            {
                return operations.DetachInstanceIdUsingPOSTAsync(body, instanceId, server).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Detach Cube
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// body
            /// </param>
            /// <param name='instanceId'>
            /// instanceId
            /// </param>
            /// <param name='server'>
            /// server
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> DetachInstanceIdUsingPOSTAsync(this ISiSenseSDK operations, DetachParamsDTO body, string instanceId, string server, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DetachInstanceIdUsingPOSTWithHttpMessagesAsync(body, instanceId, server, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Start Cube
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='instanceId'>
            /// instanceId
            /// </param>
            /// <param name='server'>
            /// server
            /// </param>
            public static StartCubeResponse StartInstanceIdUsingPOST(this ISiSenseSDK operations, string instanceId, string server)
            {
                return operations.StartInstanceIdUsingPOSTAsync(instanceId, server).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Start Cube
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='instanceId'>
            /// instanceId
            /// </param>
            /// <param name='server'>
            /// server
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<StartCubeResponse> StartInstanceIdUsingPOSTAsync(this ISiSenseSDK operations, string instanceId, string server, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.StartInstanceIdUsingPOSTWithHttpMessagesAsync(instanceId, server, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Stop cube ny instance id
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='instanceId'>
            /// instanceId
            /// </param>
            /// <param name='server'>
            /// server
            /// </param>
            public static string StopInstanceIdUsingPOST(this ISiSenseSDK operations, string instanceId, string server)
            {
                return operations.StopInstanceIdUsingPOSTAsync(instanceId, server).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Stop cube ny instance id
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='instanceId'>
            /// instanceId
            /// </param>
            /// <param name='server'>
            /// server
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> StopInstanceIdUsingPOSTAsync(this ISiSenseSDK operations, string instanceId, string server, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.StopInstanceIdUsingPOSTWithHttpMessagesAsync(instanceId, server, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Restart cube by cube name
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='server'>
            /// server
            /// </param>
            /// <param name='title'>
            /// title
            /// </param>
            public static string RestartUsingPOST(this ISiSenseSDK operations, string server, string title)
            {
                return operations.RestartUsingPOSTAsync(server, title).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Restart cube by cube name
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='server'>
            /// server
            /// </param>
            /// <param name='title'>
            /// title
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> RestartUsingPOSTAsync(this ISiSenseSDK operations, string server, string title, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RestartUsingPOSTWithHttpMessagesAsync(server, title, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Start Cube
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='server'>
            /// server
            /// </param>
            /// <param name='title'>
            /// title
            /// </param>
            public static StartCubeResponse StartUsingPOST(this ISiSenseSDK operations, string server, string title)
            {
                return operations.StartUsingPOSTAsync(server, title).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Start Cube
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='server'>
            /// server
            /// </param>
            /// <param name='title'>
            /// title
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<StartCubeResponse> StartUsingPOSTAsync(this ISiSenseSDK operations, string server, string title, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.StartUsingPOSTWithHttpMessagesAsync(server, title, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Stop cube by cube name
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='server'>
            /// server
            /// </param>
            /// <param name='title'>
            /// title
            /// </param>
            public static string StopUsingPOST(this ISiSenseSDK operations, string server, string title)
            {
                return operations.StopUsingPOSTAsync(server, title).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Stop cube by cube name
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='server'>
            /// server
            /// </param>
            /// <param name='title'>
            /// title
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> StopUsingPOSTAsync(this ISiSenseSDK operations, string server, string title, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.StopUsingPOSTWithHttpMessagesAsync(server, title, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// execute query
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cubeName'>
            /// cubeName
            /// </param>
            /// <param name='jaql'>
            /// jaql
            /// </param>
            /// <param name='skipPermissions'>
            /// skipPermissions
            /// </param>
            public static object ExecuteQueryStreamUsingPOST(this ISiSenseSDK operations, string cubeName, string jaql, bool? skipPermissions = false)
            {
                return operations.ExecuteQueryStreamUsingPOSTAsync(cubeName, jaql, skipPermissions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// execute query
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cubeName'>
            /// cubeName
            /// </param>
            /// <param name='jaql'>
            /// jaql
            /// </param>
            /// <param name='skipPermissions'>
            /// skipPermissions
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ExecuteQueryStreamUsingPOSTAsync(this ISiSenseSDK operations, string cubeName, string jaql, bool? skipPermissions = false, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ExecuteQueryStreamUsingPOSTWithHttpMessagesAsync(cubeName, jaql, skipPermissions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Execute query
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cubeName'>
            /// cubeName
            /// </param>
            /// <param name='data'>
            /// data
            /// </param>
            /// <param name='errorReporting'>
            /// errorReporting
            /// </param>
            public static object ExecuteQueryStreamCsvUsingPOST(this ISiSenseSDK operations, string cubeName, string data, bool? errorReporting = false)
            {
                return operations.ExecuteQueryStreamCsvUsingPOSTAsync(cubeName, data, errorReporting).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Execute query
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cubeName'>
            /// cubeName
            /// </param>
            /// <param name='data'>
            /// data
            /// </param>
            /// <param name='errorReporting'>
            /// errorReporting
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ExecuteQueryStreamCsvUsingPOSTAsync(this ISiSenseSDK operations, string cubeName, string data, bool? errorReporting = false, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ExecuteQueryStreamCsvUsingPOSTWithHttpMessagesAsync(cubeName, data, errorReporting, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Explain query
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cubeName'>
            /// cubeName
            /// </param>
            /// <param name='jaql'>
            /// jaql
            /// </param>
            /// <param name='rowcount'>
            /// rowcount
            /// </param>
            /// <param name='skipPermissions'>
            /// skipPermissions
            /// </param>
            /// <param name='uniquecount'>
            /// uniquecount
            /// </param>
            public static string ExplainQueryStreamUsingPOST(this ISiSenseSDK operations, string cubeName, string jaql, bool? rowcount = true, bool? skipPermissions = false, bool? uniquecount = true)
            {
                return operations.ExplainQueryStreamUsingPOSTAsync(cubeName, jaql, rowcount, skipPermissions, uniquecount).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Explain query
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cubeName'>
            /// cubeName
            /// </param>
            /// <param name='jaql'>
            /// jaql
            /// </param>
            /// <param name='rowcount'>
            /// rowcount
            /// </param>
            /// <param name='skipPermissions'>
            /// skipPermissions
            /// </param>
            /// <param name='uniquecount'>
            /// uniquecount
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ExplainQueryStreamUsingPOSTAsync(this ISiSenseSDK operations, string cubeName, string jaql, bool? rowcount = true, bool? skipPermissions = false, bool? uniquecount = true, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ExplainQueryStreamUsingPOSTWithHttpMessagesAsync(cubeName, jaql, rowcount, skipPermissions, uniquecount, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// generateReadableQuery
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cubeName'>
            /// cubeName
            /// </param>
            /// <param name='jaql'>
            /// jaql
            /// </param>
            public static string GenerateReadableQueryUsingPOST(this ISiSenseSDK operations, string cubeName, string jaql)
            {
                return operations.GenerateReadableQueryUsingPOSTAsync(cubeName, jaql).GetAwaiter().GetResult();
            }

            /// <summary>
            /// generateReadableQuery
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cubeName'>
            /// cubeName
            /// </param>
            /// <param name='jaql'>
            /// jaql
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> GenerateReadableQueryUsingPOSTAsync(this ISiSenseSDK operations, string cubeName, string jaql, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GenerateReadableQueryUsingPOSTWithHttpMessagesAsync(cubeName, jaql, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Execute sql
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cubeName'>
            /// cubeName
            /// </param>
            /// <param name='query'>
            /// query
            /// </param>
            /// <param name='count'>
            /// count
            /// </param>
            /// <param name='format'>
            /// format
            /// </param>
            /// <param name='includeMetadata'>
            /// includeMetadata
            /// </param>
            /// <param name='isMaskedResponse'>
            /// isMaskedResponse
            /// </param>
            /// <param name='offset'>
            /// offset
            /// </param>
            public static object ExecuteSqlUsingGET(this ISiSenseSDK operations, string cubeName, string query, int? count = -1, string format = default(string), bool? includeMetadata = true, bool? isMaskedResponse = false, int? offset = 0)
            {
                return operations.ExecuteSqlUsingGETAsync(cubeName, query, count, format, includeMetadata, isMaskedResponse, offset).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Execute sql
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cubeName'>
            /// cubeName
            /// </param>
            /// <param name='query'>
            /// query
            /// </param>
            /// <param name='count'>
            /// count
            /// </param>
            /// <param name='format'>
            /// format
            /// </param>
            /// <param name='includeMetadata'>
            /// includeMetadata
            /// </param>
            /// <param name='isMaskedResponse'>
            /// isMaskedResponse
            /// </param>
            /// <param name='offset'>
            /// offset
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ExecuteSqlUsingGETAsync(this ISiSenseSDK operations, string cubeName, string query, int? count = -1, string format = default(string), bool? includeMetadata = true, bool? isMaskedResponse = false, int? offset = 0, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ExecuteSqlUsingGETWithHttpMessagesAsync(cubeName, query, count, format, includeMetadata, isMaskedResponse, offset, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Parse jaql
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fullName'>
            /// fullName
            /// </param>
            /// <param name='query'>
            /// query
            /// </param>
            public static string ParseJaqlUsingPOST(this ISiSenseSDK operations, string fullName, string query)
            {
                return operations.ParseJaqlUsingPOSTAsync(fullName, query).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Parse jaql
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fullName'>
            /// fullName
            /// </param>
            /// <param name='query'>
            /// query
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ParseJaqlUsingPOSTAsync(this ISiSenseSDK operations, string fullName, string query, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ParseJaqlUsingPOSTWithHttpMessagesAsync(fullName, query, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get fields
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='liveFullName'>
            /// liveFullName
            /// </param>
            /// <param name='query'>
            /// query
            /// </param>
            public static string GetFieldsByLiveFullNameUsingPOST(this ISiSenseSDK operations, string liveFullName, string query)
            {
                return operations.GetFieldsByLiveFullNameUsingPOSTAsync(liveFullName, query).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get fields
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='liveFullName'>
            /// liveFullName
            /// </param>
            /// <param name='query'>
            /// query
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> GetFieldsByLiveFullNameUsingPOSTAsync(this ISiSenseSDK operations, string liveFullName, string query, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetFieldsByLiveFullNameUsingPOSTWithHttpMessagesAsync(liveFullName, query, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Execute sql
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cubeName'>
            /// cubeName
            /// </param>
            /// <param name='server'>
            /// server
            /// </param>
            /// <param name='sql'>
            /// sql
            /// </param>
            /// <param name='count'>
            /// count
            /// </param>
            /// <param name='includeMetadata'>
            /// includeMetadata
            /// </param>
            /// <param name='isMaskedResponse'>
            /// isMaskedResponse
            /// </param>
            /// <param name='offset'>
            /// offset
            /// </param>
            /// <param name='sample'>
            /// sample
            /// </param>
            public static object ExecuteSqlUsingPOST(this ISiSenseSDK operations, string cubeName, string server, string sql, int? count = -1, bool? includeMetadata = true, bool? isMaskedResponse = false, int? offset = 0, long? sample = 0)
            {
                return operations.ExecuteSqlUsingPOSTAsync(cubeName, server, sql, count, includeMetadata, isMaskedResponse, offset, sample).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Execute sql
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cubeName'>
            /// cubeName
            /// </param>
            /// <param name='server'>
            /// server
            /// </param>
            /// <param name='sql'>
            /// sql
            /// </param>
            /// <param name='count'>
            /// count
            /// </param>
            /// <param name='includeMetadata'>
            /// includeMetadata
            /// </param>
            /// <param name='isMaskedResponse'>
            /// isMaskedResponse
            /// </param>
            /// <param name='offset'>
            /// offset
            /// </param>
            /// <param name='sample'>
            /// sample
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ExecuteSqlUsingPOSTAsync(this ISiSenseSDK operations, string cubeName, string server, string sql, int? count = -1, bool? includeMetadata = true, bool? isMaskedResponse = false, int? offset = 0, long? sample = 0, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ExecuteSqlUsingPOSTWithHttpMessagesAsync(cubeName, server, sql, count, includeMetadata, isMaskedResponse, offset, sample, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Cancel queries
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// body
            /// </param>
            /// <param name='cubeName'>
            /// cubeName
            /// </param>
            /// <param name='server'>
            /// server
            /// </param>
            public static void CancelQueriesUsingPOST(this ISiSenseSDK operations, string body, string cubeName, string server)
            {
                operations.CancelQueriesUsingPOSTAsync(body, cubeName, server).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Cancel queries
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// body
            /// </param>
            /// <param name='cubeName'>
            /// cubeName
            /// </param>
            /// <param name='server'>
            /// server
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task CancelQueriesUsingPOSTAsync(this ISiSenseSDK operations, string body, string cubeName, string server, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.CancelQueriesUsingPOSTWithHttpMessagesAsync(body, cubeName, server, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get fields
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='query'>
            /// query
            /// </param>
            /// <param name='server'>
            /// server
            /// </param>
            /// <param name='title'>
            /// title
            /// </param>
            public static string GetFieldsByFullNamePostUsingPOST(this ISiSenseSDK operations, string query, string server, string title)
            {
                return operations.GetFieldsByFullNamePostUsingPOSTAsync(query, server, title).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get fields
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='query'>
            /// query
            /// </param>
            /// <param name='server'>
            /// server
            /// </param>
            /// <param name='title'>
            /// title
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> GetFieldsByFullNamePostUsingPOSTAsync(this ISiSenseSDK operations, string query, string server, string title, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetFieldsByFullNamePostUsingPOSTWithHttpMessagesAsync(query, server, title, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Cancel all queries
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='title'>
            /// title
            /// </param>
            public static string GetDatasourceByFullNameUsingGET(this ISiSenseSDK operations, string title)
            {
                return operations.GetDatasourceByFullNameUsingGETAsync(title).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Cancel all queries
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='title'>
            /// title
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> GetDatasourceByFullNameUsingGETAsync(this ISiSenseSDK operations, string title, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDatasourceByFullNameUsingGETWithHttpMessagesAsync(title, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get fields
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='title'>
            /// title
            /// </param>
            /// <param name='q'>
            /// q
            /// </param>
            public static string GetFieldsByFullNameGetUsingGET(this ISiSenseSDK operations, string title, string q = "{}")
            {
                return operations.GetFieldsByFullNameGetUsingGETAsync(title, q).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get fields
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='title'>
            /// title
            /// </param>
            /// <param name='q'>
            /// q
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> GetFieldsByFullNameGetUsingGETAsync(this ISiSenseSDK operations, string title, string q = "{}", CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetFieldsByFullNameGetUsingGETWithHttpMessagesAsync(title, q, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns all authentication records for the given cube
            /// </summary>
            /// <remarks>
            /// Operations about elasticubes authorization
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='server'>
            /// Address of the server containing the cube
            /// </param>
            /// <param name='elasticube'>
            /// Title or Id of the elasticube
            /// </param>
            public static ElasticubeAuth ElasticubesAuthForCube(this ISiSenseSDK operations, string server, string elasticube)
            {
                return operations.ElasticubesAuthForCubeAsync(server, elasticube).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns all authentication records for the given cube
            /// </summary>
            /// <remarks>
            /// Operations about elasticubes authorization
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='server'>
            /// Address of the server containing the cube
            /// </param>
            /// <param name='elasticube'>
            /// Title or Id of the elasticube
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ElasticubeAuth> ElasticubesAuthForCubeAsync(this ISiSenseSDK operations, string server, string elasticube, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ElasticubesAuthForCubeWithHttpMessagesAsync(server, elasticube, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Defines a new permission for the given ElastiCube.
            /// </summary>
            /// <remarks>
            /// Operations about elasticubes authorization
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='server'>
            /// The server address of the ElastiCube.
            /// </param>
            /// <param name='elasticube'>
            /// The name or ID of the ElastiCube
            /// </param>
            /// <param name='shares'>
            /// The 'shares' is an array containing the different permissions. Each
            /// permission is an ACL (access control level).
            /// </param>
            public static bool? AddElasticubePermissions(this ISiSenseSDK operations, string server, string elasticube, IList<Acl> shares = default(IList<Acl>))
            {
                return operations.AddElasticubePermissionsAsync(server, elasticube, shares).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Defines a new permission for the given ElastiCube.
            /// </summary>
            /// <remarks>
            /// Operations about elasticubes authorization
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='server'>
            /// The server address of the ElastiCube.
            /// </param>
            /// <param name='elasticube'>
            /// The name or ID of the ElastiCube
            /// </param>
            /// <param name='shares'>
            /// The 'shares' is an array containing the different permissions. Each
            /// permission is an ACL (access control level).
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<bool?> AddElasticubePermissionsAsync(this ISiSenseSDK operations, string server, string elasticube, IList<Acl> shares = default(IList<Acl>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddElasticubePermissionsWithHttpMessagesAsync(server, elasticube, shares, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the permissions (ACLs) for the current ElastiCube.
            /// </summary>
            /// <remarks>
            /// Operations about elasticubes authorization
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='server'>
            /// The server address of the ElastiCube.
            /// </param>
            /// <param name='elasticube'>
            /// The name or ID of the ElastiCube
            /// </param>
            /// <param name='shares'>
            /// The 'shares' is an array containing the different permissions. Each
            /// permission is an ACL (access control level).
            /// </param>
            public static bool? UpdateElasticubePermissions(this ISiSenseSDK operations, string server, string elasticube, IList<Acl> shares = default(IList<Acl>))
            {
                return operations.UpdateElasticubePermissionsAsync(server, elasticube, shares).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the permissions (ACLs) for the current ElastiCube.
            /// </summary>
            /// <remarks>
            /// Operations about elasticubes authorization
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='server'>
            /// The server address of the ElastiCube.
            /// </param>
            /// <param name='elasticube'>
            /// The name or ID of the ElastiCube
            /// </param>
            /// <param name='shares'>
            /// The 'shares' is an array containing the different permissions. Each
            /// permission is an ACL (access control level).
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<bool?> UpdateElasticubePermissionsAsync(this ISiSenseSDK operations, string server, string elasticube, IList<Acl> shares = default(IList<Acl>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateElasticubePermissionsWithHttpMessagesAsync(server, elasticube, shares, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes all permissions for the ElastiCube.
            /// </summary>
            /// <remarks>
            /// Operations about elasticubes authorization
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='server'>
            /// The server address of the ElastiCube.
            /// </param>
            /// <param name='elasticube'>
            /// The name or ID of the ElastiCube.
            /// </param>
            public static bool? DeleteElasticubePermissions(this ISiSenseSDK operations, string server, string elasticube)
            {
                return operations.DeleteElasticubePermissionsAsync(server, elasticube).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes all permissions for the ElastiCube.
            /// </summary>
            /// <remarks>
            /// Operations about elasticubes authorization
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='server'>
            /// The server address of the ElastiCube.
            /// </param>
            /// <param name='elasticube'>
            /// The name or ID of the ElastiCube.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<bool?> DeleteElasticubePermissionsAsync(this ISiSenseSDK operations, string server, string elasticube, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteElasticubePermissionsWithHttpMessagesAsync(server, elasticube, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Defines permissions for an ElastiCube server.
            /// </summary>
            /// <remarks>
            /// Operations about elasticubes authorization
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='server'>
            /// The server address of the ElastiCube.
            /// </param>
            /// <param name='shares'>
            /// The 'shares' is an array containing the different permissions. Each
            /// permission is an ACL (access control level).
            /// </param>
            public static bool? UpdateServerDefaultPermissions(this ISiSenseSDK operations, string server, IList<Acl> shares = default(IList<Acl>))
            {
                return operations.UpdateServerDefaultPermissionsAsync(server, shares).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Defines permissions for an ElastiCube server.
            /// </summary>
            /// <remarks>
            /// Operations about elasticubes authorization
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='server'>
            /// The server address of the ElastiCube.
            /// </param>
            /// <param name='shares'>
            /// The 'shares' is an array containing the different permissions. Each
            /// permission is an ACL (access control level).
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<bool?> UpdateServerDefaultPermissionsAsync(this ISiSenseSDK operations, string server, IList<Acl> shares = default(IList<Acl>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateServerDefaultPermissionsWithHttpMessagesAsync(server, shares, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Return data security rules for an elasticube
            /// </summary>
            /// <remarks>
            /// Return data security rules for an elasticube
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='server'>
            /// The ElastiCube's server address.
            /// </param>
            /// <param name='elasticube'>
            /// The name of the ElastiCube.
            /// </param>
            public static void GetElasticubeDataSecurity(this ISiSenseSDK operations, string server, string elasticube)
            {
                operations.GetElasticubeDataSecurityAsync(server, elasticube).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Return data security rules for an elasticube
            /// </summary>
            /// <remarks>
            /// Return data security rules for an elasticube
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='server'>
            /// The ElastiCube's server address.
            /// </param>
            /// <param name='elasticube'>
            /// The name of the ElastiCube.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetElasticubeDataSecurityAsync(this ISiSenseSDK operations, string server, string elasticube, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GetElasticubeDataSecurityWithHttpMessagesAsync(server, elasticube, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Add new data context for datasource
            /// </summary>
            /// <remarks>
            /// Defines data security rules for a column on a specific server and
            /// elasticube
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='server'>
            /// The server address of the ElastiCube. Use 'Set' for Elasticube Set.
            /// </param>
            /// <param name='elasticube'>
            /// The name of the ElastiCube.
            /// </param>
            /// <param name='arrayofDataSecurityobjectsdescription'>
            /// The array of data security rules that should be added.
            /// If exact same &lt;b&gt;shares&lt;/b&gt; array exits for table and column,
            /// then rule will be overwritten
            ///
            /// &lt;br /&gt;&lt;b&gt;exclusionary&lt;/b&gt; - This boolean determines if a
            /// data security rule is exclusionary or inclusionary. By default, this value
            /// is &lt;b&gt;false&lt;/b&gt;, which means all rules are inclusionary.When a
            /// rule is inclusionary, all defined members can see the relevant rows. When a
            /// rule is exclusionary, the relevant rows are hidden from all defined
            /// members.
            /// </param>
            public static void AddElasticubeDataSecurityForDatasource(this ISiSenseSDK operations, string server, string elasticube, IList<ElasticubeNewDataSecurityItemCubeGiven> arrayofDataSecurityobjectsdescription = default(IList<ElasticubeNewDataSecurityItemCubeGiven>))
            {
                operations.AddElasticubeDataSecurityForDatasourceAsync(server, elasticube, arrayofDataSecurityobjectsdescription).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add new data context for datasource
            /// </summary>
            /// <remarks>
            /// Defines data security rules for a column on a specific server and
            /// elasticube
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='server'>
            /// The server address of the ElastiCube. Use 'Set' for Elasticube Set.
            /// </param>
            /// <param name='elasticube'>
            /// The name of the ElastiCube.
            /// </param>
            /// <param name='arrayofDataSecurityobjectsdescription'>
            /// The array of data security rules that should be added.
            /// If exact same &lt;b&gt;shares&lt;/b&gt; array exits for table and column,
            /// then rule will be overwritten
            ///
            /// &lt;br /&gt;&lt;b&gt;exclusionary&lt;/b&gt; - This boolean determines if a
            /// data security rule is exclusionary or inclusionary. By default, this value
            /// is &lt;b&gt;false&lt;/b&gt;, which means all rules are inclusionary.When a
            /// rule is inclusionary, all defined members can see the relevant rows. When a
            /// rule is exclusionary, the relevant rows are hidden from all defined
            /// members.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task AddElasticubeDataSecurityForDatasourceAsync(this ISiSenseSDK operations, string server, string elasticube, IList<ElasticubeNewDataSecurityItemCubeGiven> arrayofDataSecurityobjectsdescription = default(IList<ElasticubeNewDataSecurityItemCubeGiven>), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.AddElasticubeDataSecurityForDatasourceWithHttpMessagesAsync(server, elasticube, arrayofDataSecurityobjectsdescription, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Delete data security rule for a column
            /// </summary>
            /// <remarks>
            /// Delete data security rule for a column
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='server'>
            /// server address
            /// </param>
            /// <param name='elasticube'>
            /// elasticube name
            /// </param>
            /// <param name='table'>
            /// table name
            /// </param>
            /// <param name='column'>
            /// column name
            /// </param>
            public static void DeleteDataContextForColumnQuery(this ISiSenseSDK operations, string server, string elasticube, string table, string column)
            {
                operations.DeleteDataContextForColumnQueryAsync(server, elasticube, table, column).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete data security rule for a column
            /// </summary>
            /// <remarks>
            /// Delete data security rule for a column
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='server'>
            /// server address
            /// </param>
            /// <param name='elasticube'>
            /// elasticube name
            /// </param>
            /// <param name='table'>
            /// table name
            /// </param>
            /// <param name='column'>
            /// column name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteDataContextForColumnQueryAsync(this ISiSenseSDK operations, string server, string elasticube, string table, string column, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteDataContextForColumnQueryWithHttpMessagesAsync(server, elasticube, table, column, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Return data security rules for a user
            /// </summary>
            /// <remarks>
            /// Return data security rules for a user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='server'>
            /// The ElastiCube's server address
            /// </param>
            /// <param name='cube'>
            /// The ElastiCube's name
            /// </param>
            /// <param name='user'>
            /// The user's ID or username.
            /// </param>
            public static void GetElasticubeDataSecurityForUser(this ISiSenseSDK operations, string server, string cube, string user)
            {
                operations.GetElasticubeDataSecurityForUserAsync(server, cube, user).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Return data security rules for a user
            /// </summary>
            /// <remarks>
            /// Return data security rules for a user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='server'>
            /// The ElastiCube's server address
            /// </param>
            /// <param name='cube'>
            /// The ElastiCube's name
            /// </param>
            /// <param name='user'>
            /// The user's ID or username.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetElasticubeDataSecurityForUserAsync(this ISiSenseSDK operations, string server, string cube, string user, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GetElasticubeDataSecurityForUserWithHttpMessagesAsync(server, cube, user, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Return data security rules for column.
            /// </summary>
            /// <remarks>
            /// Returns ElastiCube data security rules for a column in a table in the
            /// ElastiCube
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='server'>
            /// The ElastiCube's server address.
            /// </param>
            /// <param name='elasticube'>
            /// The name of the ElastiCube
            /// </param>
            /// <param name='table'>
            /// The name of the table in the ElastiCube
            /// </param>
            /// <param name='column'>
            /// The name of the column in the table
            /// </param>
            public static void GetElasticubeDataSecurityForColumn(this ISiSenseSDK operations, string server, string elasticube, string table, string column)
            {
                operations.GetElasticubeDataSecurityForColumnAsync(server, elasticube, table, column).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Return data security rules for column.
            /// </summary>
            /// <remarks>
            /// Returns ElastiCube data security rules for a column in a table in the
            /// ElastiCube
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='server'>
            /// The ElastiCube's server address.
            /// </param>
            /// <param name='elasticube'>
            /// The name of the ElastiCube
            /// </param>
            /// <param name='table'>
            /// The name of the table in the ElastiCube
            /// </param>
            /// <param name='column'>
            /// The name of the column in the table
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetElasticubeDataSecurityForColumnAsync(this ISiSenseSDK operations, string server, string elasticube, string table, string column, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GetElasticubeDataSecurityForColumnWithHttpMessagesAsync(server, elasticube, table, column, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Add new data context
            /// </summary>
            /// <remarks>
            /// Defines data security rules for a column.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='arrayofDataSecurityobjectsdescription'>
            /// The array of data security rules that should be added.
            /// If exact same shares array exits for table and column, then rule will be
            /// overwritten
            /// &lt;b&gt;server and elasticube&lt;/b&gt; are required
            ///
            /// &lt;br /&gt;&lt;b&gt;exclusionary&lt;/b&gt; - This boolean determines if a
            /// data security rule is exclusionary or inclusionary. By default, this value
            /// is &lt;b&gt;false&lt;/b&gt;, which means all rules are inclusionary.When a
            /// rule is inclusionary, all defined members can see the relevant rows. When a
            /// rule is exclusionary, the relevant rows are hidden from all defined
            /// members.
            /// </param>
            public static void AddElasticubeDataSecurity(this ISiSenseSDK operations, IList<ElasticubeNewDataSecurityItem> arrayofDataSecurityobjectsdescription = default(IList<ElasticubeNewDataSecurityItem>))
            {
                operations.AddElasticubeDataSecurityAsync(arrayofDataSecurityobjectsdescription).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add new data context
            /// </summary>
            /// <remarks>
            /// Defines data security rules for a column.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='arrayofDataSecurityobjectsdescription'>
            /// The array of data security rules that should be added.
            /// If exact same shares array exits for table and column, then rule will be
            /// overwritten
            /// &lt;b&gt;server and elasticube&lt;/b&gt; are required
            ///
            /// &lt;br /&gt;&lt;b&gt;exclusionary&lt;/b&gt; - This boolean determines if a
            /// data security rule is exclusionary or inclusionary. By default, this value
            /// is &lt;b&gt;false&lt;/b&gt;, which means all rules are inclusionary.When a
            /// rule is inclusionary, all defined members can see the relevant rows. When a
            /// rule is exclusionary, the relevant rows are hidden from all defined
            /// members.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task AddElasticubeDataSecurityAsync(this ISiSenseSDK operations, IList<ElasticubeNewDataSecurityItem> arrayofDataSecurityobjectsdescription = default(IList<ElasticubeNewDataSecurityItem>), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.AddElasticubeDataSecurityWithHttpMessagesAsync(arrayofDataSecurityobjectsdescription, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Update a data security rule by id
            /// </summary>
            /// <remarks>
            /// Update a data security rule by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// data security _id
            /// </param>
            /// <param name='dataSecurityobjectdescription'>
            /// The data security object that needs to be updated by the elasticube
            /// identifier
            /// &lt;b&gt;server&lt;/b&gt; and &lt;b&gt;elasticube&lt;/b&gt; are required
            ///
            /// &lt;br /&gt;&lt;b&gt;exclusionary&lt;/b&gt; - This boolean determines if a
            /// data security rule is exclusionary or inclusionary. By default, this value
            /// is &lt;b&gt;false&lt;/b&gt;, which means all rules are inclusionary.When a
            /// rule is inclusionary, all defined members can see the relevant rows. When a
            /// rule is exclusionary, the relevant rows are hidden from all defined
            /// members.
            /// </param>
            public static void UpdateElasticubeDataSecurity(this ISiSenseSDK operations, string id, ElasticubeUpdateDataSecurity dataSecurityobjectdescription = default(ElasticubeUpdateDataSecurity))
            {
                operations.UpdateElasticubeDataSecurityAsync(id, dataSecurityobjectdescription).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update a data security rule by id
            /// </summary>
            /// <remarks>
            /// Update a data security rule by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// data security _id
            /// </param>
            /// <param name='dataSecurityobjectdescription'>
            /// The data security object that needs to be updated by the elasticube
            /// identifier
            /// &lt;b&gt;server&lt;/b&gt; and &lt;b&gt;elasticube&lt;/b&gt; are required
            ///
            /// &lt;br /&gt;&lt;b&gt;exclusionary&lt;/b&gt; - This boolean determines if a
            /// data security rule is exclusionary or inclusionary. By default, this value
            /// is &lt;b&gt;false&lt;/b&gt;, which means all rules are inclusionary.When a
            /// rule is inclusionary, all defined members can see the relevant rows. When a
            /// rule is exclusionary, the relevant rows are hidden from all defined
            /// members.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdateElasticubeDataSecurityAsync(this ISiSenseSDK operations, string id, ElasticubeUpdateDataSecurity dataSecurityobjectdescription = default(ElasticubeUpdateDataSecurity), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UpdateElasticubeDataSecurityWithHttpMessagesAsync(id, dataSecurityobjectdescription, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// get share dashboard
            /// </summary>
            /// <remarks>
            /// Operations about sharing dashboard
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// dashboard's oid
            /// </param>
            public static Share GetDashboardShare(this ISiSenseSDK operations, string id)
            {
                return operations.GetDashboardShareAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// get share dashboard
            /// </summary>
            /// <remarks>
            /// Operations about sharing dashboard
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// dashboard's oid
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Share> GetDashboardShareAsync(this ISiSenseSDK operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDashboardShareWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// share dashboard
            /// </summary>
            /// <remarks>
            /// Operations about sharing dashboard
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// dashboard's oid
            /// </param>
            /// <param name='share'>
            /// share object that will define the share
            /// </param>
            public static void ShareDashboard(this ISiSenseSDK operations, string id, Share share = default(Share))
            {
                operations.ShareDashboardAsync(id, share).GetAwaiter().GetResult();
            }

            /// <summary>
            /// share dashboard
            /// </summary>
            /// <remarks>
            /// Operations about sharing dashboard
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// dashboard's oid
            /// </param>
            /// <param name='share'>
            /// share object that will define the share
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ShareDashboardAsync(this ISiSenseSDK operations, string id, Share share = default(Share), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ShareDashboardWithHttpMessagesAsync(id, share, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// get user dashboard subscription
            /// </summary>
            /// <remarks>
            /// Operations about dashboard user subscription
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// dashboard's oid
            /// </param>
            /// <param name='adminAccess'>
            /// Admin access mode
            /// </param>
            public static SharesSubscription GetUserDashboardSubscription(this ISiSenseSDK operations, string id, bool? adminAccess = default(bool?))
            {
                return operations.GetUserDashboardSubscriptionAsync(id, adminAccess).GetAwaiter().GetResult();
            }

            /// <summary>
            /// get user dashboard subscription
            /// </summary>
            /// <remarks>
            /// Operations about dashboard user subscription
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// dashboard's oid
            /// </param>
            /// <param name='adminAccess'>
            /// Admin access mode
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SharesSubscription> GetUserDashboardSubscriptionAsync(this ISiSenseSDK operations, string id, bool? adminAccess = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUserDashboardSubscriptionWithHttpMessagesAsync(id, adminAccess, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// update user dashboard subscription
            /// </summary>
            /// <remarks>
            /// Operations about dashboard user subscription
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// dashboard's oid
            /// </param>
            /// <param name='sharesSubscription'>
            /// subscription object
            /// </param>
            /// <param name='adminAccess'>
            /// Admin access mode
            /// </param>
            public static void UpdateUserDashboardSubscription(this ISiSenseSDK operations, string id, SharesSubscription sharesSubscription = default(SharesSubscription), bool? adminAccess = default(bool?))
            {
                operations.UpdateUserDashboardSubscriptionAsync(id, sharesSubscription, adminAccess).GetAwaiter().GetResult();
            }

            /// <summary>
            /// update user dashboard subscription
            /// </summary>
            /// <remarks>
            /// Operations about dashboard user subscription
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// dashboard's oid
            /// </param>
            /// <param name='sharesSubscription'>
            /// subscription object
            /// </param>
            /// <param name='adminAccess'>
            /// Admin access mode
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdateUserDashboardSubscriptionAsync(this ISiSenseSDK operations, string id, SharesSubscription sharesSubscription = default(SharesSubscription), bool? adminAccess = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UpdateUserDashboardSubscriptionWithHttpMessagesAsync(id, sharesSubscription, adminAccess, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Returns geographical coordinates for the given locations
            /// </summary>
            /// <remarks>
            /// Performs geo-coding of the given locations and returns their geographical
            /// coordinates
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='geoParams'>
            /// Geo request parameters object, containing an array of locations and
            /// geoLevel:{'locations': [{ 'name': 'Cupertino', 'country': 'United States',
            /// 'state': 'California' }], 'geoLevel': 'city'} or {'locations': [{ 'name':
            /// 'United States, CA, Cupertino' }], 'geoLevel': 'city'}
            /// </param>
            public static IList<GeoLocation> GetGeo(this ISiSenseSDK operations, GeoParams geoParams = default(GeoParams))
            {
                return operations.GetGeoAsync(geoParams).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns geographical coordinates for the given locations
            /// </summary>
            /// <remarks>
            /// Performs geo-coding of the given locations and returns their geographical
            /// coordinates
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='geoParams'>
            /// Geo request parameters object, containing an array of locations and
            /// geoLevel:{'locations': [{ 'name': 'Cupertino', 'country': 'United States',
            /// 'state': 'California' }], 'geoLevel': 'city'} or {'locations': [{ 'name':
            /// 'United States, CA, Cupertino' }], 'geoLevel': 'city'}
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<GeoLocation>> GetGeoAsync(this ISiSenseSDK operations, GeoParams geoParams = default(GeoParams), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetGeoWithHttpMessagesAsync(geoParams, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// get geoJson by type
            /// </summary>
            /// <remarks>
            /// Operations about geo
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='type'>
            /// type of geo json (ie: world, usa)
            /// </param>
            public static void GeoJson(this ISiSenseSDK operations, string type)
            {
                operations.GeoJsonAsync(type).GetAwaiter().GetResult();
            }

            /// <summary>
            /// get geoJson by type
            /// </summary>
            /// <remarks>
            /// Operations about geo
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='type'>
            /// type of geo json (ie: world, usa)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GeoJsonAsync(this ISiSenseSDK operations, string type, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GeoJsonWithHttpMessagesAsync(type, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Returns a list of available palettes in the Sisense web app.
            /// </summary>
            /// <remarks>
            /// Gets all existing palettes
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<Palette> GetAllPalettes(this ISiSenseSDK operations)
            {
                return operations.GetAllPalettesAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of available palettes in the Sisense web app.
            /// </summary>
            /// <remarks>
            /// Gets all existing palettes
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Palette>> GetAllPalettesAsync(this ISiSenseSDK operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllPalettesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds a new color palette.
            /// </summary>
            /// <remarks>
            /// Adds a new color palette
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='palette'>
            /// New palette to add
            /// </param>
            public static void AddPalette(this ISiSenseSDK operations, Palette palette = default(Palette))
            {
                operations.AddPaletteAsync(palette).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds a new color palette.
            /// </summary>
            /// <remarks>
            /// Adds a new color palette
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='palette'>
            /// New palette to add
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task AddPaletteAsync(this ISiSenseSDK operations, Palette palette = default(Palette), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.AddPaletteWithHttpMessagesAsync(palette, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Returns the default color palette.
            /// </summary>
            /// <remarks>
            /// Gets the default palette
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static Palette GetDefaultPalette(this ISiSenseSDK operations)
            {
                return operations.GetDefaultPaletteAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the default color palette.
            /// </summary>
            /// <remarks>
            /// Gets the default palette
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Palette> GetDefaultPaletteAsync(this ISiSenseSDK operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDefaultPaletteWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the dashboard's color palette.
            /// </summary>
            /// <remarks>
            /// Update an existing color palette
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// Palette's name
            /// </param>
            /// <param name='palette'>
            /// The updated palette settings to add
            /// </param>
            public static void UpdatePalette(this ISiSenseSDK operations, string name, Palette palette = default(Palette))
            {
                operations.UpdatePaletteAsync(name, palette).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the dashboard's color palette.
            /// </summary>
            /// <remarks>
            /// Update an existing color palette
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// Palette's name
            /// </param>
            /// <param name='palette'>
            /// The updated palette settings to add
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdatePaletteAsync(this ISiSenseSDK operations, string name, Palette palette = default(Palette), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UpdatePaletteWithHttpMessagesAsync(name, palette, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Deletes a color palette from the color palettes.
            /// </summary>
            /// <remarks>
            /// Removes an existing color palette
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// Palette's name
            /// </param>
            public static void RemovePalette(this ISiSenseSDK operations, string name)
            {
                operations.RemovePaletteAsync(name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a color palette from the color palettes.
            /// </summary>
            /// <remarks>
            /// Removes an existing color palette
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// Palette's name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RemovePaletteAsync(this ISiSenseSDK operations, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.RemovePaletteWithHttpMessagesAsync(name, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Returns users that are logged in.
            /// </summary>
            /// <remarks>
            /// Operations about auth
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IsAuthenticatedOKResponse IsAuthenticated(this ISiSenseSDK operations)
            {
                return operations.IsAuthenticatedAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns users that are logged in.
            /// </summary>
            /// <remarks>
            /// Operations about auth
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IsAuthenticatedOKResponse> IsAuthenticatedAsync(this ISiSenseSDK operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.IsAuthenticatedWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Forces the user to be logged out
            /// </summary>
            /// <remarks>
            /// Operations about auth.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void Logout(this ISiSenseSDK operations)
            {
                operations.LogoutAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Forces the user to be logged out
            /// </summary>
            /// <remarks>
            /// Operations about auth.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task LogoutAsync(this ISiSenseSDK operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.LogoutWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Returns all users and related metadata.
            /// </summary>
            /// <remarks>
            /// Operations about users
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='limit'>
            /// Limits the result set to a defined number of results.
            /// </param>
            /// <param name='skip'>
            /// Defines how many items to skip before returning the results.
            /// </param>
            /// <param name='search'>
            /// Enter a search query to return results matching the query.
            /// </param>
            /// <param name='groups'>
            /// Enter a users groups IDs comma delimiter to return results matching the
            /// query.
            /// </param>
            /// <param name='orderby'>
            /// Orders the results by field name. You can add multiple sort fields
            /// separated by a comma delimiter ','
            /// </param>
            /// <param name='desc'>
            /// Defines the order of the results. True returns results in a descending
            /// order.
            /// </param>
            /// <param name='onlyAD'>
            /// Searches only Active Directory users.
            /// </param>
            /// <param name='groupsNames'>
            /// Includes the user's groups if the user belongs to one or more groups.
            /// </param>
            /// <param name='includeDomain'>
            /// Returns the domain details of each AD user.
            /// </param>
            public static IList<GetAllOKResponseItem> GetAll(this ISiSenseSDK operations, int? limit = default(int?), int? skip = default(int?), string search = default(string), string groups = default(string), string orderby = default(string), bool? desc = default(bool?), bool? onlyAD = default(bool?), bool? groupsNames = default(bool?), bool? includeDomain = default(bool?))
            {
                return operations.GetAllAsync(limit, skip, search, groups, orderby, desc, onlyAD, groupsNames, includeDomain).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns all users and related metadata.
            /// </summary>
            /// <remarks>
            /// Operations about users
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='limit'>
            /// Limits the result set to a defined number of results.
            /// </param>
            /// <param name='skip'>
            /// Defines how many items to skip before returning the results.
            /// </param>
            /// <param name='search'>
            /// Enter a search query to return results matching the query.
            /// </param>
            /// <param name='groups'>
            /// Enter a users groups IDs comma delimiter to return results matching the
            /// query.
            /// </param>
            /// <param name='orderby'>
            /// Orders the results by field name. You can add multiple sort fields
            /// separated by a comma delimiter ','
            /// </param>
            /// <param name='desc'>
            /// Defines the order of the results. True returns results in a descending
            /// order.
            /// </param>
            /// <param name='onlyAD'>
            /// Searches only Active Directory users.
            /// </param>
            /// <param name='groupsNames'>
            /// Includes the user's groups if the user belongs to one or more groups.
            /// </param>
            /// <param name='includeDomain'>
            /// Returns the domain details of each AD user.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<GetAllOKResponseItem>> GetAllAsync(this ISiSenseSDK operations, int? limit = default(int?), int? skip = default(int?), string search = default(string), string groups = default(string), string orderby = default(string), bool? desc = default(bool?), bool? onlyAD = default(bool?), bool? groupsNames = default(bool?), bool? includeDomain = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllWithHttpMessagesAsync(limit, skip, search, groups, orderby, desc, onlyAD, groupsNames, includeDomain, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds a new user.
            /// </summary>
            /// <remarks>
            /// Operations about users
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='newUser'>
            /// The user object includes all the user information.
            /// </param>
            /// <param name='notify'>
            /// Send notifications to the user.
            /// </param>
            public static AddUserOKResponse AddUser(this ISiSenseSDK operations, IList<User> newUser = default(IList<User>), string notify = default(string))
            {
                return operations.AddUserAsync(newUser, notify).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds a new user.
            /// </summary>
            /// <remarks>
            /// Operations about users
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='newUser'>
            /// The user object includes all the user information.
            /// </param>
            /// <param name='notify'>
            /// Send notifications to the user.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AddUserOKResponse> AddUserAsync(this ISiSenseSDK operations, IList<User> newUser = default(IList<User>), string notify = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddUserWithHttpMessagesAsync(newUser, notify, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Searches for users in Active Directory.
            /// </summary>
            /// <remarks>
            /// Operations about users
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='limit'>
            /// Limits the result set to a defined number of results. - 0 or blank to not
            /// limit
            /// </param>
            /// <param name='checkExist'>
            /// Checks if the user exists in the database.
            /// </param>
            /// <param name='search'>
            /// Enter a search query to return results matching the query.
            /// </param>
            /// <param name='domain'>
            /// Enter a domain name or id.
            /// </param>
            public static IList<GetAdUsersOKResponseItem> GetAdUsers(this ISiSenseSDK operations, int? limit = default(int?), bool? checkExist = default(bool?), string search = default(string), string domain = default(string))
            {
                return operations.GetAdUsersAsync(limit, checkExist, search, domain).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Searches for users in Active Directory.
            /// </summary>
            /// <remarks>
            /// Operations about users
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='limit'>
            /// Limits the result set to a defined number of results. - 0 or blank to not
            /// limit
            /// </param>
            /// <param name='checkExist'>
            /// Checks if the user exists in the database.
            /// </param>
            /// <param name='search'>
            /// Enter a search query to return results matching the query.
            /// </param>
            /// <param name='domain'>
            /// Enter a domain name or id.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<GetAdUsersOKResponseItem>> GetAdUsersAsync(this ISiSenseSDK operations, int? limit = default(int?), bool? checkExist = default(bool?), string search = default(string), string domain = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAdUsersWithHttpMessagesAsync(limit, checkExist, search, domain, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Imports a user from Active Directory as a new user in Sisense.
            /// </summary>
            /// <remarks>
            /// Operations about users
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='user'>
            /// The **add Active Directory user** endpoint receives an Active Directory
            /// user object, retrieves the user's details from Active Directory and adds it
            /// to the application.
            /// </param>
            public static AddAdUserOKResponse AddAdUser(this ISiSenseSDK operations, IList<ADuserSearchResponse> user = default(IList<ADuserSearchResponse>))
            {
                return operations.AddAdUserAsync(user).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Imports a user from Active Directory as a new user in Sisense.
            /// </summary>
            /// <remarks>
            /// Operations about users
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='user'>
            /// The **add Active Directory user** endpoint receives an Active Directory
            /// user object, retrieves the user's details from Active Directory and adds it
            /// to the application.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AddAdUserOKResponse> AddAdUserAsync(this ISiSenseSDK operations, IList<ADuserSearchResponse> user = default(IList<ADuserSearchResponse>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddAdUserWithHttpMessagesAsync(user, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Searches for users in all user directories.
            /// </summary>
            /// <remarks>
            /// Operations about users
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='limit'>
            /// Limits the result set to a defined number of results. - 0 or blank to not
            /// limit
            /// </param>
            /// <param name='search'>
            /// contains
            /// </param>
            /// <param name='groups'>
            /// Enter a users groups IDs comma delimiter to return results matching the
            /// query.
            /// </param>
            /// <param name='includeDomain'>
            /// Returns the domain details of each AD user.
            /// </param>
            public static IList<GetAllDirectoriesUsersOKResponseItem> GetAllDirectoriesUsers(this ISiSenseSDK operations, int? limit = default(int?), string search = default(string), string groups = default(string), bool? includeDomain = default(bool?))
            {
                return operations.GetAllDirectoriesUsersAsync(limit, search, groups, includeDomain).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Searches for users in all user directories.
            /// </summary>
            /// <remarks>
            /// Operations about users
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='limit'>
            /// Limits the result set to a defined number of results. - 0 or blank to not
            /// limit
            /// </param>
            /// <param name='search'>
            /// contains
            /// </param>
            /// <param name='groups'>
            /// Enter a users groups IDs comma delimiter to return results matching the
            /// query.
            /// </param>
            /// <param name='includeDomain'>
            /// Returns the domain details of each AD user.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<GetAllDirectoriesUsersOKResponseItem>> GetAllDirectoriesUsersAsync(this ISiSenseSDK operations, int? limit = default(int?), string search = default(string), string groups = default(string), bool? includeDomain = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllDirectoriesUsersWithHttpMessagesAsync(limit, search, groups, includeDomain, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Counts users using a defined query string.
            /// </summary>
            /// <remarks>
            /// Operations about users
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='search'>
            /// Searches for users with usernames that include the query string.
            /// </param>
            public static CountOKResponse Count(this ISiSenseSDK operations, string search = default(string))
            {
                return operations.CountAsync(search).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Counts users using a defined query string.
            /// </summary>
            /// <remarks>
            /// Operations about users
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='search'>
            /// Searches for users with usernames that include the query string.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CountOKResponse> CountAsync(this ISiSenseSDK operations, string search = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CountWithHttpMessagesAsync(search, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves my user details.
            /// </summary>
            /// <remarks>
            /// Operations about users
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static GetLoggedInUserOKResponse GetLoggedInUser(this ISiSenseSDK operations)
            {
                return operations.GetLoggedInUserAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves my user details.
            /// </summary>
            /// <remarks>
            /// Operations about users
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GetLoggedInUserOKResponse> GetLoggedInUserAsync(this ISiSenseSDK operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetLoggedInUserWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns metadata for a user by username or user ID.
            /// </summary>
            /// <remarks>
            /// Operations about users
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='user'>
            /// The user's ID or username
            /// </param>
            public static FindByIdUsernameOKResponse FindByIdUsername(this ISiSenseSDK operations, string user)
            {
                return operations.FindByIdUsernameAsync(user).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns metadata for a user by username or user ID.
            /// </summary>
            /// <remarks>
            /// Operations about users
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='user'>
            /// The user's ID or username
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<FindByIdUsernameOKResponse> FindByIdUsernameAsync(this ISiSenseSDK operations, string user, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.FindByIdUsernameWithHttpMessagesAsync(user, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates one or more user details, by user ID or username.
            /// </summary>
            /// <remarks>
            /// Operations about users
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='user'>
            /// The user's ID or username.
            /// </param>
            /// <param name='userUpdate'>
            /// The user object that needs to be updated.
            /// </param>
            public static void UpdateUser(this ISiSenseSDK operations, string user, UserUpdate userUpdate = default(UserUpdate))
            {
                operations.UpdateUserAsync(user, userUpdate).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates one or more user details, by user ID or username.
            /// </summary>
            /// <remarks>
            /// Operations about users
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='user'>
            /// The user's ID or username.
            /// </param>
            /// <param name='userUpdate'>
            /// The user object that needs to be updated.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdateUserAsync(this ISiSenseSDK operations, string user, UserUpdate userUpdate = default(UserUpdate), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UpdateUserWithHttpMessagesAsync(user, userUpdate, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Deletes a user by user ID or username.
            /// </summary>
            /// <remarks>
            /// Operations about users
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='user'>
            /// The user's ID or username.
            /// </param>
            public static void DeleteUserByIdUsername(this ISiSenseSDK operations, string user)
            {
                operations.DeleteUserByIdUsernameAsync(user).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a user by user ID or username.
            /// </summary>
            /// <remarks>
            /// Operations about users
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='user'>
            /// The user's ID or username.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteUserByIdUsernameAsync(this ISiSenseSDK operations, string user, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteUserByIdUsernameWithHttpMessagesAsync(user, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Deletes a user by user ID.
            /// </summary>
            /// <remarks>
            /// Operations about users
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userIds'>
            /// The user's ID.
            /// </param>
            public static void DeleteUsers(this ISiSenseSDK operations, IList<string> userIds = default(IList<string>))
            {
                operations.DeleteUsersAsync(userIds).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a user by user ID.
            /// </summary>
            /// <remarks>
            /// Operations about users
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userIds'>
            /// The user's ID.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteUsersAsync(this ISiSenseSDK operations, IList<string> userIds = default(IList<string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteUsersWithHttpMessagesAsync(userIds, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Returns the users and related metadata of a simulated operation that adds
            /// multiple users.
            /// </summary>
            /// <remarks>
            /// Operations about users
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='emailUserList'>
            /// The list of user emails to add, or usernames for Active Directory mode.
            /// </param>
            /// <param name='admode'>
            /// run in ActiveDirectory mode
            /// </param>
            /// <param name='ldapDomainId'>
            /// run in ActiveDirectory mode
            /// </param>
            public static SimulateOKResponse Simulate(this ISiSenseSDK operations, IList<string> emailUserList = default(IList<string>), bool? admode = default(bool?), string ldapDomainId = default(string))
            {
                return operations.SimulateAsync(emailUserList, admode, ldapDomainId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the users and related metadata of a simulated operation that adds
            /// multiple users.
            /// </summary>
            /// <remarks>
            /// Operations about users
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='emailUserList'>
            /// The list of user emails to add, or usernames for Active Directory mode.
            /// </param>
            /// <param name='admode'>
            /// run in ActiveDirectory mode
            /// </param>
            /// <param name='ldapDomainId'>
            /// run in ActiveDirectory mode
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SimulateOKResponse> SimulateAsync(this ISiSenseSDK operations, IList<string> emailUserList = default(IList<string>), bool? admode = default(bool?), string ldapDomainId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SimulateWithHttpMessagesAsync(emailUserList, admode, ldapDomainId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Validates existing users by entering their emails.
            /// </summary>
            /// <remarks>
            /// Operations about users
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='emails'>
            /// List of emails of users that require validation.
            /// </param>
            public static void ValidateEmails(this ISiSenseSDK operations, IList<string> emails = default(IList<string>))
            {
                operations.ValidateEmailsAsync(emails).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Validates existing users by entering their emails.
            /// </summary>
            /// <remarks>
            /// Operations about users
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='emails'>
            /// List of emails of users that require validation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ValidateEmailsAsync(this ISiSenseSDK operations, IList<string> emails = default(IList<string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ValidateEmailsWithHttpMessagesAsync(emails, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Sends a user an email to activate or reset the user's password.
            /// </summary>
            /// <remarks>
            /// Operations about users
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userEmail'>
            /// The email of the user that requires a password reset.
            /// </param>
            public static void ForgetPassword(this ISiSenseSDK operations, UserEmail userEmail = default(UserEmail))
            {
                operations.ForgetPasswordAsync(userEmail).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Sends a user an email to activate or reset the user's password.
            /// </summary>
            /// <remarks>
            /// Operations about users
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userEmail'>
            /// The email of the user that requires a password reset.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ForgetPasswordAsync(this ISiSenseSDK operations, UserEmail userEmail = default(UserEmail), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ForgetPasswordWithHttpMessagesAsync(userEmail, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Returns all user groups with metadata.
            /// </summary>
            /// <remarks>
            /// Operations about groups
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='limit'>
            /// Limits the result set to a defined number of results. Enter 0 (zero) or
            /// leave blank not to limit.
            /// </param>
            /// <param name='skip'>
            /// Defines how many items to skip before returning the results.
            /// </param>
            /// <param name='search'>
            /// Enter a search query to return results matching the query.
            /// </param>
            /// <param name='dn'>
            /// Search for a group using an Active Directory dn as the search query. Use
            /// the semi-colon ; delimiter to search multiple groups.
            /// </param>
            /// <param name='orderby'>
            /// Orders the results by field name. You can add multiple sort fields
            /// separated by a comma delimiter ','
            /// </param>
            /// <param name='desc'>
            /// Defines the order of the results. True returns results in a descending
            /// order.
            /// </param>
            /// <param name='onlyAD'>
            /// Searches only Active Directory user groups.
            /// </param>
            /// <param name='noAD'>
            /// Search only for non-Active Directory groups.
            /// </param>
            /// <param name='exactMatch'>
            /// Searches exact matches when searching by the Active Directory dn.
            /// </param>
            /// <param name='usersCount'>
            /// Counts the number of users in each group.
            /// </param>
            /// <param name='includeDomain'>
            /// Returns the domain details of each AD group.
            /// </param>
            public static IList<GetAllOKResponseItemModel> GetAll1(this ISiSenseSDK operations, int? limit = default(int?), int? skip = default(int?), string search = default(string), string dn = default(string), string orderby = default(string), bool? desc = default(bool?), bool? onlyAD = default(bool?), bool? noAD = default(bool?), bool? exactMatch = default(bool?), bool? usersCount = default(bool?), bool? includeDomain = default(bool?))
            {
                return operations.GetAll1Async(limit, skip, search, dn, orderby, desc, onlyAD, noAD, exactMatch, usersCount, includeDomain).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns all user groups with metadata.
            /// </summary>
            /// <remarks>
            /// Operations about groups
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='limit'>
            /// Limits the result set to a defined number of results. Enter 0 (zero) or
            /// leave blank not to limit.
            /// </param>
            /// <param name='skip'>
            /// Defines how many items to skip before returning the results.
            /// </param>
            /// <param name='search'>
            /// Enter a search query to return results matching the query.
            /// </param>
            /// <param name='dn'>
            /// Search for a group using an Active Directory dn as the search query. Use
            /// the semi-colon ; delimiter to search multiple groups.
            /// </param>
            /// <param name='orderby'>
            /// Orders the results by field name. You can add multiple sort fields
            /// separated by a comma delimiter ','
            /// </param>
            /// <param name='desc'>
            /// Defines the order of the results. True returns results in a descending
            /// order.
            /// </param>
            /// <param name='onlyAD'>
            /// Searches only Active Directory user groups.
            /// </param>
            /// <param name='noAD'>
            /// Search only for non-Active Directory groups.
            /// </param>
            /// <param name='exactMatch'>
            /// Searches exact matches when searching by the Active Directory dn.
            /// </param>
            /// <param name='usersCount'>
            /// Counts the number of users in each group.
            /// </param>
            /// <param name='includeDomain'>
            /// Returns the domain details of each AD group.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<GetAllOKResponseItemModel>> GetAll1Async(this ISiSenseSDK operations, int? limit = default(int?), int? skip = default(int?), string search = default(string), string dn = default(string), string orderby = default(string), bool? desc = default(bool?), bool? onlyAD = default(bool?), bool? noAD = default(bool?), bool? exactMatch = default(bool?), bool? usersCount = default(bool?), bool? includeDomain = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAll1WithHttpMessagesAsync(limit, skip, search, dn, orderby, desc, onlyAD, noAD, exactMatch, usersCount, includeDomain, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds a new Sisense user group.
            /// </summary>
            /// <remarks>
            /// Operations about groups
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='newGroups'>
            /// The group object that needs to be added.
            /// </param>
            public static AddGroupOKResponse AddGroup(this ISiSenseSDK operations, IList<RegularGroup> newGroups = default(IList<RegularGroup>))
            {
                return operations.AddGroupAsync(newGroups).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds a new Sisense user group.
            /// </summary>
            /// <remarks>
            /// Operations about groups
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='newGroups'>
            /// The group object that needs to be added.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AddGroupOKResponse> AddGroupAsync(this ISiSenseSDK operations, IList<RegularGroup> newGroups = default(IList<RegularGroup>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddGroupWithHttpMessagesAsync(newGroups, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes multiple groups by group name or ID.
            /// </summary>
            /// <remarks>
            /// Operations about groups
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deleteGroup'>
            /// The IDs of the groups to delete.
            /// </param>
            public static void DeleteGroups(this ISiSenseSDK operations, DeleteGroup deleteGroup = default(DeleteGroup))
            {
                operations.DeleteGroupsAsync(deleteGroup).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes multiple groups by group name or ID.
            /// </summary>
            /// <remarks>
            /// Operations about groups
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deleteGroup'>
            /// The IDs of the groups to delete.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteGroupsAsync(this ISiSenseSDK operations, DeleteGroup deleteGroup = default(DeleteGroup), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteGroupsWithHttpMessagesAsync(deleteGroup, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Searches for groups directly in Active Directory.
            /// </summary>
            /// <remarks>
            /// Operations about groups
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='limit'>
            /// Limits the result set to a defined number of results. Enter 0 (zero) or
            /// leave blank not to limit. - 0 or blank to not limit
            /// </param>
            /// <param name='checkExist'>
            /// Check if a group exists in Active Directory, and if not, searches groups
            /// created in Sisense.
            /// </param>
            /// <param name='search'>
            /// Enter a search query to return results matching the query.
            /// </param>
            /// <param name='domain'>
            /// Enter a domain name or id.
            /// </param>
            public static IList<GetAdGroupsOKResponseItem> GetAdGroups(this ISiSenseSDK operations, int? limit = default(int?), bool? checkExist = default(bool?), string search = default(string), string domain = default(string))
            {
                return operations.GetAdGroupsAsync(limit, checkExist, search, domain).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Searches for groups directly in Active Directory.
            /// </summary>
            /// <remarks>
            /// Operations about groups
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='limit'>
            /// Limits the result set to a defined number of results. Enter 0 (zero) or
            /// leave blank not to limit. - 0 or blank to not limit
            /// </param>
            /// <param name='checkExist'>
            /// Check if a group exists in Active Directory, and if not, searches groups
            /// created in Sisense.
            /// </param>
            /// <param name='search'>
            /// Enter a search query to return results matching the query.
            /// </param>
            /// <param name='domain'>
            /// Enter a domain name or id.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<GetAdGroupsOKResponseItem>> GetAdGroupsAsync(this ISiSenseSDK operations, int? limit = default(int?), bool? checkExist = default(bool?), string search = default(string), string domain = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAdGroupsWithHttpMessagesAsync(limit, checkExist, search, domain, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds a new Active Directory user group.
            /// </summary>
            /// <remarks>
            /// Operations about groups
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='newGroups'>
            /// The group object that needs to be added to the collection.
            /// </param>
            public static AddAdGroupsOKResponse AddAdGroups(this ISiSenseSDK operations, IList<ADgroup> newGroups = default(IList<ADgroup>))
            {
                return operations.AddAdGroupsAsync(newGroups).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds a new Active Directory user group.
            /// </summary>
            /// <remarks>
            /// Operations about groups
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='newGroups'>
            /// The group object that needs to be added to the collection.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AddAdGroupsOKResponse> AddAdGroupsAsync(this ISiSenseSDK operations, IList<ADgroup> newGroups = default(IList<ADgroup>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddAdGroupsWithHttpMessagesAsync(newGroups, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Searches for groups in all directories.
            /// </summary>
            /// <remarks>
            /// Operations about groups
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='limit'>
            /// Limits the result set to a defined number of results. Enter 0 (zero) or
            /// leave blank not to limit. - 0 or blank to not limit
            /// </param>
            /// <param name='search'>
            /// Enter a search query to return results matching the query.
            /// </param>
            /// <param name='usersCount'>
            /// Returns the number of users per group.
            /// </param>
            /// <param name='includeDomain'>
            /// Returns the domain details of each AD group.
            /// </param>
            public static IList<GetAllDirectoriesGroupsOKResponseItem> GetAllDirectoriesGroups(this ISiSenseSDK operations, int? limit = default(int?), string search = default(string), bool? usersCount = default(bool?), bool? includeDomain = default(bool?))
            {
                return operations.GetAllDirectoriesGroupsAsync(limit, search, usersCount, includeDomain).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Searches for groups in all directories.
            /// </summary>
            /// <remarks>
            /// Operations about groups
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='limit'>
            /// Limits the result set to a defined number of results. Enter 0 (zero) or
            /// leave blank not to limit. - 0 or blank to not limit
            /// </param>
            /// <param name='search'>
            /// Enter a search query to return results matching the query.
            /// </param>
            /// <param name='usersCount'>
            /// Returns the number of users per group.
            /// </param>
            /// <param name='includeDomain'>
            /// Returns the domain details of each AD group.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<GetAllDirectoriesGroupsOKResponseItem>> GetAllDirectoriesGroupsAsync(this ISiSenseSDK operations, int? limit = default(int?), string search = default(string), bool? usersCount = default(bool?), bool? includeDomain = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllDirectoriesGroupsWithHttpMessagesAsync(limit, search, usersCount, includeDomain, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns metadata for a group by group ID or name.
            /// </summary>
            /// <remarks>
            /// Operations about groups
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='group'>
            /// The ID or username of the group
            /// </param>
            public static FindByIdNameOKResponse FindByIdName(this ISiSenseSDK operations, string group)
            {
                return operations.FindByIdNameAsync(group).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns metadata for a group by group ID or name.
            /// </summary>
            /// <remarks>
            /// Operations about groups
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='group'>
            /// The ID or username of the group
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<FindByIdNameOKResponse> FindByIdNameAsync(this ISiSenseSDK operations, string group, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.FindByIdNameWithHttpMessagesAsync(group, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates a group by group ID or name. What are we updating? name, role (only
            /// for AD)
            /// </summary>
            /// <remarks>
            /// Operations about groups
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='group'>
            /// The group's ID or name.
            /// </param>
            /// <param name='groupUpdate'>
            /// The group object that needs to be updated.
            /// </param>
            public static void UpdateGroup(this ISiSenseSDK operations, string group, GroupUpdate groupUpdate = default(GroupUpdate))
            {
                operations.UpdateGroupAsync(group, groupUpdate).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates a group by group ID or name. What are we updating? name, role (only
            /// for AD)
            /// </summary>
            /// <remarks>
            /// Operations about groups
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='group'>
            /// The group's ID or name.
            /// </param>
            /// <param name='groupUpdate'>
            /// The group object that needs to be updated.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdateGroupAsync(this ISiSenseSDK operations, string group, GroupUpdate groupUpdate = default(GroupUpdate), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UpdateGroupWithHttpMessagesAsync(group, groupUpdate, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Deletes a group by group ID or name.
            /// </summary>
            /// <remarks>
            /// Operations about groups
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='group'>
            /// The group's ID or name.
            /// </param>
            /// <param name='deleteAdUsers'>
            /// Select true if you want to delete the users of the Active Directory group.
            /// </param>
            public static void DeleteGroupByIdName(this ISiSenseSDK operations, string group, bool? deleteAdUsers = default(bool?))
            {
                operations.DeleteGroupByIdNameAsync(group, deleteAdUsers).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a group by group ID or name.
            /// </summary>
            /// <remarks>
            /// Operations about groups
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='group'>
            /// The group's ID or name.
            /// </param>
            /// <param name='deleteAdUsers'>
            /// Select true if you want to delete the users of the Active Directory group.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteGroupByIdNameAsync(this ISiSenseSDK operations, string group, bool? deleteAdUsers = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteGroupByIdNameWithHttpMessagesAsync(group, deleteAdUsers, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Returns a list of users in a group together with each user's metadata.
            /// </summary>
            /// <remarks>
            /// Operations about groups
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='group'>
            /// The group's ID or username.
            /// </param>
            public static IList<GetGroupUsersOKResponseItem> GetGroupUsers(this ISiSenseSDK operations, string group)
            {
                return operations.GetGroupUsersAsync(group).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of users in a group together with each user's metadata.
            /// </summary>
            /// <remarks>
            /// Operations about groups
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='group'>
            /// The group's ID or username.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<GetGroupUsersOKResponseItem>> GetGroupUsersAsync(this ISiSenseSDK operations, string group, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetGroupUsersWithHttpMessagesAsync(group, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds users to a Sisense user group.
            /// </summary>
            /// <remarks>
            /// Operations about groups
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='group'>
            /// The group's ID or name.
            /// </param>
            /// <param name='usersArray'>
            /// The IDs or usernames of the users that need to be added to the group.
            /// </param>
            public static IList<string> AddGroupUsers(this ISiSenseSDK operations, string group, IList<string> usersArray = default(IList<string>))
            {
                return operations.AddGroupUsersAsync(group, usersArray).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds users to a Sisense user group.
            /// </summary>
            /// <remarks>
            /// Operations about groups
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='group'>
            /// The group's ID or name.
            /// </param>
            /// <param name='usersArray'>
            /// The IDs or usernames of the users that need to be added to the group.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<string>> AddGroupUsersAsync(this ISiSenseSDK operations, string group, IList<string> usersArray = default(IList<string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddGroupUsersWithHttpMessagesAsync(group, usersArray, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Removes users from a user group.
            /// </summary>
            /// <remarks>
            /// Operations about groups
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='group'>
            /// The group's ID or name.
            /// </param>
            /// <param name='usersArray'>
            /// The user IDs or usernames to remove from the group.
            /// </param>
            public static IList<string> DeleteGroupUsers(this ISiSenseSDK operations, string group, IList<string> usersArray = default(IList<string>))
            {
                return operations.DeleteGroupUsersAsync(group, usersArray).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Removes users from a user group.
            /// </summary>
            /// <remarks>
            /// Operations about groups
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='group'>
            /// The group's ID or name.
            /// </param>
            /// <param name='usersArray'>
            /// The user IDs or usernames to remove from the group.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<string>> DeleteGroupUsersAsync(this ISiSenseSDK operations, string group, IList<string> usersArray = default(IList<string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteGroupUsersWithHttpMessagesAsync(group, usersArray, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a list of groups by groups IDs.
            /// </summary>
            /// <remarks>
            /// Operations about groups
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='idsList'>
            /// List of groups Ids
            /// </param>
            /// <param name='usersCount'>
            /// Returns the number of users per group.
            /// </param>
            /// <param name='includeDomain'>
            /// Returns the domain details of each AD group.
            /// </param>
            public static IList<FindByIdsOKResponseItem> FindByIds(this ISiSenseSDK operations, IList<string> idsList = default(IList<string>), bool? usersCount = default(bool?), bool? includeDomain = default(bool?))
            {
                return operations.FindByIdsAsync(idsList, usersCount, includeDomain).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of groups by groups IDs.
            /// </summary>
            /// <remarks>
            /// Operations about groups
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='idsList'>
            /// List of groups Ids
            /// </param>
            /// <param name='usersCount'>
            /// Returns the number of users per group.
            /// </param>
            /// <param name='includeDomain'>
            /// Returns the domain details of each AD group.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<FindByIdsOKResponseItem>> FindByIdsAsync(this ISiSenseSDK operations, IList<string> idsList = default(IList<string>), bool? usersCount = default(bool?), bool? includeDomain = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.FindByIdsWithHttpMessagesAsync(idsList, usersCount, includeDomain, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Checks if the group exists.
            /// </summary>
            /// <remarks>
            /// Operations about groups
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='group'>
            /// The name of the group to validate.
            /// </param>
            public static bool? ValidateNameMethod(this ISiSenseSDK operations, GroupModel group = default(GroupModel))
            {
                return operations.ValidateNameMethodAsync(group).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Checks if the group exists.
            /// </summary>
            /// <remarks>
            /// Operations about groups
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='group'>
            /// The name of the group to validate.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<bool?> ValidateNameMethodAsync(this ISiSenseSDK operations, GroupModel group = default(GroupModel), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ValidateNameMethodWithHttpMessagesAsync(group, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns all the role types and the enabled permissions per role type.
            /// </summary>
            /// <remarks>
            /// Get all roles
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='includeManifest'>
            /// Includes the role's manifest (list of permissions showing what's
            /// enabled/disabled).
            /// </param>
            /// <param name='includeBaseRolesName'>
            /// Includes the role's base role name.
            /// </param>
            /// <param name='compiledRoles'>
            /// Select True.
            /// </param>
            /// <param name='envelop'>
            /// If true, the response will always be '200' with fail and success codes
            /// presented in an array.
            /// </param>
            public static IList<GetAllRolesOKResponseItem> GetAllRoles(this ISiSenseSDK operations, bool? includeManifest = default(bool?), bool? includeBaseRolesName = default(bool?), bool? compiledRoles = default(bool?), bool? envelop = default(bool?))
            {
                return operations.GetAllRolesAsync(includeManifest, includeBaseRolesName, compiledRoles, envelop).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns all the role types and the enabled permissions per role type.
            /// </summary>
            /// <remarks>
            /// Get all roles
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='includeManifest'>
            /// Includes the role's manifest (list of permissions showing what's
            /// enabled/disabled).
            /// </param>
            /// <param name='includeBaseRolesName'>
            /// Includes the role's base role name.
            /// </param>
            /// <param name='compiledRoles'>
            /// Select True.
            /// </param>
            /// <param name='envelop'>
            /// If true, the response will always be '200' with fail and success codes
            /// presented in an array.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<GetAllRolesOKResponseItem>> GetAllRolesAsync(this ISiSenseSDK operations, bool? includeManifest = default(bool?), bool? includeBaseRolesName = default(bool?), bool? compiledRoles = default(bool?), bool? envelop = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllRolesWithHttpMessagesAsync(includeManifest, includeBaseRolesName, compiledRoles, envelop, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds a new role (currently not supported).
            /// </summary>
            /// <remarks>
            /// Add new role
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='role'>
            /// role object that needs to be added to the collection
            /// </param>
            /// <param name='envelop'>
            /// wrap response with status 200
            /// </param>
            public static AddRoleOKResponse AddRole(this ISiSenseSDK operations, Role role = default(Role), bool? envelop = default(bool?))
            {
                return operations.AddRoleAsync(role, envelop).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds a new role (currently not supported).
            /// </summary>
            /// <remarks>
            /// Add new role
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='role'>
            /// role object that needs to be added to the collection
            /// </param>
            /// <param name='envelop'>
            /// wrap response with status 200
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AddRoleOKResponse> AddRoleAsync(this ISiSenseSDK operations, Role role = default(Role), bool? envelop = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddRoleWithHttpMessagesAsync(role, envelop, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns the user role by role ID or role name.
            /// </summary>
            /// <remarks>
            /// Get role by id or name
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='idOrName'>
            /// The name or ID of the role.
            /// </param>
            /// <param name='compiledRole'>
            /// True returns full list of role permissions. False returns the compiled base
            /// role name.
            /// </param>
            /// <param name='envelop'>
            /// wrap response with status 200
            /// </param>
            public static GetRoleByIdOrNameOKResponse GetRoleByIdOrName(this ISiSenseSDK operations, string idOrName, bool? compiledRole = default(bool?), bool? envelop = default(bool?))
            {
                return operations.GetRoleByIdOrNameAsync(idOrName, compiledRole, envelop).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the user role by role ID or role name.
            /// </summary>
            /// <remarks>
            /// Get role by id or name
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='idOrName'>
            /// The name or ID of the role.
            /// </param>
            /// <param name='compiledRole'>
            /// True returns full list of role permissions. False returns the compiled base
            /// role name.
            /// </param>
            /// <param name='envelop'>
            /// wrap response with status 200
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GetRoleByIdOrNameOKResponse> GetRoleByIdOrNameAsync(this ISiSenseSDK operations, string idOrName, bool? compiledRole = default(bool?), bool? envelop = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetRoleByIdOrNameWithHttpMessagesAsync(idOrName, compiledRole, envelop, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a user role by ID or name.
            /// </summary>
            /// <remarks>
            /// Delete role by id or name
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='idOrName'>
            /// The name or ID of the role.
            /// </param>
            /// <param name='envelop'>
            /// wrap response with status 200
            /// </param>
            public static void DeleteRoleByIdOrName(this ISiSenseSDK operations, string idOrName, bool? envelop = default(bool?))
            {
                operations.DeleteRoleByIdOrNameAsync(idOrName, envelop).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a user role by ID or name.
            /// </summary>
            /// <remarks>
            /// Delete role by id or name
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='idOrName'>
            /// The name or ID of the role.
            /// </param>
            /// <param name='envelop'>
            /// wrap response with status 200
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteRoleByIdOrNameAsync(this ISiSenseSDK operations, string idOrName, bool? envelop = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteRoleByIdOrNameWithHttpMessagesAsync(idOrName, envelop, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Updates a user role by role ID or name.
            /// </summary>
            /// <remarks>
            /// Update role by id or name
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='idOrName'>
            /// The name or ID of the role.
            /// </param>
            /// <param name='role'>
            /// The updated role object should include the path to the setting you want to
            /// change and the setting.
            /// </param>
            /// <param name='envelop'>
            /// wrap response with status 200
            /// </param>
            public static UpdateRoleByIdOrNameOKResponse UpdateRoleByIdOrName(this ISiSenseSDK operations, string idOrName, Role role = default(Role), bool? envelop = default(bool?))
            {
                return operations.UpdateRoleByIdOrNameAsync(idOrName, role, envelop).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates a user role by role ID or name.
            /// </summary>
            /// <remarks>
            /// Update role by id or name
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='idOrName'>
            /// The name or ID of the role.
            /// </param>
            /// <param name='role'>
            /// The updated role object should include the path to the setting you want to
            /// change and the setting.
            /// </param>
            /// <param name='envelop'>
            /// wrap response with status 200
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UpdateRoleByIdOrNameOKResponse> UpdateRoleByIdOrNameAsync(this ISiSenseSDK operations, string idOrName, Role role = default(Role), bool? envelop = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateRoleByIdOrNameWithHttpMessagesAsync(idOrName, role, envelop, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns the permissions of a user role under a specific path in the role
            /// manifest.
            /// </summary>
            /// <remarks>
            /// Get manifest by id or name and path
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='idOrName'>
            /// The name or ID of the role.
            /// </param>
            /// <param name='path'>
            /// Encoded path to the manifest, for example, /dashboards/filters will return
            /// all permissions under filters.
            /// </param>
            /// <param name='compiledRole'>
            /// True returns full list of role permissions. False returns the compiled base
            /// role name.
            /// </param>
            /// <param name='envelop'>
            /// wrap response with status 200
            /// </param>
            public static GetManifestByPathOKResponse GetManifestByPath(this ISiSenseSDK operations, string idOrName, string path, bool? compiledRole = default(bool?), bool? envelop = default(bool?))
            {
                return operations.GetManifestByPathAsync(idOrName, path, compiledRole, envelop).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the permissions of a user role under a specific path in the role
            /// manifest.
            /// </summary>
            /// <remarks>
            /// Get manifest by id or name and path
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='idOrName'>
            /// The name or ID of the role.
            /// </param>
            /// <param name='path'>
            /// Encoded path to the manifest, for example, /dashboards/filters will return
            /// all permissions under filters.
            /// </param>
            /// <param name='compiledRole'>
            /// True returns full list of role permissions. False returns the compiled base
            /// role name.
            /// </param>
            /// <param name='envelop'>
            /// wrap response with status 200
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GetManifestByPathOKResponse> GetManifestByPathAsync(this ISiSenseSDK operations, string idOrName, string path, bool? compiledRole = default(bool?), bool? envelop = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetManifestByPathWithHttpMessagesAsync(idOrName, path, compiledRole, envelop, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Restores some or all permissions under a specific path in the role
            /// manifest.
            /// </summary>
            /// <remarks>
            /// delete manifest by id or name and path
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='idOrName'>
            /// The name or ID of the role.
            /// </param>
            /// <param name='path'>
            /// Encoded path to the manifest. Enter the full path of the setting you want
            /// to change, as it appears in the hierarchy.
            /// </param>
            /// <param name='envelop'>
            /// wrap response with status 200
            /// </param>
            public static DeleteManifestByPathOKResponse DeleteManifestByPath(this ISiSenseSDK operations, string idOrName, string path, bool? envelop = default(bool?))
            {
                return operations.DeleteManifestByPathAsync(idOrName, path, envelop).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Restores some or all permissions under a specific path in the role
            /// manifest.
            /// </summary>
            /// <remarks>
            /// delete manifest by id or name and path
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='idOrName'>
            /// The name or ID of the role.
            /// </param>
            /// <param name='path'>
            /// Encoded path to the manifest. Enter the full path of the setting you want
            /// to change, as it appears in the hierarchy.
            /// </param>
            /// <param name='envelop'>
            /// wrap response with status 200
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeleteManifestByPathOKResponse> DeleteManifestByPathAsync(this ISiSenseSDK operations, string idOrName, string path, bool? envelop = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteManifestByPathWithHttpMessagesAsync(idOrName, path, envelop, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates permissions in a user role manifest by role ID or name.
            /// </summary>
            /// <remarks>
            /// update manifest by id or name and path
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='idOrName'>
            /// The name or ID of the role.
            /// </param>
            /// <param name='path'>
            /// Encoded path to the manifest. Enter the path to the setting that you want
            /// to change as it appears in the hierarchy. Do not include the setting in the
            /// path. Example: To change the ‘Create’ setting for dashboard filters, enter
            /// dashboards/filters/. For creating dashboards, enter /dashboards.
            /// </param>
            /// <param name='manifest'>
            /// updated manifest object
            /// </param>
            /// <param name='envelop'>
            /// wrap response with status 200
            /// </param>
            public static UpdateManifestByPathOKResponse UpdateManifestByPath(this ISiSenseSDK operations, string idOrName, string path, Manifest manifest = default(Manifest), bool? envelop = default(bool?))
            {
                return operations.UpdateManifestByPathAsync(idOrName, path, manifest, envelop).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates permissions in a user role manifest by role ID or name.
            /// </summary>
            /// <remarks>
            /// update manifest by id or name and path
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='idOrName'>
            /// The name or ID of the role.
            /// </param>
            /// <param name='path'>
            /// Encoded path to the manifest. Enter the path to the setting that you want
            /// to change as it appears in the hierarchy. Do not include the setting in the
            /// path. Example: To change the ‘Create’ setting for dashboard filters, enter
            /// dashboards/filters/. For creating dashboards, enter /dashboards.
            /// </param>
            /// <param name='manifest'>
            /// updated manifest object
            /// </param>
            /// <param name='envelop'>
            /// wrap response with status 200
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UpdateManifestByPathOKResponse> UpdateManifestByPathAsync(this ISiSenseSDK operations, string idOrName, string path, Manifest manifest = default(Manifest), bool? envelop = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateManifestByPathWithHttpMessagesAsync(idOrName, path, manifest, envelop, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates a user role manifest by role ID or name.
            /// </summary>
            /// <remarks>
            /// add manifest by id or name and path
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='idOrName'>
            /// The name or ID of the role.
            /// </param>
            /// <param name='path'>
            /// Encoded path to the manifest. Enter the path to the setting that you want
            /// to change as it appears in the hierarchy. Do not include the setting in the
            /// path. Example: To change the ‘Create’ setting for dashboard filters, enter
            /// dashboards/filters/. For creating dashboards, enter /dashboards. See the
            /// reference table above for more settings.
            /// </param>
            /// <param name='manifest'>
            /// The updated manifest object. Defines whether to enable or disable the
            /// setting. For example, to enable ‘create’, type in: create: true
            /// </param>
            /// <param name='envelop'>
            /// wrap response with status 200
            /// </param>
            public static AddToManifestByPathOKResponse AddToManifestByPath(this ISiSenseSDK operations, string idOrName, string path, Manifest manifest = default(Manifest), bool? envelop = default(bool?))
            {
                return operations.AddToManifestByPathAsync(idOrName, path, manifest, envelop).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates a user role manifest by role ID or name.
            /// </summary>
            /// <remarks>
            /// add manifest by id or name and path
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='idOrName'>
            /// The name or ID of the role.
            /// </param>
            /// <param name='path'>
            /// Encoded path to the manifest. Enter the path to the setting that you want
            /// to change as it appears in the hierarchy. Do not include the setting in the
            /// path. Example: To change the ‘Create’ setting for dashboard filters, enter
            /// dashboards/filters/. For creating dashboards, enter /dashboards. See the
            /// reference table above for more settings.
            /// </param>
            /// <param name='manifest'>
            /// The updated manifest object. Defines whether to enable or disable the
            /// setting. For example, to enable ‘create’, type in: create: true
            /// </param>
            /// <param name='envelop'>
            /// wrap response with status 200
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AddToManifestByPathOKResponse> AddToManifestByPathAsync(this ISiSenseSDK operations, string idOrName, string path, Manifest manifest = default(Manifest), bool? envelop = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddToManifestByPathWithHttpMessagesAsync(idOrName, path, manifest, envelop, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
