// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace UnOffSiSenseDotNet.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// CubeInfoItem
    /// </summary>
    public partial class CubeInfoItem
    {
        /// <summary>
        /// Initializes a new instance of the CubeInfoItem class.
        /// </summary>
        public CubeInfoItem()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the CubeInfoItem class.
        /// </summary>
        /// <param name="cubeOperationStatus">Possible values include: 'NONE',
        /// 'IMPORTING', 'EXPORTING', 'DUPLICATING'</param>
        /// <param name="cubeStatusErrorCode">Possible values include:
        /// 'FAILED_TO_STOP', 'FAILED_TO_START'</param>
        /// <param name="indexSize">Possible values include: 'SHORT',
        /// 'LONG'</param>
        /// <param name="runtimeStatus">Possible values include: 'STOPPED',
        /// 'STOPPING', 'STARTING', 'RUNNING', 'BUILDING', 'UNKNOWN'</param>
        public CubeInfoItem(string buildId = default(string), bool? building = default(bool?), int? concurrentQueries = default(int?), string cubeOperationStatus = default(string), string cubeStatusErrorCode = default(string), System.Guid? dataGroupOid = default(System.Guid?), string dataSourceId = default(string), long? ecubePID = default(long?), bool? finalizing = default(bool?), long? generation = default(long?), string hostName = default(string), string indexSize = default(string), string instanceId = default(string), System.DateTime? lastBuildAttemptTime = default(System.DateTime?), bool? lastBuildFailed = default(bool?), System.DateTime? lastBuildTime = default(System.DateTime?), string lastFailureMessage = default(string), System.DateTime? lastUpdatedTime = default(System.DateTime?), string name = default(string), long? newConnectorsPID = default(long?), int? newConnectorsPort = default(int?), string nextBuildUri = default(string), long? nextBuildUriDirectorySize = default(long?), string physicalName = default(string), int? port = default(int?), int? queryTimeout = default(int?), string runtimeStatus = default(string), string schemaId = default(string), long? shadowEcubePID = default(long?), string shadowUri = default(string), long? shadowUriDirectorySize = default(long?), string uri = default(string), long? uriDirectorySize = default(long?))
        {
            BuildId = buildId;
            Building = building;
            ConcurrentQueries = concurrentQueries;
            CubeOperationStatus = cubeOperationStatus;
            CubeStatusErrorCode = cubeStatusErrorCode;
            DataGroupOid = dataGroupOid;
            DataSourceId = dataSourceId;
            EcubePID = ecubePID;
            Finalizing = finalizing;
            Generation = generation;
            HostName = hostName;
            IndexSize = indexSize;
            InstanceId = instanceId;
            LastBuildAttemptTime = lastBuildAttemptTime;
            LastBuildFailed = lastBuildFailed;
            LastBuildTime = lastBuildTime;
            LastFailureMessage = lastFailureMessage;
            LastUpdatedTime = lastUpdatedTime;
            Name = name;
            NewConnectorsPID = newConnectorsPID;
            NewConnectorsPort = newConnectorsPort;
            NextBuildUri = nextBuildUri;
            NextBuildUriDirectorySize = nextBuildUriDirectorySize;
            PhysicalName = physicalName;
            Port = port;
            QueryTimeout = queryTimeout;
            RuntimeStatus = runtimeStatus;
            SchemaId = schemaId;
            ShadowEcubePID = shadowEcubePID;
            ShadowUri = shadowUri;
            ShadowUriDirectorySize = shadowUriDirectorySize;
            Uri = uri;
            UriDirectorySize = uriDirectorySize;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "buildId")]
        public string BuildId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "building")]
        public bool? Building { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "concurrentQueries")]
        public int? ConcurrentQueries { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'NONE', 'IMPORTING',
        /// 'EXPORTING', 'DUPLICATING'
        /// </summary>
        [JsonProperty(PropertyName = "cubeOperationStatus")]
        public string CubeOperationStatus { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'FAILED_TO_STOP',
        /// 'FAILED_TO_START'
        /// </summary>
        [JsonProperty(PropertyName = "cubeStatusErrorCode")]
        public string CubeStatusErrorCode { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "dataGroupOid")]
        public System.Guid? DataGroupOid { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "dataSourceId")]
        public string DataSourceId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ecubePID")]
        public long? EcubePID { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "finalizing")]
        public bool? Finalizing { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "generation")]
        public long? Generation { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "hostName")]
        public string HostName { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'SHORT', 'LONG'
        /// </summary>
        [JsonProperty(PropertyName = "indexSize")]
        public string IndexSize { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "instanceId")]
        public string InstanceId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "lastBuildAttemptTime")]
        public System.DateTime? LastBuildAttemptTime { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "lastBuildFailed")]
        public bool? LastBuildFailed { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "lastBuildTime")]
        public System.DateTime? LastBuildTime { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "lastFailureMessage")]
        public string LastFailureMessage { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "lastUpdatedTime")]
        public System.DateTime? LastUpdatedTime { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "newConnectorsPID")]
        public long? NewConnectorsPID { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "newConnectorsPort")]
        public int? NewConnectorsPort { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "nextBuildUri")]
        public string NextBuildUri { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "nextBuildUriDirectorySize")]
        public long? NextBuildUriDirectorySize { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "physicalName")]
        public string PhysicalName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "port")]
        public int? Port { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "queryTimeout")]
        public int? QueryTimeout { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'STOPPED', 'STOPPING',
        /// 'STARTING', 'RUNNING', 'BUILDING', 'UNKNOWN'
        /// </summary>
        [JsonProperty(PropertyName = "runtimeStatus")]
        public string RuntimeStatus { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "schemaId")]
        public string SchemaId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "shadowEcubePID")]
        public long? ShadowEcubePID { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "shadowUri")]
        public string ShadowUri { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "shadowUriDirectorySize")]
        public long? ShadowUriDirectorySize { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "uri")]
        public string Uri { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "uriDirectorySize")]
        public long? UriDirectorySize { get; set; }

    }
}
