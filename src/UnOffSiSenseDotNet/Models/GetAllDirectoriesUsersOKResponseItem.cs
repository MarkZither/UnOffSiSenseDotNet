// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace UnOffSiSenseDotNet.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class GetAllDirectoriesUsersOKResponseItem
    {
        /// <summary>
        /// Initializes a new instance of the
        /// GetAllDirectoriesUsersOKResponseItem class.
        /// </summary>
        public GetAllDirectoriesUsersOKResponseItem()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// GetAllDirectoriesUsersOKResponseItem class.
        /// </summary>
        public GetAllDirectoriesUsersOKResponseItem(string _id = default(string), bool? active = default(bool?), bool? activeDirectory = default(bool?), IList<object> adgroups = default(IList<object>), string baseRoleName = default(string), bool? changePasswordState = default(bool?), System.DateTime? created = default(System.DateTime?), string createdSso = default(string), string dn = default(string), string email = default(string), string firstName = default(string), IList<string> groups = default(IList<string>), string hash = default(string), System.DateTime? lastLogin = default(System.DateTime?), string lastName = default(string), System.DateTime? lastUpdated = default(System.DateTime?), string ldapDomainId = default(string), System.DateTime? pendingExpiration = default(System.DateTime?), GetAllDirectoriesUsersOKResponseItemPreferences preferences = default(GetAllDirectoriesUsersOKResponseItemPreferences), string principalName = default(string), string roleId = default(string), string roleName = default(string), string uSNChanged = default(string), string userName = default(string))
        {
            this._id = _id;
            Active = active;
            ActiveDirectory = activeDirectory;
            Adgroups = adgroups;
            BaseRoleName = baseRoleName;
            ChangePasswordState = changePasswordState;
            Created = created;
            CreatedSso = createdSso;
            Dn = dn;
            Email = email;
            FirstName = firstName;
            Groups = groups;
            Hash = hash;
            LastLogin = lastLogin;
            LastName = lastName;
            LastUpdated = lastUpdated;
            LdapDomainId = ldapDomainId;
            PendingExpiration = pendingExpiration;
            Preferences = preferences;
            PrincipalName = principalName;
            RoleId = roleId;
            RoleName = roleName;
            USNChanged = uSNChanged;
            UserName = userName;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "_id")]
        public string _id { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "active")]
        public bool? Active { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "activeDirectory")]
        public bool? ActiveDirectory { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "adgroups")]
        public IList<object> Adgroups { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "baseRoleName")]
        public string BaseRoleName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "changePasswordState")]
        public bool? ChangePasswordState { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "created")]
        public System.DateTime? Created { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "createdSso")]
        public string CreatedSso { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "dn")]
        public string Dn { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "email")]
        public string Email { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "firstName")]
        public string FirstName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "groups")]
        public IList<string> Groups { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "hash")]
        public string Hash { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "lastLogin")]
        public System.DateTime? LastLogin { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "lastName")]
        public string LastName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "lastUpdated")]
        public System.DateTime? LastUpdated { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ldapDomainId")]
        public string LdapDomainId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "pendingExpiration")]
        public System.DateTime? PendingExpiration { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "preferences")]
        public GetAllDirectoriesUsersOKResponseItemPreferences Preferences { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "principalName")]
        public string PrincipalName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "roleId")]
        public string RoleId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "roleName")]
        public string RoleName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "uSNChanged")]
        public string USNChanged { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "userName")]
        public string UserName { get; set; }

    }
}
