// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace UnOffSiSenseDotNet.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class Widget
    {
        /// <summary>
        /// Initializes a new instance of the Widget class.
        /// </summary>
        public Widget()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Widget class.
        /// </summary>
        public Widget(string type, string _id = default(string), System.DateTime? created = default(System.DateTime?), string datasource = default(string), string desc = default(string), System.DateTime? lastUpdated = default(System.DateTime?), System.DateTime? lastUsed = default(System.DateTime?), string layout = default(string), string metadata = default(string), string oid = default(string), string owner = default(string), string parentFolder = default(string), string selection = default(string), IList<SharesToObject> shares = default(IList<SharesToObject>), string source = default(string), string subtype = default(string), IList<object> tags = default(IList<object>), int? usageCount = default(int?), string userId = default(string))
        {
            this._id = _id;
            Created = created;
            Datasource = datasource;
            Desc = desc;
            LastUpdated = lastUpdated;
            LastUsed = lastUsed;
            Layout = layout;
            Metadata = metadata;
            Oid = oid;
            Owner = owner;
            ParentFolder = parentFolder;
            Selection = selection;
            Shares = shares;
            Source = source;
            Subtype = subtype;
            Tags = tags;
            Type = type;
            UsageCount = usageCount;
            UserId = userId;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "_id")]
        public string _id { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "created")]
        public System.DateTime? Created { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "datasource")]
        public string Datasource { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "desc")]
        public string Desc { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "lastUpdated")]
        public System.DateTime? LastUpdated { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "lastUsed")]
        public System.DateTime? LastUsed { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "layout")]
        public string Layout { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "metadata")]
        public string Metadata { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "oid")]
        public string Oid { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "owner")]
        public string Owner { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "parentFolder")]
        public string ParentFolder { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "selection")]
        public string Selection { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "shares")]
        public IList<SharesToObject> Shares { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "source")]
        public string Source { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "subtype")]
        public string Subtype { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "tags")]
        public IList<object> Tags { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "usageCount")]
        public int? UsageCount { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "userId")]
        public string UserId { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Type == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Type");
            }
        }
    }
}
